Basics of Web:
Define Web?
Collection of e-resoruces is called web. Sir Tim Berners-Lee invented the World Wide Web in 1989.

Define W3C?
World Wide Web Consortium, It is an organization to maintain web standards, It was founded by Tim Berners-Lee @ 1994.

Define INTERNET?
INTERnational NETwork
OR
INTERconnected NETwork
OR
A network of networks based on the TCP/IP communications protocol.Father of Internet is Dr. Vint Cerf.

Define TCP?
Transmission Control Protocol
OR
It is connectvity between computers in a NETWORK(LAN).That facilitates the exchange of messages.

Define IP?
Internet Protocol
OR
It is connectvity between networks (WAN)

Define Protocol?
Collection of rules between sender & receiver
OR
It is a standard set of rules that allow electronic devices to communicate with each other.

Defime Email/WebMail?
It is a method of exchanging messages between people using electronic devices.
OR
Webmail is a way of sending and receiving emails from a web browser.

Mail communications are classified into the following two types:
1. Online Mail Communications
2. Offline Mail Communications

1. Online Mail Communications
These are popularly known as web mails. First web mail concept developed by an Indian Mr. Sabeer Bhatia, ie. https://www.hotmail.com
Example:
Gmail, Yahoomail, Hotmail, AOL Mail, GMX Mail, Outlook.com...........!!

2. Offline Mail Communications
These are popularly known as POP mails. POP stands for Post Office Protocol. These are special softwares. 
Example:
MSOutlookExpress
MozillaThunderBird
PoP3 Server.

Define SMTP?
Simple Mail Transfer Protocol. 
OR
Cross mail domain communications

Define MIME?
Multipurpose Internet Mail Extensions 
OR
It is an Internet standard that extends the format of email messages, like pictures, audio, video, and various types of documents and files in the e-mail. It supports UNICODE format Data..!!

Define HTTP/HTTPs
HTTP:
Hypertext Transfer Protocol.
HTTP transmits the data over port number 80.
No Data Encryption
Google does not give the preference 

HTTPS:
Hypertext Transfer Protocol Secure.
HTTPS transmits the data over port number 443
SSL that provides the encryption of the data.
Google gives preferences to the HTTPS

URL
URN==>  Uniform Resource Name
URI  ==>  Uniform Resource Identifier
URL  ==> Uniform Resource Locator
It is a unique address to identify a person or an organization in the World Wide Web

Example:
https://www.naresit.com
http ==> Hyper Text Transfer Protocol (Common Language between Client & Server)
S ==> SSL ==> Secure Sockets Layer.
:// ==> Delimiters
www ==> Default Domain or Sub Domain
. ==> Period or Embedded Character
nareshit ==> Primary Level Domain (PLD)
com ==> Top Level Domain (TLD)

Web Browser
It is client side light weight software, it takes http request from client to server, It renders(bring) http response from server to client.
1. Google Chrome
2. Mozilla Fire Fox Browser
3. EDGE Browser
4. OPERA Browser
5. APPLE SAFARI Browser
6. Torch
7. Lion

WebPage:
It is e-document developed on HTML. It is classified into the following two types:
1. Static Web Pages
These are written in languages such as: HTML, CSS, JavaScript,etc.

2. Dynamic Web Pages
These are written in languages such as:JSP, CGI, AJAX, ASP, PYTHON, etc.

WebSite
Collection of web pages is called website.

Full Stack
A full stack means combination of client and server technologies.
FullStackDeveloper/Ninja Programmer
Class_htm_1.txt
Displaying Class_htm_1.txt.


----------------------------------------------------------------------------------------------------------------------------------------

Introduction to HTML:
It is the standard markup language used to create web pages. 

Features of HTML..
1.HTML is highly flexible
2.HTML is user friendly
3.HTML is an open technology
4.HTML is consistent and efficient
5. It takes less time to load the web pages

Limitations of HTML:
1. It can create only static and plain pages
2. Need to write lot of code 
3. Security features are not good in HTML.

Versions of HTML
Version 		Year
HTML 		1991
HTML 2.0 		1995
HTML 3.2 		1997
HTML 4.01 	1998
XHTML 		1999
HTML5 		2008-2014 (W3C + WHATWG)
HTML5.1 		2016

HISTORY of HTML :(Web-1.0)
As per W3C standards:
First time, Sir Tim Berners Lee implemented
1989 GML ==> Generalized Markup Language
1991 SGML ==> Standard Generalized Markup Language
1994 HTML ==> Hyper Text Markup Language
1998 ==> XML+HTML=XHTML =>  Extended Hyper Text Markup Language, features are: SMS, MMS, Email, Web-Services, 

After 10 Years(Web2.0)
www.whatwg.org (Mozilla+Apple+Opera)
Web Hypertext Application Technology Working Group
2008 => HTML5 ==> Advanced Hyper Text Markup Language for Better webApps.

After 8 Years
2016 ==> HTML5.1, Advanced Hyper Text Markup Language for all Gadgets and Widgets  (Small E-Devices or Smart Components)

PYTHON+Django+NLP+ML+DL+AI
Web-3.0 ==> Web BOTS (Automation)

Define a Tag:
The text placed between left angular brace " < " and right angular brace " > " is called as TAG.

Syntax:	<------>
Example:	<html>

Tags are classified into two types:
1. Paired Tags:
The tags that have both opening and closing tags are called as paired tags.

Examples:
	<html>-----------------</html>
	<body>-----------------</body>

Note:The closing tag starts with a forward slash("/")

2. Non-Paired Tags:
The tags that have only opening tags but no closing tags are called as Non-paired tags.
Examples:
<br> or <br/>	<hr> or <hr/>    <img> or <img/>

1. Empty Tags 2. Self-Closed Tags 3. Forcefully Closed Tags

Structure of html:
<html>
       <head>
             <title>---------</title>
       </head>
       <body>
            ----------
            ----------
       </body>
</html>

HTML Elements/Tags
An element consists of three basic parts: 
1. Opening tag
2. Element's content
3. Closing tag.

Essential HTML Tags
There are four sets of HTML tags that form the basic structure needed for every HTML file:

1 <html></html>
2 <head></head>
3 <title></title>
4 <body></body>

Definition - <html> </html>
This basically defines the document as web page. All other tags must fall between the html tags.

Header - <head> </head>
The header contains information about the document that will not appear on the actual page, such as the title of the document.

Title - <title> </title>
The title tag defines the title that will appear in the title bar of your web browser. The title must appear between the head tags.

Body - <body> </body>
The body tags contain all the information and other visible content on the page. All your images, links and plain text must go between the <body> and </body> tags.

HTML Tags
HTML tags are element names surrounded by angle brackets:

Syntax:
<tagname>content goes here...</tagname>

NOTE: The start tag is also called the opening tag, and the end tag the closing tag.

HTML editors
There are many software packages available to develop HTML. The software packages can be grouped into two main categories:

1 text-based (or code-based) Editors
2 WYSIWYG (what you see is what you get) Editors

1 text-based (or code-based) Editors
You can create web pages with a basic text editor like Windows Notepad, Unix VI, Linux ViM etc..!!
VI ==> VIsual Editor
ViM ==> Visually Improved Editor

2 WYSIWYG (what you see is what you get) Editors:
There are several popular WYSIWYG editors available:
1 Macromedia Dreamweaver
2 Microsoft FrontPage
3 Adobe Go Live
4 WebStorm
5 PyCharm
6 SublimeText
7 Brackets
8 Edit++, Notepad++
9 ATOM
10 Visual Studio Code

How to Create a WebPage?
Step1: Launch any Text Editor or IDE 
Step2: Write Required HTML source code 
Step3: Save the file with .htm or .html extension
Step4:Right click on the saved file, open with any Web Browser or Double Click on the saved file.

Example:
<html>
<head>
<title>
My First Page
</title>
</head>
<body>
Welcome to HTML World.!!
</body>
</html>

------------------------------------------------------------------------------------------------------------------------------------------------------
Shortcut Keys-In Web Browsers:
The following shorcut keys frequently we are using to complete task quickly..!!
Ctrl+N==> Open a new window 
Ctrl+T==> Open a new tab 
Ctrl+W==> Close the current window/tab 
Ctrl+R or F5 ==>Refresh Web Page
Ctrl+u ==> View Source code
Esc ==> Stop the loading the web page
Alt+<-- Backward History
Alt+--> Forward History
Alt+Home Go to your homepage 
Alt+D  focus to the address bar to type new URL 
To zoom in, increasing the size     Ctrl ++ 
To zoom out, decreasing the size, Ctrl+- 
To reset size back to normal         Ctrl+0 
Bookmark This Page  Ctrl + D  
Complete .com Address  Ctrl + Enter

HTML Comments
The comment tag is used to insert comments in the source code. Comments are not displayed in the browsers.

You can use comments to explain your code, which can help you when you edit the source code at a later date. This is especially useful if you have a lot of code. 

In HTML, a comment begins with <!-- And ends with -->. 

Example of a single line comment:
<!--This is a small comment-->

Example:
<!-----This comment will not appear in the Web Page---->

Example:
<html>
<head>
<title>
Welcome to HTML
</title>
</head>
<body>
<!-- Naresh i Technologies, Leader in IT Training-->
</body>
</html>

Parts in HTML Document:
Generally HTML document has the following 3 parts:
1. Version Information
2. Head Section 
3. Body Section

1. HTML version information
The <!DOCTYPE> declaration must be the very first thing in your HTML doc, before the <html> tag. The <!DOCTYPE> declaration is not an HTML tag; it is an instruction to the web browser about what version of HTML the page is written in.

NOTE:
The <!DOCTYPE> declaration is NOT case sensitive

Example:HTML-4.01
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">

Example:HTML-5.0
<!doctype html>

Head Section:
It contains general information, meta-information and document type information. The <head> Tag inside Elements should not display in body section of a webpage.

Head Section Tags:
1. <title> 
2. <link> 
3. <meta> 
4. <style>  
5. <script> 

<title> Tag:
The <title> tag is required in all HTML documents and it defines the title of the document. It is a paired tag.

Syntax:
<title>........................ </title>

Example:
<!doctype html>
<html>
<head>
<title>
Welcome to Web Page
</title>
</head>

<link> Tag:
It defines a link between a document and an external resource. It is used to link to external style sheets. It is non-paired tag.

Syntax:
<link> or <link/>

Syntax:
<link href="PathOfResource" rel="Relation of Resource" type="Type Of Resource"/>

Attributes
Attribute 		Value 	Description
href 		URL 	Specifies the location of the linked document
rel 		alternate	Provides a link to an alternate version of the document stylesheet Imports a 				style sheet
type		text/type	It is an Optional Attribute

How to Add a Favicon to your Web-Site
Favicons are also called shortcut icons.It is a graphic image associated with a particular Web page and/or Web site.  To add a favicon to your Web site.The format of the image must be one of PNG (a W3C standard), GIF (Graphic Interchange Format) , or ICO. The format for the  image you have chosen must be 16x16 pixels or 32x32 pixels. 

Example:
<!DOCTYPE html>
<html>
<head>
<link rel="html5.png" type="image/ico" href="icon">
</head>
<body>
Welcome to FavIcons..!!
</body>
</html>

Meta Info
Tag 		Description
<head> 		Defines information about the document
<meta> 		Defines metadata about an HTML document

<meta> Tag:
It provides metadata about the HTML document. Metadata will not be displayed on the page, but It will be machine parsable. Meta elements are typically used to specify page:

1. meta keywords
2. meta description
3. meta author
4. meta title
5. meta charset
6. meta viewport

1. meta keywords: Define keywords for search engines:

Syntax:
<meta name="keywords" content="required list of keywords">

Example:
<meta name="keywords"  content="python beginner, beginner python tutorial, python online tutorial, python source code"/>

Example:
<meta name="keywords" lang="en-IN" content="live cricket scores, cricket, india cricket, live cricket news, yahoo cricket, australia cricket, england cricket"/>

2. meta description: Define a description of your web page

Syntax:
<meta name="description" content="required Page Description">

Example:
<meta name="description"  content="A online beginner java tutorial website covering basics of programming along with java source code." />

Example:
<meta name="description"  content="Check out live cricket scores, cricket news headlines, cricket schedules &amp; results and more from Yahoo!"/>

3. meta author: Define the author of a page:

Syntax:
<meta name="author" content="name of the author">

Example:
<meta name="author"  content="kssubbaraj" />

4. meta title: Define the title of the meta content.

Syntax:
<meta name="title" content="required meta title">

Example:
<meta name="title" content="Welcome to NareshIT - Hyderabad. Register Now for New Batches" />

5. meta charset: 
Character encoding tells browsers and validators what set of characters to use when rendering web pages. Unicode Transformation Format-8. It is a universal encoding that will support most of the character like greece, hebrew, japanese, etc

What is Unicode?
Unicode provides a unique number for every character,
no matter what the platform,
no matter what the program,
no matter what the language.

Syntax: HTML 4.0
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

Syntax:HTML5.0
<meta charset="UTF-8" />

Example:
<!doctype html>
<html lang="en-IN">
<head>
<title>
Working With Unicode
</title>
<meta charset="utf-8">
</head>
<body>
Any Language...!!
</body>
</html>

6. meta viewport: HTML5 introduced a method to let web designers take control over the viewport. Setting the viewport to make your website look good on all devices.

Syntax:
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<style> Element
The <style> tag is used to define style information for an HTML document. It is a paired tag.

Syntax:
<style> ........................ </style>

Example:
<head>
<style type="text/css">
body 
{
background-color:yellow;
}
</style>
</head>

The HTML <script> Element
The <script> tag is used to define a client-side script, such as a JavaScript. It is a paired tag.

Syntax:
<script> ........................ </script>
-----------------------------------------------------------------------------------------------------------------------------------------------------
Visual Studio Code for Web Developers, It is a lightweight but powerful source code editor which runs on your desktop and is available for Windows, macOS and Linux. It comes with built-in support for JavaScript, TypeScript and Node.js. 

Features of Visual Studio Code
1. Free to use
2. Open Source(Code can viewed modified & shared)
3. IDE like Features
4. Support by large community of users & Microsoft

Install Visual Studio Code:
https://code.visualstudio.com

3. body Section

<body> Tag:
The body section contains all the contents of an HTML document, such as text, hyperlinks, images, Special Character, lists, tables, frames, forms etc. Mostly all the HTML Tags are use this Section. It's most Powerful section. It is a paired tag.

Syntax:
<body>.......................</body>

Body tag attributes and parameters:
Attributes			Parameters
bgcolor			Color Name/ColorCode
background		image path
text			Color Name/ColorCode

Note: ColorCode Indicates Hexadecimal color number.

HTML Attributes and Parameters:
1. HTML tags can contain one or more attributes.
2. Attributes are always specified in the start tag.
3. Attributes consist on name/value pairs.
4. Attribute values always be enclosed in quotes.
5. Double quotes are the most common use, but single quotes are also allowed.
6. Attributes are special features of a tag.

Parameters:
Parameters are the values, that we assign to an attribute.

Syntax:
	<tag  attribute="parameter">
Example:
	<body  bgcolor="blue">

HTML Colors
W3C Standard 16 Colors:
Here is the list of W3C Standard 16 Colors names and it is recommended to use them.

Black	Gray	Silver	White
Yellow	Lime	Aqua	Fuchsia
Red	Green	Blue	Purple
Maroon	Olive	Navy	Teal

Color Values
HTML colors are defined using a hexadecimal notation (HEX) for the combination of Red, Green, and Blue color values (RGB). The lowest value that can be given to one of the light sources is 0 (in HEX: 00). The highest value is 255 (in HEX: FF). HEX values are specified as 3 pairs of two-digit numbers, starting with a # sign.

HTML Colors - Hex Codes:
A hexadecimal is a 6 digit representation of a color. The first two digits(RR) represent a red value, the next two are a green value(GG), and the last are the blue value(BB).

A hexadecimal value can be taken from any graphics software like Adobe Photoshop, Advanced Paint Brush.

Hexadecimal Value - #FFFFFF RGB Color Code - R=255 G=255 B=255

16 Million Different Colors
The combination of Red, Green, and Blue values from 0 to 255, gives more than 16 million different colors (256 x 256 x 256).

#FF0000-->Red
#00FF00-->Green
#0000FF-->Blue
#000000-->Black
#FFFFFF -->white
#FFFF00 -->Yellow
#FF9900 -->Orange
------------
------------
16 Million Colors..................!!

Example:
<html>
<head>
<title>
Hexa color codes
</title>
</head>
<body bgcolor="#00FFDD" text="FFFF00">
<p>Working with Hexa color codes.</p>
<p>We can make 16 million colors.</p>
</body>
</html>

Entities:
HTML5 SPECIAL CHARACTERS
Character entities can be typed as either a numbered entity or a named entity. All character entities begin with an ampersand (&) and end with a semicolon (;). Although every character entity has a numbered version, not everyone has a named version. While a few are listed in the following table to give you an idea of what they look like.

Char 	Number 	Entity 	Description
© 	&#169; 	&copy; 	COPYRIGHT SIGN
® 	&#174; 	&reg; 	REGISTERED SIGN
€ 	&#8364; 	&euro; 	EURO SIGN
™ 	&#8482; 	&trade; 	TRADEMARK
← 	&#8592; 	&larr; 	LEFTWARDS ARROW
↑ 	&#8593; 	&uarr; 	UPWARDS ARROW
→ 	&#8594; 	&rarr; 	RIGHTWARDS ARROW
↓ 	&#8595; 	&darr; 	DOWNWARDS ARROW
♠ 	&#9824; 	&spades; BLACK SPADE SUIT
♣ 	&#9827; 	&clubs; 	BLACK CLUB SUIT
♥ 	&#9829; 	&hearts; 	BLACK HEART SUIT
♦ 	&#9830; 	&diams; 	BLACK DIAMOND SUIT
∀ 	&#8704; 	&forall; 	FOR ALL
∂ 	&#8706; 	&part; 	PARTIAL DIFFERENTIAL
∃ 	&#8707; 	&exist; 	THERE EXISTS
∅ 	&#8709; 	&empty; 	EMPTY SETS
∇ 	&#8711; 	&nabla; 	NABLA
∈ 	&#8712; 	&isin; 	ELEMENT OF
Α 	&#913; 	&Alpha; 	GREEK CAPITAL LETTER ALPHA
Β 	&#914; 	&Beta; 	GREEK CAPITAL LETTER BETA
Γ 	&#915; 	&Gamma; GREEK CAPITAL LETTER GAMMA

Using Emojis in HTML:
Emojis look like images, or icons, but they are not. They are letters (characters) from the UTF-8 (Unicode) character set.

Emoji Characters
Emojis are also characters from the UFT-8 alphabet:
    😄 is 128516
    😍 is 128525
    💗 is 128151

Some Emoji Symbols in UTF-8
Emoji 	Value
🗻	&#128507;
🗼	&#128508;
🗽	&#128509;
🗾	&#128510;
🗿	&#128511;
😀	&#128512;
😁	&#128513;
😂	&#128514;
😃	&#128515;
😄	&#128516;
😅	&#128517;

Example:
<!doctype html>
<html>
<head>
<title>
Basics of HTML
</title>
</head>
<body>
Welcome to HTML Basics....! &copy; &reg; &trade; <br/>
&#169; &#8364; &larr; &rarr; &spades; &hearts; &diams; <br/>
&#128516;&#128515;&#128514;&#128513;&#128512;&#128511;
&#128510;&#128517;&#128518;
</body>
</html>
-----------------------------------------------------------------------------------------------------------------------------------------------
HTML Tags Ordered by Category
1 Basic HTML
2 Formatting
3 Forms and Input
4 Frames
5 Images
6 Audio / Video
7 Links
8 Lists
9 Tables
10 Styles and Semantics
11 Meta Info
12 Programming

1 Basic HTML:
1 <!DOCTYPE>  	
2 <html> 		
3 <title> 		
4 <body> 		
5 <h1> to <h6> 	
6 <p> 		
7 <br> 		
8 <hr> 		
9 <!--...--> 

Headings in html:
In html, we are having six heading styles. All the headings are paired tags. Each and every heading will have their own predefined styles.

Syntax:
<h1>--------------------------</h1>
<h2>--------------------------</h2>
<h3>--------------------------</h3>
<h4>--------------------------</h4>
<h5>--------------------------</h5>
<h6>--------------------------</h6>

Out of all heading styles, biggest heading style is h1 and smallest is h6.

Attributes		Parameters
align		left, right, center

Example
<html>
<head>
<title>
Headings in HTML..!!
</title>
</head>
<body>
<h1>Welcome to Naresh i Technologies in Header One</h1>
<h2>Welcome to Naresh i Technologies in Header Two</h2>
<h3>Welcome to Naresh i Technologies in Header Three</h3>
<h4>Leader in IT Training in Header Four</h4>
<h5>Welcome to Naresh i Technologies in Header Five</h5>
<h6>Welcome to Naresh i Technologies in Header Six</h6>
</body>
</html>

Paragraph tag:
It is used to divide the text into different paragraphs. It is a paired tag.

Syntax: <p>-------------</p>

Attributes		Parameters
align		left, right, center, justify

Example
<html>
<head>
<title>
Paragraph tag
</title>
</head>
<body>
<p align="center">Welcome to Naresh i Technologies </p>
<p align="left">Welcome to Naresh i Technologies </p>
<p align="right">Welcome to Naresh i Technologies </p>
<p align="justify">Some text...</p>
</body>
</html>

<br> tag
br stands for break. It is used to break a line and shift the following text to a new line. It is a non-paired tag.

Syntax:	
<br>

Example:
<html>
<title>
Welcome to HTML
</title>
<body>
To break<br />lines<br />in a<br />paragraph,<br />use the br element.
</body>
</html>

&nbsp;
It stands for Non-Breaking Space. It is used to add more than one space between the words. It is a special Characters or entity

Syntax: 
&nbsp;

Example:
<!doctype html>
<html>
<title>
Special Character
</title>
<body>
This is example using special &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp codes<br>
a &lt b <br/>
&copy &trade;&amp;&142
</body>
</html>

HR tag: (Horizontal Rule)
hr tag is used to draw a line across the web page. It is non-paired tag.

Syntax: <hr> or <hr/>

Attributes 	Parameters
color		ColorName/HexaColorCode
size		pix
width		% or pix	
align		left, right, center
noshade		noshade

Note:
1. The default width of the horizontal rule is 100%
2. The default alignment of the hr is center.
3. noshade attribute will be applied only when we are not specifying the color of the horizontal rule.

Example
<html>
<title>
hr tag
</title>
<head>
<b><h1 align="center">I am Learning Web Language HTML</b></h1>
</head>
<body>
<p>Naresh i Technologies.</p>
<hr  size="4pix" width=20% align="right" noshade="noshade">
<p>Leader in IT Training.</p>
<hr>
<p>Hyderabad-Ameerpet.</p>
</body>
</html>

Example9
<html>
<Title>
Welcome to Naresh i Technologies
</Title>
<Head>
<b><h1 align="center">I am Learning Web Language HTML</b></h1>
</Head>
<body>
<p>Naresh i Technologies.</p>
<hr  color="pink" size=18pix width=20% align="right">
<p>Leader in IT Training.</p>
<hr size=28pix color="red">
<p>Hyderabad-Ameerpet.</p>
</body>
</html>
---------------------------------------------------------------------------------------------------------------------------------------
HTML Presentational Tags: * are IMP tags (more usage in Web)
1 <acronym> 	2 <address> 	
3 <b> 		4 <big> 		
5 <blockquote> *	6 <center> 		
7 <cite> 		8 <code>*	
9 <del> 		10 <dfn> 		
11 <em> 		12 <font> 		
13 <i> 		14 <ins> 		
15 <kbd>*		16 <pre>*	
17 <q> 		18 <s> 		
19 <samp> 	20 <small> 		
21 <strike> 	22 <strong> 		
23 <sub> 	* 	24 <sup>	*	
25 <tt> 		26 <u> 		
27 <var> 		

HTML <acronym> Tag.
It defines a full form or stands for. An acronym must spell out another word. It is a paired tag.  Not Supported in HTML5.

Syntax:
<acronym>................................... </acronym> 

Example:
<html>
<body>
Hello Welcome to<acronym title="Naresh i Technologies"> NiT </acronym> <br/>
</body>
</html>

<address> Tag:
It tag is used for indicating an address. The address usually renders in italic format. It is a paired tag.

Syntax:
<address>...................</address>

Example:
<!DOCTYPE html>
   <body>
      <address>
         Naresh i Technologies,<br />
         Ameerpet,Hyderabad<br />
         TELANGANA - 50027
      </address>
   </body>

<b> Tag
It is bold tag. It convert the text or characters in to bold format. It is a paired tag.

Syntax:
<b>--------------</b>

<strong>
It is aslo bold tag. It convert the text or characters in to bold format. It is a paired tag.

Syntax:
<strong>---------------</strong>

Example:
<html>
<head>
<title>
MyBoldTag
</title>
</head>
<body>
<b>Welcome to Bold Font formated ..</b>
<br>
<bold>Welcome to Bold Font formated</bold>
</body>
</html>

<big>
It is used to display the big font size text. It is a paired tag.

Syntax:
<big>-----------</big>

Example:
<html>
<head>
<title>
Small&Big
</title>
</head>
<body>
<small>Hello How are u..!</small>
<br/>
<big>Hello How are u..@@</big>
</body>
</html>

<blockquote>
It specifies a section that is quoted from another source. Browsers usually indent <blockquote> elements. It is a paired tag.

Syntax:
<blockquote>-----------</blockquote>

Example:
<!DOCTYPE html>
<html>
<body>
<blockquote>
AngularJS is a structural framework for dynamic web apps. It lets you use HTML as your template language and lets you extend HTML's syntax to express your application's components clearly and succinctly. Angular's data binding and dependency injection eliminate much of the code you would otherwise have to write.
</blockquote>
</body>
</html>

<center>
It is used to display the text at the page center. It is a paired tag.

Syntax:
<center>---------</center>

Example
<html>
<head>
<title>
Center Tag
</title>
</head>
<body>
<center>Text Page Center..!!</center>
</body>
</html>
<html>

HTML <cite> Tag
It is used for representing a citation in an HTML document. It defines the title of a work . It is a paired tag.

Syntax:
<cite> ................... </cite>

Example:
<body>
<img src="html.png" width="200px" height="200px" alt="The Scream"> <br>
<cite>LOGO from W3WorldWideWebCon </cite>
</body>

HTML <code> Tag
It is a phrase tag.It defines a piece of computer code. It is a paired tag.

Syntax:
<code>..................</code>

Example:
<body>
<code>A piece of computer code</code>
</body>

<del>		
We can able to display striking through text on the web Page. It is indicated removed or deprecated text from the Web Page. It is a paired tag.

Syntax:
<del>-------------</del>

Example:
<html>
<head>
<title>
Strike Effects
</title>
</head>
<body>
<s>It is Removed Text from the Page..</s><br>
<strike>It is Removed Text from the Page.. </strike><br>
<del>It is Removed Text from the Page..</del>
</body>
</html>

HTML <dfn> Tag
It represents the defining instance of a term in HTML. It is a paired tag.

Syntax:
<dfn> ...........................<dfn>

Example:
<html>
<body>
<dfn>HTML</dfn> is the standard markup language for creating web pages. <br>
<dfn title="HyperText Markup Language">HTML</dfn> is the standard markup language for creating web pages
</body>
</html>

<em>
It is also used to display italics font on the web page. it a paired tag. It is emphasis (Italics)

Syntax:
<em>-----------</em>

Example:
<html>
<head>
<title>
Italics or Emphasis
</title>
</head>
<body>
<i>Welcome to Italics Formated Text...</i> <br>
<em>Welcome to Italics Formated Text...</em> 
</body>
</html>

<i>
It is used to display italics font on the web page. it a paired tag.

Syntax:
<i>---------------</i>

HTML <ins> Tag
It defines a text that has been inserted into a document. It represents a range of text that has been added to a document. It is a paired tag.

Syntax:
<ins> .................... </ins>

Example:
<html>
<body>
My favorite color is <ins>red</ins>!
</body>
</html>

Font tag:
Font tag is used to format the text such as changing the text size, color and style. Using this tag, we can apply styles to a character, word, sentence, etc. It is a paired tag.

Syntax:
<font>-------------</font>

Attributes		Parameters
color			any color name or hexadecimal number
size			1 to 7
face			arial, tahoma, etc.,

Note:
1. The default size of the text in the web page is 3.
2. The default face of the text in the web page is Times New Roman.
3. The default color of the text is black  in the web page.

Example
<html>
<title>
Font tag
</title>
<head>
<center><b>I am Learning Web Language</center></b>
</head>
<body>
<p><font size="3" color="red">Welcome to Naresh i Technologies in RED color!</font></p>
<p><font size="2" color="blue">Welcome to Naresh i Technologies in BLUE color!</font></p>
<p><font face="verdana" color="green">Welcome to Naresh i Technologies in GREEN color!</font></p>
<p><font size=7 color="pink">Leader in IT Training</font></p>
</body>
</html>

--------------------------------------------------------------------------------------------------------------------------------------
HTML <kbd> Tag
It defines keyboard input.It is a paired tag.

Syntax:
<kbd> .................. </kbd>

Example:
<body>
<p>Type the following in the Run dialog:
<kbd>cmd</kbd><br />Then click the OK button.</p>
<p>Save the document by pressing
<kbd>Ctrl</kbd> + <kbd>S</kbd></p>
</body>

Pre tag: 
Pre stands for pre-formatted text. If we specify the text in pre tag, the browser will consider the line breaks (Return / Enter keys) and spaces specified in the text editor (notepad). Pre is a paired tag.

Syntax:	<pre>---------------</pre>

Example:
<html>
<head>
<title>
Pre formated Tag
</title>
</head>
<body>
<pre>
Text in a pre element is displayed
in a fixed-width font, 
and it preserves both      spaces and
line breaks
</pre>
<p>The pre element is often used to display computer code:</p>
</body>
</html>

<q>:
It is used to display the double quoted text. It is a paired tag.

Synax:
<q>-------------</q>

Example:
<html>
<head>
<title>
Double Quotes
</title>
</head>
<body>
<q>Normal text in Double Quotes..!!</q>
</body>
</html>

Striking effect:
<s> Tag:
We can able to display striking through text on the web Page. It is indicated removed or deprecated text from the Web Page. It is a paired tag.

Syntax:
<s>----------------</s>

<strike> Tag:
We can able to display striking through text on the web Page. It is indicated removed or deprecated text from the Web Page. It is a paired tag.

Syntax:
<strike>----------------</strike>

<sup>
It is used to display superscript text. Super Indicates power to the number or string. It is a paired tag.

Syntax:
<sup>------------</sup>

<sub>
It is used to display subscript text. It indicates base to the number or string. It is a paired tag.

Syntax:
<sub>-------------</sub>

Example:
<html>
<head>
<title>
Super&Sub
</title>
</head>
<body>
It is the Power of (100) <sup>3</sup><br/>
It is the Base of  (100) <sub>10</sub>
</body>
</html>

<small> Tag:
It is used to display the small font size text. It is a paired tag.

Syntax:
<small>----------</small>

<tt>
It is stands for teletype. It is used to display tele type formated text like dot matrix printer. It is a paired tag.

Syntax:
<tt>----------</tt>

Example:
<html>
<head>
<title>
TeleTyped
</title>
</head>
<body>
<tt>Text looks line Tele formated...!!</tt>
<br>
Normal text Normal text Normal text ...@@
</body>
</html>

HTML <samp> Tag
It is a phrase tag. It defines sample output from a computer program. It is a paired tag.

Syntax:
<samp>..............................</samp>

Example:
<html>
<body>
<samp>Sample output from a computer program</samp>
</body>
</html>

<u> Tag:
It is used to display underlined text on the web page. It is a paired tag.

Syntax:
<u>......................</u>

Example:
<html>
<head>
<title>
Underline Tag
</title>
</head>
<body>
<u>Hello The Text is UnderLined..</u>
</body>
</html>

HTML <var> Tag
The <var> tag is a phrase tag. It defines a variable. It is a paired tag.

Syntax:
<var> .................... </var>

Example:
<html>
<body>
<var>Variable</var>
</body>
</html>
-------------------------------------------------------------------------------------------------------------------------------------------------------------
What is a Web Form?
It is an HTML form on a web page that lets visitors enter their information. It has the following alias names:
1. Webforms
2. htmlforms
3. Input forms
4. Select forms
etc..............!!

Uses of Web Forms
Forms can resemble paper or database forms because web users fill out the forms using checkboxes, radio buttons, or text fields. 

The <form> Element
It defines a form that is used to collect user input. It represents a document section that contains interactive controls to submit information to a web server. It is a paired tag.

Syntax:
<form> .................................</form>

Form Attributes:
Attributes		Parameters
name			any name
method			To specify the type of method what we are using to submit form  values. The 			possible methods are get and post.
action			we can specify the page name to which page you want to submit control 				values 
target 			Specify the target window or frame where the result of the script will be 				displayed. It takes values like _blank, _self, _parent etc.
enctype			You can use the enctype attribute to specify how the browser encodes the 				data before it sends it to the server. 

Possible values are:
application/x-www-form-urlencoded - This is the standard method most forms use in simple scenarios.
mutlipart/form-data - This is used when you want to upload binary data in the form of files like image, word file etc.

HTML Form Tags
Tag 		Description
<form> 		Defines an HTML form for user input
<input> 		Defines an input control
<textarea> 	Defines a multiline input control(text area)
<button> 		Defines a clickable button
<select> 		Defines a drop-down list
<optgroup> 	Defines a group of related options in a drop-down list
<option> 		Defines an option in a drop-down list
<label> 		Defines a label for an <input> element
<fieldset> 	Groups related elements in a form
<legend> 		Defines a caption for a <fieldset> element

==================================================
Fieldname	Keyword		Syntax
==================================================
text box		text		<input type="text">
password box	password		<input type="password">
checkbox		checkbox		<input type="checkbox">
radio button	radio		<input type="radio">
submit button	submit		<input type="submit">
reset button	reset		<input type="reset">
text area		textarea		<textarea></textarea>
==================================================

Input Fields Attributes and  Parameters
Attributes	Parameters
name		any name
value		any value
placeholder	Any Value (HTML5)
size		pixels
maxlength	number
readonly		true, false
disabled		disabled
rows		number
cols		number
checked		checked
multiple		true, false

Example:
<body>
<form>
First name: <input type="text" name="FirstName" value="SubbaRaju" /><br />
Last name: <input type="text" name="LastName" value="nareshit" /><br />
Password: <input type="password" name="password"  value="ramarama"/><br/>
CheckBox: <input type="checkbox" name="checkbox"  value="check"/><br/>
RadioButton: <input type="radio" name="Radio"  value="Male"/><br/>
Reset: <input type="reset" name="Reset"  value="ClickMe"/><br/>
TextArea: <input type="textarea" name="TextArea"  value="Ramarama"/><br/>
<input type="submit" value="Submit" />
</form>
</body>

<textarea> Tag Attributes
It is multiline text box for more information...!!
Attributes    Value	     Description
cols	  "Number"    Define the Specify number of character visible in one line of Text Area
rows	  "Number"   Define the Specify number of lines visible in  text area.
name	  "Message"  Specify unique name for the input element.

Example4
<html>
<title>
Welcome to Forms Programming
</title>
<head>
<center><h1>Naresh i Technologies</h1></center>
</head>
<body>
<textarea rows=6 cols=20>
Naresh i technologies offering all software courses like QA Unix HTML Oracel Sqlserver Java .NET Sharepoint Testing Tools Android..
</textarea>

HTML <select> Tag
It is used to create a drop-down list. The <option> tags inside the <select> element define the available options in the list.  It is a paired tag.

Syntax:
<select>.......................</select>

Attributes
Attribute 	Value 	Description
disabled 	disabled 	Specifies that a drop-down list should be disabled
multiple 	multiple 	Specifies that multiple options can be selected at once
name 	name 	Defines a name for the drop-down list
size	number 	Defines the number of visible options in a drop-down list

HTML <optgroup> Tag
It is used to group related options in a drop-down list. If you have a long list of options, groups of related options are easier to handle for a user. It is a paired tag.

Syntax:
<optgroup>.................................</optgroup> 

Attributes
Attribute 	Value 	Description
disabled 	disabled 	Specifies that an option-group should be disabled
label 	text 	Specifies a label for an option-group

HTML <option> Tag
It defines an option in a select list.  It is a paired tag.

Syntax
<option>....................................</option> 

Attributes
Attribute 	Value 	Description
disabled 	disabled 	Specifies that an option should be disabled
label 	text 	Specifies a shorter label for an option
selected 	selected 	Specifies that an option should be pre-selected when the page loads
value 	text 	Specifies the value to be sent to a server

Example:
<html>
<body>
<select>
<optgroup label="Swedish Cars">
<option value="volvo">Volvo</option>
<option value="saab">Saab</option>
</optgroup>
</select>
 </body>
</html>

Example:
<html>
<body>
<select>
<optgroup label="Swedish Cars">
<option value="volvo">Volvo</option>
<option value="saab">Saab</option>
</optgroup>
<optgroup label="Select Your Hobby">
<option value="cricket">Cricket</option>
<option value="WatchTV">Watch Tv </option>
<option value="PlayGame">Play Game</option>
<option value="Reading">Reading</option>
<option value="Int">Internet Surfing</option>
</optgroup>
</select>
</form >
</body>
</html>

List Box:
HTML <select> multiple Attribute
The multiple attribute is a boolean attribute. It specifies that multiple options can be selected at once.

Syntax
<select multiple> 

Example:
<html>
<body>
<form>
<select name="cars" multiple>
<option value="volvo">Volvo</option>
<option value="saab">Saab</option>
<option value="opel">Opel</option>
<option value="audi">Audi</option>
</select>
<input type="submit"  value="NextPage">
</form>
</body>
</html>

HTML <select> size Attribute
The size attribute specifies the number of visible options in a drop-down list.

Syntax
<select size="number">

Attribute Values
Value 	Description
number 	The number of visible options in the drop-down list. Default value is 1. If the multiple attribute is present, the default value is 4

Example:
<html>
<body>
<select size="3">
<option value="volvo">Volvo</option>
<option value="saab">Saab</option>
<option value="opel">Opel</option>
<option value="audi">Audi</option>
</select>
</body>
</html>
------------------------------------------------------------------------------------------------------------------------------------------------
HTML <select> Tag
It is used to create a drop-down list. The <option> tags inside the <select> element define the available options in the list.  It is a paired tag.

Syntax:
<select>.......................</select>

Attributes
Attribute 	Value 	Description
disabled 	disabled 	Specifies that a drop-down list should be disabled
multiple 	multiple 	Specifies that multiple options can be selected at once
name 	name 	Defines a name for the drop-down list
size	number 	Defines the number of visible options in a drop-down list

HTML <optgroup> Tag
It is used to group related options in a drop-down list. If you have a long list of options, groups of related options are easier to handle for a user. It is a paired tag.

Syntax:
<optgroup>.................................</optgroup> 

Attributes
Attribute 	Value 	Description
disabled 	disabled 	Specifies that an option-group should be disabled
label 	text 	Specifies a label for an option-group

HTML <option> Tag
It defines an option in a select list.  It is a paired tag.

Syntax
<option>....................................</option> 

Attributes
Attribute 	Value 	Description
disabled 	disabled 	Specifies that an option should be disabled
label 	text 	Specifies a shorter label for an option
selected 	selected 	Specifies that an option should be pre-selected when the page loads
value 	text 	Specifies the value to be sent to a server

Example:
<html>
<body>
<select>
<optgroup label="Swedish Cars">
<option value="volvo">Volvo</option>
<option value="saab">Saab</option>
</optgroup>
</select>
 </body>
</html>

Example:
<html>
<body>
<select>
<optgroup label="Swedish Cars">
<option value="volvo">Volvo</option>
<option value="saab">Saab</option>
</optgroup>
<optgroup label="Select Your Hobby">
<option value="cricket">Cricket</option>
<option value="WatchTV">Watch Tv </option>
<option value="PlayGame">Play Game</option>
<option value="Reading">Reading</option>
<option value="Int">Internet Surfing</option>
</optgroup>
</select>
</form >
</body>
</html>

List Box:
HTML <select> multiple Attribute
The multiple attribute is a boolean attribute. It specifies that multiple options can be selected at once.

Syntax
<select multiple> 

Example:
<html>
<body>
<form>
<select name="cars" multiple>
<option value="volvo">Volvo</option>
<option value="saab">Saab</option>
<option value="opel">Opel</option>
<option value="audi">Audi</option>
</select>
<input type="submit"  value="NextPage">
</form>
</body>
</html>

HTML <select> size Attribute
The size attribute specifies the number of visible options in a drop-down list.

Syntax
<select size="number">

Attribute Values
Value 	Description
number 	The number of visible options in the drop-down list. Default value is 1. If the multiple attribute is present, the default value is 4

Example:
<html>
<body>
<select size="3">
<option value="volvo">Volvo</option>
<option value="saab">Saab</option>
<option value="opel">Opel</option>
<option value="audi">Audi</option>
</select>
</body>
</html>

Radio Button Control
Radio buttons are used when out of many options, just one option is required to be selected. They are also created using HTML <input> tag but type attribute is set to radio.

Syntax:
<input type='radio'/>

Example5
<form>
<label>What is your favourites Web browser..!</label>
<input type="radio" name="browser" /> Internet Explorer 
<input type="radio" name="browser"  /> Google Chrome
<input type="radio" name="browser" /> Mozilla Firefox
</form>

Checkbox Control
Checkboxes are used when more than one option is required to be selected. They are also created using HTML <input> tag but type attribute is set to checkbox..

Syntax:
<input type='checkbox'/>

Example:
<form>
<label>Select your hobby...!!</label>
<input type="checkbox" name="cricket" /> Cricket 
<input type="checkbox" name="watchtv" /> Watch TV 
<input type="checkbox" name="playgame"  /> Play Game
<input type="checkbox" name="inserf"  /> Internet Browsing 
</form>

Button Controls
There are various ways in HTML to create clickable buttons.
Type	Description
submit	This creates a button that automatically submits a form.
reset	This creates a button that automatically resets form controls to their initial values.
button	This creates a button that is used to trigger a client-side script when the user clicks 	that 	button.

Example:
<!doctype html>
<body>
<form action="https://www.nareshit.com" name='myform' id="form1" >
<label>User Name:</label><br/>
<input type='text' name='uname' required="requried" /><br/>
<label>Password:</label><br/>
<input type='password' name='pwd' required="requried" /><br/>
<input type='submit' name='sn' value="SignIn"/>
<input type='reset' name='can' value="Cancel"/>
<button onclick="alert('UserClickedMe')"> Click_Me </button>
</form>
</body>

Example:
<!doctype html>
<body>
<form action="nit1.html" name="myform" id="form1">
<label>User Name: </label> <br/>
<input type="text" name="uname"> <br/>
<label>Password: </label> <br/>
<input type="password" name="pwd"> <br/>
<input type="submit" name="sn">
<input type="reset" name="clr">
<button onclick="alert('Hello')">Click</button>
<input type='image' src="html5.png" width="10px" height="10px"/>
</form>
</body>

<fieldset>
It defines a group of form elements as being logically related. The browser draws a box around the set of fields to indicate that they are related. It is a paired tag.

Syntax: 
<fieldset>...................</fieldset>

Example:
<fieldset>
favorite area: <input name="favegame"><br>
<input type=checkbox name="cricket"> like cricket<br>
<input type=checkbox name="chess"> like chess<br>
<input type=checkbox name="java"> like software<br>
</fieldset><p>

<legend> 
It is used with <fieldset> to give a title to each set of fields. It is a paired tag.

Syntax: 
<legend>.............</legend>

Attributes 	 Parameters
align 		right, center, left

Example:
<FIELDSET>
<LEGEND>Personal Stuff</LEGEND><P>
name: <INPUT NAME="realname"><BR>
email: <INPUT NAME="email">
</FIELDSET>

Forms and Table:
<html>
<head>
<title>
Working with table
</title>
</head>
<table bgcolor="lightblue" height="10%" width="250">
<tr><td>User Name:</td><td><Input placeholder="Name"></td></tr>
<tr><td>Password:</td><td><Input type="password" placeholder="password"></td></tr
<tr><td>&nbsp</td><td><Input type="button" value=Login ></td></tr>
</table>

Introduction HTTP:
It is designed to enable communications between clients and servers.HTTP works as a request-response protocol between a client and server. A web browser may be the client, and an application on a computer that hosts a web site may be the server.

Block Diagram of HTTP:

HTTP Request Methods:
Two commonly used methods for a request-response between a client and server are: 
1 GET 
2 POST
    
Action Attribute:
This attribute is used to specify the URL of the server page to which we want to send our form data.

Syntax:
<form name="myform" action="user.aspx">

i. get:-
In this method, we dont have security for our data and only limited data can be sent to the server page. This is the default method of the form. It can carry raw data from client to server
(rawdata ==> the data which is understandable to user)

Syntax:
<form  action="page.py" method="get">

When to use GET?
Information sent from a form with the GET method is visible to everyone (all variable names and values are displayed in the URL). GET also has limits on the amount of information to send. The limitation is about 2048 characters. However, because the variables are displayed in the URL, it is possible to bookmark the page. This can be useful in some cases. GET may be used for sending non-sensitive data.

Note: GET should NEVER be used for sending passwords or other sensitive information!

Example:1
<body>
<form action="nit.html" method="get" name='myform'>
<label>User Name:</label> <br/>
<input type='text' name="user"><br/>
<label>Password:</label> <br/>
<input type="password" name="pass"><br/>
<input type="Submit" value="Sign-In">
<input type="reset" value="Cancel">
</form>
</body>

Some other notes on GET requests:
1 GET requests can be cached
2 GET requests remain in the browser history
3 GET requests can be bookmarked
4 GET requests should never be used when dealing with sensitive data
5 GET requests have length restrictions

The POST Method
In this method, we have security for our data and we can send bulk of data to the server. It can carry encrypted data from client to server page. (Encrypted means machine understandable format).

Syntax:
<form  method="post">

When to use POST?
Information sent from a form with the POST method is invisible to others (all names/values are embedded within the body of the HTTP request) and has no limits on the amount of information to send. Moreover POST supports advanced functionality such as support for multi-part binary input while uploading files to server.

Example:
<body>
<form action="nit.html" method="post" name='myform'>
<label>User Name:</label> <br/>
<input type='text' name="user"><br/>
<label>Password:</label> <br/>
<input type="password" name="pass"><br/>
<input type="Submit" value="Sign-In">
<input type="reset" value="Cancel">
</form>
</body>

1 POST requests are never cached
2 POST requests do not remain in the browser history
3 POST requests cannot be bookmarked
4 POST requests have no restrictions on data length

Difference between GETand POST:
GET				POST
Data is visible on URL address		Not visible post information
Unsecured		   	highly secured
Excellent Peformance	   	Good Performance
Transfer limited amount of data    	TransferHugeAmountOfData
Unable to Upload file	    	We can Upload files
Can be cached			Not cached

HTTP Status Messages
1xx: Information
Message:		Description:
100 Continue	 The server has received the request headers, and the client 					should   proceed to send the request body.
101 		Switching Protocols The requester has asked the server to switch 					protocols.

2xx: Successful
Message:			Description:
200 OK			The request is OK (this is the standard response for successful (HTTP 					requests)
201 Created		The request has been fulfilled, and a new resource is created. 
202 Accepted		The request has been accepted for processing, but the 						processing has not been completed

3xx: Redirection
Message:			Description:
300 Multiple Choices	A link list. The user can select a link  and go to that location. 
301 Moved Permanently 	The requested page has moved to a newURL 
302 Found		The requested page has moved temporarily to a new URL 
303 See Other		The requested page can be found under a different URL

4xx: Client Error
Message:			Description:
400 Bad Request		The request cannot be fulfilled due to bad syntax
401 Unauthorized		The request was a legal request,but the server is refusing to 						respond to it.
404 Not Found		The requested page could not be found but may be available 						again in the future.

5xx: Server Error
Message:			Description:
500 Internal Server Error	A generic error message, given when no more specific message 					is suitable.
502 Bad Gateway		The server was acting as a gateway or proxy and received an 					invalid response from the upstream server
503 Service Unavailable	The server is currently unavailable (overloaded or down)


1xx ==>199 ==> Information Related Messages
2xx==>299 ==> Successful Messages
3xx==>399 ==> Redirection Messages
4xx==>499 ==> Client Side Messages
5xx==>599 ==>Server Side Messages
----------------------------------------------------------------------------------------------------------------------------------------------------------
Frames
Frames can be used to embed multiple HTML files in a single Page or Window. Frames are developed by Netscape. In HTML the following list of frame tags existed..!!

Tag 		Description
<frame>		Deprecated
<frameset>	Deprecated
<noframes> 	Deprecated
<iframe>html5	Defines an inline frame

<frameset>
Using this tag we can divided the web page as multiple frames. In each frame we can display another web site. Frameset tag is a paired tag. 

Syntax: 
<frameset>--------------</frameset>

Attributes		Parameters
rows		pix, %
cols		pix, %
border		pix
bordercolor	any color name/HexaDecimalCode

<frame> 
This tag is used to called external webpages. It contains src property to specify the path of external web page. Using frames we can place and view multiple files in a single window. Each and every frame will have its own scrollbars.It is a non-paired tag.

Syntax: <frame>

Attributes	Parameters
src		File path, External Res. 
name		any name
scrolling		yes, no,default

Example
<frameset rows= "50%, 50%">
<frame src="http://www.myweb.com">
<frame src="http://www.etours.com">
</frameset>

Advantages:
1. Frames are useful in a site whose contents are expected to change frequently.
2. Frames can give a targeted area of your site a functional coherence.
3. Frames can be used as a shortcut for scrolling within a single page

Example:
<frameset rows= "50%, 50%" cols="40%,*">
<frame src="http://www.google.co.in">
<frame src="http://www.gmail.com">
<frame src="http://www.nareshit.com">
<frame src="http://www.nareshit.in">
</frameset>

Note: ***We dont have body part in the frames.

YES - Turns the scroll bar on.
NO - Turns the scroll bar off.
AUTO - Web page detect if needed.

Example:
<FRAMESET ROWS="50%,50%">
<FRAME SRC="http://www.nareshit.com" SCROLLING="YES">
<FRAME SRC="http://www.india.com" SCROLLING="NO">
</FRAMESET> 

Frame Errors
The majority of browsers commonly support frames. there are some old browser versions that do not. In these cases, you are able to specify an error message if for some reason the frame fails to load. 

To specify any message if the frame fails to load, insert the tag <noframes>. The BODY tags should be placed between the two tags, and within the body tags, should be the HTML that will replace the frames. 

Syntax: <noframes>------------</noframes>

Example:
<FRAMESET ROWS="50%,50%">
<FRAME SRC="http://www.licindia.com">
<FRAME SRC="http://www.yatra.com">
</FRAMESET>
</HEAD>
<NOFRAMES> <BODY>
Sorry, your browser does not support frames.
</BODY> 
</NOFRAMES>

Frame Border
The frame border is  separates different frames on a web page. You are able to modify the appearance of the border.

Border Width
To change the width of the borders on your page, insert the line BORDER="#".

Syntax:   <FRAMESET  BORDER="#">

Example:
<FRAMESET ROWS="50%,50%" border=20>
<FRAME SRC="http://www.nareshit.com">
<FRAME SRC="http://www.india.com">
</FRAMESET>

Dis-advantages:
1. Frames are Not "Search Engine Friendly"
2. Frames are Not "URL Friendly"
3. Frames are Not as Accessible
4. Bookmarks
5. Accessibility
6. Design
7. Linking Issues
8. The user's back button often doesn't work.
9. Frames often reduce the amount of usable space on the page.
10. The URL in the address bar always stays the same
11. Frames create problems with printing.
12. Some browsers do not support frames properly at all.

------------------------------------------------------------------------------------------------------------------------------------------------------
Example:
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>HTML forms</title>
</head>
<body>
  <iframe src="html5.png" scrolling="no" align="right" 
  width="200px" height="200px" name="frame" frameborder="0">
    <p>OOPs Ur browser iframe not supporting.....................!!</p>
  </iframe>
</body>
</html>

Example:
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>HTML forms</title>
</head>
<body>
  <img src="smiley.png" width=100px height=200px border=2px align='left'/>
  <img src="butterfly.gif" width=100px height=200px border=1px align='right'/>
  <img src="https://www.google.co.in/images/branding/googlelogo/1x/googlelogo_white_background_color_272x92dp.png" width=250px height=200px border=4px align='right'/>
</body>
</html>

Example:
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>HTML forms</title>
</head>
<body>
  <img src="html5.png" width=100px height=200px alt="SorryNoImageExisted"
vspace=50px hspace=100px/>
</body>
</html>

Example:
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>HTML forms</title>
</head>
<body>
  <p>HTML5 Logo
    <img src="html5.png" alt="SorryNoIage" align="top" width="100px" height="100px" />
    From W3C and WHATWG".</p>

  <p>HTML5 Logo
      <img src="html5.png" alt="SorryNoIage" align="middle" width="100px" height="100px" />
      From W3C and WHATWG".</p>

  <p>HTML5 Logo
        <img src="html5.png" alt="SorryNoIage" align="bottom" width="100px" height="100px" />
        From W3C and WHATWG".</p>
</body>
</html>

Example:
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>HTML forms</title>
</head>
<body>
  <p>HTML5 Logo
    <img src="nit.jpg" alt="SorryNoIage" align="top" width="100px" height="100px" />
    From W3C and WHATWG".</p>

  <p>HTML5 Logo
      <img src="nit.jpg" alt="SorryNoIage" align="middle" width="100px" height="100px" />
      From W3C and WHATWG".</p>

  <p>HTML5 Logo
        <img src="nit.jpg" alt="SorryNoIage" align="bottom" width="100px" height="100px" />
        From W3C and WHATWG".</p>
</body>
</html>

---------------------------------------------------------------------------------------------------------------------------------------------
HTML5 <iframe> Tag:
iframes defines an inline frame. It enables you present another HTML document within the same window. Typically the iframe takes up a small portion of the document. Inline frames are often used in audio, video & advertising. It is a paired tag.

Syntax: 
<iframe>-------------</iframe>

Attributes	Parameters
src		The path of url/image
scrolling		auto, yes, no
align		left,right,top,middle,bottom
height		pix or %
width		pix or %
name		name 
frameborder	1,0

Example:
<html>
<body>
<iframe src="http://www.nareshit.com">
  <p>Your browser does not support iframes.</p>
</iframe>
</body>
</html>

Example:
<!doctype html>
<body>
<iframe src='devstories.webm' scrolling='no' align="right" width="100px" height="100px" name='html5logo'  frameborder='0'>
<p>OOPs Your Browser not supporting iframe tag..</p>
</iframe>
</body>
---------------------------------------------------------------------------------------------------------------------
HTML <img> tag:
It is used to insert images in the web page. It is a non-paired tag or an empty tag.

Syntax:	<img> or <img/>

Attribute 	Value 	Description
align 	top
	bottom
	middle
	left
	right 	Specifies the alignment of an image according to surrounding elements
alt 	text 	Specifies an alternate text for an image
border 	pixels 	Specifies the width of the border around an image
height 	pixels 	Specifies the height of an image
src 	URL 	Specifies the URL of an image
width 	pixels 	Specifies the width of an image
vspace 	pixels 	Specifies the whitespace on top and bottom of an image
hspace 	pixels 	Specifies the whitespace on left and right side of an image

		
Note:
1. In the image tag, the left and right alignments applied to the image.
2. The top, middle and bottom alignments applied to the text along with the image.

Example:
<html>
<Title>
Welcome to Naresh i Technologies
</Title>
<Head>
<b><h1 align="center">I am Learning Web Language HTML</b></h1>
</Head>
<body>
<img src="firefox35.png" width=250 height=250 alt="SubbaRaju" vspace="60%" hspace="60%" border=20pix>
</body>
</html>

Example
<html>
<Title>
Welcome to Naresh i Technologies
</Title>
<Head>
<b><h1 align="center">I am Learning Web Language HTML</b></h1>
</Head>
<body>
<p>Insert an image from another folder:</p>
<img src="/Images/Opera.png" alt="Sunset" width="24" height="39" />
<p>Insert an image from a web site:</p>
<img src="http://st1.india.com/uploaded_images/colleges/widget_35445_4_288X162.jpg" alt="Certified" width="100" height="100" />
</body>
</html>

Example:
<html>
<Title>
Welcome to Naresh i Technologies
</Title>
<Head>
<b><h1 align="center">I am Learning Web Language HTML</b></h1>
</Head>
<body>
<p>An image 
<img src="chrome.png" alt="GoogleChrome" align="bottom" width="64" height="64" />
with align="bottom".</p>

<p>An image
<img src="chrome.png" alt="GoogleChrome" align="middle" width="64" height="64" /> 
with align="middle".</p>

<p>An image 
<img src="chrome.png" alt="GoogleChrome" align="top" width="64" height="64" />
with align="top".</p>

<p><b>NOTE:</b> align="bottom" is default!</p>
<p><img src="chrome.png" alt="GoogleChrome" width="64" height="64" />
An image before the text.</p>
<p>An image after the text. 
<img src="chrome.png" alt="GoogleChrome" width="64" height="64" /></p>
</body>
</html>

----------------------------------------------------------------------------------------------------------------------------------

HTML Anchor Tag
<a> Tag:
It defines a hyperlink, which is used to link resources from one page to another. Links are used to navigate easily from webpage to webpage or webpage to website, etc., It is a paired tag.

Syntax:	<a>--------------</a>

In html, links are classified into two types:
	1.) Internal links
	2.) External links

Internal Links:
Linking within the page or within the website is called as internal linking.

External Links:
Linking to external files (other documents, sites, webpages, etc.,) is called as external linking.To create links, we use anchor tag. It is a paired tag.

Attributes
Attribute 		Value 		Description
href 		URL 		Specifies the URL of the page the link goes to
name 		section_name 	Specifies the name of an anchor
title		Any Value	It describes the link and shows description when 						hovering over the link.
target 		_blank (NewTab.NewPage)
		_parent (defalt)

NOTE: download attribute I will show with Java Script...!!

Text Links
A text link allows the programmer to create text that acts as a link, so that when it is clicked on by a user, it will transfer them to another web page. 

Example
<html>
<Title>
Welcome to Naresh i Technologies
</Title>
<Head>
<body>
<a href="http://www.nareshit.com">Goto NiT Application</a>
</body>
</html>

Target Page
The target page feature, allows a link to be created that when clicked on, will open a new browser window, so that the user will then have two windows in front of them, one, being the page with the link, and the other, the page the link went to. 

Example
<html>
<Title>
Welcome to Naresh i Technologies
</Title>
<Head>
<body>
<a href="http://www.nareshit.com" target="_blank">goto NiT App</a>
</body>
</html>

Picture Links
A picture link allows the programmer to create a picture that acts as a link, so that when it is clicked on by a user, it will transfer them to another web page. 

Picture Link
This tag allows you to make pictures into links. The tag looks like <A HREF="url">. The starting tag is <A HREF="url"> and the closing tag is </A>. Between these two tags is where you put the picture tag.

Example:
	<html>
	<body>
	<A HREF="http://www.nareshit.com">
	<IMG SRC="nitlogo.png">
	</A>
	</body>
	</html>

HTML Mailto Link:
Link can also be used to link in the E-Mail address. href attributes value is set with mailto followed by E-Mail address. When click on E-Mail link, it will open E-Mail application. E-Mail link is used to inform where to send E-Mail, Subject of E-Mail and Text Message.

Example:
<!doctype html>
<body>
<h1>POP Mail Link..</h1>
<a href="mailto:ksrajupy@gmail.com">ClickMail</a>
<h6>Thank You</h6>
</body>

-----------------------------------------------------------------------------------------------------------------------------------------------------------
Lists in html:
In html, we are having three types of lists.
	1. Ordered list
	2. Unordered list
	3. Definition list

Ordered list:
It is also called as numbered list. It is used to give numbering to the list items. It is a paired tag.

Syntax:	<ol>--------------</ol>

To specify the list items we use li tag. It is also a paired tag.

Syntax:	<li>--------------</li>

Attibutes		Parameters
type		i, I, a, A, 1
start		any number

Example1:
<html>
<title>
Welcome to NiT
</title>
<head>
Working with LISTS
</head>
<body>
<h4>An Ordered List:</h4>
<ol>
  <li>Coffee</li>
  <li>Tea</li>
  <li>Milk</li>
</ol>
</body>
</html>

Example:2
<html>
<title>
Welcome to NiT
</title>
<head>
<center><h1>Working with LISTS and Course Names</h1></center>
</head>
<body>
<h4>Numbered list: with courses</h4>
<ol>
 <li>Java</li>
 <li>ORACLE</li>
 <li>QA</li>
 <li>UNIX</li>
</ol>  

<h4>Letters list:</h4>
<ol type="A">
 <li>.NET</li>
 <li>COREJAVA</li>
 <li>J2EE</li>
 <li>HTML</li>
</ol>  

<h4>Lowercase letters list:</h4>
<ol type="a">
 <li>Android</li>
 <li>iPhone</li>
 <li>Selenium</li>
 <li>TestingTools</li>
</ol>  

<h4>Roman numbers list:</h4>
<ol type="I">
 <li>SqlServer</li>
 <li>MySql</li>
 <li>SEQUEL</li>
 <li>TSQL</li>
 <li>PL/SQL</li>
</ol>  

<h4>Lowercase Roman numbers list:</h4>
<ol type="i">
<li>SqlServer</li>
 <li>MySql</li>
 <li>SEQUEL</li>
 <li>TSQL</li>
 <li>PL/SQL</li>
</ol>  
</body>
</html>

Unordered list:
It is also called as bulleted list. It is used to give bullets to the list items. It is a paired tag.

Syntax:	<ul>-------------</ul>

To specify the list items we use li tag. It is also a paired tag.

Syntax:	<li>-------------</li>

Attributes	Parameters
type		disc, circle, square

Example:	
<html>
<body>
<h4>An Unordered List:</h4>
<ul>
  <li>SQL</li>
  <li>TSQL</li>
  <li>PLSQL</li>
</ul>
</body>
</html>

Example2:
<html>
<title>
Welcome to NiT
</title>
<head>
<center><h1>Working with LISTS and Course Names</h1></center>
</head>
<body>

<h4>Disc bullets list:</h4>
<ul type="disc">
<li>SqlServer</li>
 <li>MySql</li>
 <li>SEQUEL</li>
 <li>TSQL</li>
 <li>PL/SQL</li>
</ul>  

<h4>Circle bullets list:</h4>
<ul type="circle">
<li>SqlServer</li>
 <li>MySql</li>
 <li>SEQUEL</li>
 <li>TSQL</li>
 <li>PL/SQL</li>
</ul>  

<h4>Square bullets list:</h4>
<ul type="square">
<li>SqlServer</li>
 <li>MySql</li>
 <li>SEQUEL</li>
 <li>TSQL</li>
 <li>PL/SQL</li>
</ul>  </body>
</html>

Definition list:
It is also called as discriptive list. It is used to give definitions to definition terms. It is a paired tag.

Syntax:	<dl>--------------</dl>

To specify definition term, we use dt tag.It is a paired tag

Syntax:	<dt>--------------</dt>

To specify definition data, we use dd tag. It is a paired tag

Syntax:	<dd>--------------</dd>

Example:
<html>
<title>
Welcome to NiT
</title>
<head>
<center><h1>Working with LISTS and Course Names</h1></center>
</head>
<body>
<h4>A Definition List:</h4>
<dl>
  <dt>.NET</dt>
  <dd>It is a kind of FRAMEWORK</dd>
  <dt>Android</dt>
  <dd>Operating System from Google</dd>
</dl>
</body>
</html>

Example2:
<html>
<title>
Welcome to NiT
</title>
<head>
<center><h1>Working with LISTS and Course Names</h1></center>
</head>
<body>
<html>
<body>
<h4>A nested List:</h4>
<ul>
  <li>Course</li>
  <li>Languages
    <ul>
    <li>C</li>
    <li>C++</li>
   <li>Java</li>
    </ul>
  </li>
  <li>Scripts
<ul>
    <li>JavaScript</li>
    <li>VBScript</li>
   <li>Shell Script</li>
  <li> PERL Script</li>
    </ul>
  </li>
</ul>
</body>
</html>

-----------------------------------------------------------------------------------------------------------------------------------

HTML Tables
Tables are used to represent our data in a tabular format. The best way to split a page into different sections is to use tables. In HTML, to represent tables we use table tag. It is a paired tag.


Syntax:	<table>-----------</table>

Example:
<table>
------
------
</table>

Table rows:
The horizontal lines present in the tables are called as table rows. To represent table rows, we use tr tag. It is a paired tag.

Syntax:	<tr>--------------</tr>

Example:
<table>
<tr>
-----
-----
</tr>
</table>

Table Cells
Each row consists of a number of cells. Each cell defined by a tag. The tag looks like <td>. It is a paired tag.

Syntax:	
<td>--------------</td>

Example:
<table>
<tr>
<td>SNo.</td>
<td>SName</td>
</tr>
<tr>
<td>101</td>
<td>NiT</td>
</tr>
<tr>
<td>102</td>
<td>KSRaju</td>
</tr>
</table>

Table Headings:
To represent table headings we are using th tag. It is a paired tag.

Syntax:
<th>-----------------</th>

Example:
<table>
<tr>
<th>SNo.</th>
<th>SName</th>
</tr>
<tr>
<td>101</td>
<td>NiT</td>
</tr>
<tr>
<td>102</td>
<td>KSRaju</td>
</tr>
</table>

<caption>
It represents the title of the table that is its parent, if it has a parent and that is a table element. It is a paired tag.

Syntax:	
<caption>-----------------</caption>

Example:
<table>
  <caption>
    <p>table 1. Sample table</p>
  </caption>
  <tr>
    <td>1</td>
    <td>2</td>
  </tr>
  <tr>
    <td>3</td>
    <td>4</td>
  </tr>
</table>

Attributes	Parameters
border		pixels
bordercolor	any color/Color code(hexa)
bgcolor		any color/Color code(hexa)
background	image path
height		pixels or %
width		pixels or %	
rules		rows, cols, all, none
cellspacing	pixels
cellpadding	pixels
align		left, right, center
valign		top, middle, bottom
rowspan		number
colspan		number

Cellspacing-->This attribute is used to change the spacing between the cells.
Cellpadding-->This attribute is used to change the space between the content to the inner edges of the cell.

Example:
<table border=1>
<tr>
<td>cell1</td>
<td>cell2</td>
</tr>
<tr>
<td>cell3</td>
<td>cell4</td>
</tr>
</table>

Example2:
<table border=1>
<tr>
<th>Name</th>
<th>Number</th>
</tr>
<tr>
<td>Raju</td>
<td>1001</td>
</tr>
<tr>
<td>Raju</td>
<td>1001</td>
</tr>
</table>

Height and Width 
Specifying the width and height on your tables can make your pages much easier to control.

Pixels and Percents
There are two ways of marking the width and height of your tables. One way is by specifying a certain number of pixels. The other is by marking the width and height using percents. Pixels, will make it a certain length, and stay there. Percents, will take up a certain percent of the browser window, meaning it may change depending on your screen resolution.

Pixels (px): Pixels are fixed-size units that are used in screen media. One pixel is equal to one dot on the computer screen. One problem with the pixel unit is that it does not scale upward for visually-impaired readers or downward to fit mobile devices.

Percent (%): The percent unit is much like the “em” unit . While using the percent unit, your text remains fully scalable for mobile devices and for accessibility.

Example1
<TABLE width=50% height=50% BORDER=1>
<TR>
   <TD>lemons</TD>
   <TD>grapefruit</TD>
   </TR>
<TR>
   <TD>bananas</TD>
   <TD>pineapple</TD>
   </TR>
</TABLE>


Example2:
<TABLE  BORDER=1>
<TR>
   <TD height=100>lemons</TD>
   <TD>grapefruit</TD>
   </TR>
<TR>
   <TD height=100 width=100>bananas</TD>
   <TD>pineapple</TD>
   </TR>
</TABLE>

Example3
<table width="500" border="5">
   <tr>
  <td width="25%">Column 1</td>
  <td>Column 2</td>
   </tr>
   <tr>
   <td>Column 1</td>
  <td>Column 2</td>
  </tr>
   <tr>
   <td>Column 1</td>
   <td>Column 2</td>
   </tr>
</table> 

Example4: Table Rules
<table border="5" rules=rows>
<tr>
<td>Row 1</td>
<td>Row 1</td>
<td>Row 1</td>
</tr>
<tr>
<td>Row 2</td>
<td>Row 2</td>
<td>Row 2</td>
</tr>
</table>

With Empty Cells
<html>
<body>
<table border="1">
<tr>
  <td>HTML</td>
  <td>CSS</td>
</tr>
<tr>
  <td>&nbsp</td>
  <td>JavaScript</td>
</tr>
</table>
</body>
</html>

Cell Padding
Cell Padding controls the distance between the text in the cell and the edge of the cell. To specify cell padding and it's distance, you add the line CELLPADDING="X" to the <TABLE> tag so the final result looks like:

   Syntax:  <TABLE CELLPADDING="X"> 

Example:
<TABLE CELLPADDING="15">
<TR> 
<TD> Cell 1 </TD> 
<TD> Cell 2 </TD> 
</TR>
<TR> 
<TD> Cell 3 </TD> 
<TD> Cell 4 </TD> 
</TR>
</TABLE> 

Cell Spacing
Cell Spacing controls the distance between the cells. To specify cell spacing and it's distance, you add the line CELLSPACING="X" to the <TABLE> tag so the final result looks like:

Syntax:    <TABLE CELLSPACING="X"> 

Example:
<TABLE CELLSPACING="15">
<TR> 
<TD> Cell 1 </TD> 
<TD> Cell 2 </TD> 
</TR>
<TR> 
<TD> Cell 3 </TD> 
<TD> Cell 4 </TD> 
</TR>
</TABLE>

Example5:

<table border="7" cellpadding="7" cellspacing="10">
<tr bgcolor="#00FF00">
<td><img src="rose.jpg" alt="rose"></td>
<td>Image is a transparent .gif.</td>
</tr>
</table>  

Example6:
<table border="7" cellpadding="10" 
cellspacing="10" bgcolor="red">
<tr>
<td>
<table border="7" cellpadding="10" 
cellspacing="10" bgcolor='blue'>
<tr>
<td><img src="fish1.gif" alt="smiley"></td>
</tr>
</table>
</td>
</tr>
</table>


Table Colors
Making a table cell have a colorful background, Table color gives your entire table one color which is the background color to all the cells. To define the color of your table, you will need to add the line BGCOLOR="#xxxxxx" to the <TABLE> tag, so the final result looks like this.

Syntax:	<TABLE BGCOLOR="#xxxxxx">

Cell Color
Cell color lets you define the background color of each individual cell on your table. To add color to one of your table cells, you will need to add the line BGCOLOR="#xxxxxx" to the <TD> tag that you want colored, so the final result looks like this.

    Syntax: <TD BGCOLOR="#xxxxxx"> 

Example:
<table border=1>
<tr>
<th>Course</th>
<th>Fee</th>
</tr>
<tr>
<td bgcolor="pink">HTML</td>
<td>5000</td>
</tr>
<tr>
<td bgcolor="green">JavaScript</td>
<td>5000</td>
</tr>
</table>

Colspan and Rowspan
These two features, Colspan and Rowspan, allow you to extend columns and rows across multiple other columns and rows .

Column Span
It extends cells on a horizontal row (left and right). 

Syntax:    <TD COLSPAN="X">

Example:
<table border=2 bordercolor="pink" bgcolor="green">
<tr>
<th>Name</th>
<th>Nos</th>
</tr>
<tr> 
<td colspan="2"> Hello </td> 
</tr>
</table>

Row Span
Row Span extends cells on a vertical row (up and down). 

Syntax:    <TD ROWSPAN="X">

Example:
<table border=2 bordercolor="pink" bgcolor="green">
<tr> 
<td rowspan="2"> Cell 1 </td>
<td> cell 2 </td> 
</tr> 
<tr> 
<td> cell 3 </td> 
</tr>
</table>  

Table Alignment
There are two main ways you can align text in a cell, horizontally and vertically. There are 3 ways of aligning it for both of these. Horizontally, you can align it left, right, and center. Vertically, you can align it top, bottom, and middle. 

Align Left
To align the text or objects in a cell to the left side of the cell, the line ALIGN="left" needs to be added to the <TD> tag, so the final result looks like this:

Syntax:   <TD ALIGN="left"> 

Example:
<table border="1">
  <tr>
    <th>StdName</th>
    <th>Grade</th>
  </tr>
  <tr>
    <td align="right">NiT</td>
    <td align="left">A++</td>
  </tr>
  <tr>
    <td align="center">Nacre</td>
    <td align="right">A</td>
  </tr>
</table>

Vertical Align:
<table border=4 bordercolor="red" bgcolor="teal">
<tr> 
<td rowspan="2" valign="top"> HTML </td>
<td> CSS </td> 
</tr> 
<tr> 
<td> JS </td> 
</tr>
</table> 

Example: (Vertical Headers)
<table border="1">
  <tr>
    <th>First Name:</th>
    <td>NareshIT</td>
  </tr>
  <tr>
    <th>Telephone:</th>
    <td>04023746666</td>
  </tr>
</table>

<colgroup>
The <colgroup> element represents a group of one or more columns in the table that is its parent. It is a container tag.

Syntax: <colgroup>..............</colgroup>

Example:
<table>
  <colgroup span="2" style="background-color: #ff0000;"></colgroup>
  <tr>
    <td>1</td>
    <td>2</td>
    <td>3</td>
  </tr>
  <tr>
    <td>4</td>
    <td>5</td>
    <td>6</td>
  </tr>  
</table>

 <col>
The <col> element represents one or more columns in the column group represented by that colgroup. It is a container tag.

Syntax: <col>..............</col>

Example:
<table>
  <colgroup>
    <col></col>
    <col span="2" style="background-color: #ff0000;"></col>
  </colgroup>
  <tr>
    <td>1</td>
    <td>2</td>
    <td>3</td>
  </tr>
  <tr>
    <td>4</td>
    <td>5</td>
    <td>6</td>
  </tr>  
</table>

<tbody>
The <tbody> element represents a block of rows that consist of a body of data for the parent table element, if the tbody element has a parent and it is a table. It is a container tag.

Syntax: <tbody>..............</tbody>

<thead>
The <thead> element represents the block of rows that consist of the column labels (headers) for the parent table element, if the thead element has a parent and it is a table. It is a container tag.

Syntax: <thead>..............</thead>

Example:
<table border=1>
  <caption>
    <p>table 1. List of HTML elements</p>
  </caption>
  <thead>
    <tr>
      <th>Number</th>
      <th>element</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>4.1.1</td>
      <td>html</td>
    </tr>
    <tr>
      <td>4.2.1</td>
      <td>head</td>
    </tr>
  </tbody>
</table>

<tfoot>
The <tfoot> element represents the block of rows that consist of the column summaries (footers) for the parent table element, if the tfoot element has a parent and it is a table. It is a container tag.

Syntax: <tfoot>..............</tfoot>

Example:
<table border=1>
  <caption>
    <p>table 1. List of HTML elements</p>
  </caption>
  <thead>
    <tr>
      <th>Number</th>
      <th>element</th>
    </tr>
  </thead>
  <tfoot>
    <tr>
      <td colspan="2">copyright ...</td>
    </tr>
  </tfoot>
  <tbody>
    <tr>
      <td>4.1.1</td>
      <td>html</td>
    </tr>
    <tr>
      <td>4.2.1</td>
      <td>head</td>
    </tr>
  </tbody>
</table>

Example:(Table with form objects)
<html>
<head>
<title>
Working with table
</title>
</head>
<table bgcolor="lightblue" height="10%" width="300">
<tr><td>User Name:</td><td><Input></td></tr>
<tr><td>Password:</td><td><Input type="password"></td></tr>
<tr><td><Input type="button" value=Login></td></tr>
</table>

-------------------------------------------------------------------------------------------------------------------------------------

Styles and Semantics

HTML Span Tag
Generally HTML span tag is used to apply the inline styles on some specific character, words or other HTML elements. It is a paired tag.

Syntax: 
 <span>-----------------</span>

Example:
<body>
<span style="color:red">Welcome to SPAN </span>
</body>

Example:
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>HTML forms</title>
</head>
<body>
  <span style='color:red'>Welcome to Span tag.....!!!</span><br>
  <span style='color:green'>Welcome to Span tag.....!!!</span><br>
  <span style='color:blue'>Welcome to Span tag.....!!!</span>
</body>
</html>
---------------------------------------------------------------------------------------------------------------------------------

Marquee tag:
Using this  tag we can create a scrolling text or scrolling image from left to right, right to left, top to bottom, bottom to top. It is a Paired tag. 

Syntax:	
<marquee>-------------</marquee>

Marquee Tag Attributes:
Attributes Values	Description
behavior	"slide"	Start and stop as soon as text touches the 		Margin.
	"scroll"	Start completely and off one side (Default)
	"alternate" Text bounce as soon as  touch both sidemargin
bgcolor	ColorCode Specifies the color as background
direction	"left"	  Left to Right
	"right"    	  Right to Left
	"up"	  Bottom to Top		
	"down"	  Top to Botoom
width	"size_px"	Specifies width in marquee.
height	"size_px" Specifies height in marquee
loop	"number"  Loop Continues in limited times.
scrollamount "number" Specifies Speed to scroll on the text.

Note:
1.The default behavior of marquee tag is scroll
2.Its behavior differ from browser to browser

NOTE:
The <marquee> tag deprecated in HTML5. Do not use this element, instead you can use JavaScript and CSS to create such effects.

Example1:
<html>
<head>
<title>
Marquee tag
</title>
</head>
<body>
<marquee>Naresh i Technologies</marquee>
</body>
</html>

Example2:
<html>
<head>
<title>
Welcome to Naresh i Technologies
</title>
</head>
<body>
<marquee behavior="scroll">Naresh i Technologies in SCROLL</marquee>
<marquee behavior="slide">Naresh i Technologies in SLIDE</marquee>
<marquee behavior="alternate">Naresh i Technologies in ALTERNATE</marquee>
<marquee behavior="scroll" direction="up">Upside Text Scrolling</marquee>
</body>
</html>

Example3:
<html>
<head>
<title>
marquee Tag.
</title>
</head>
<body>
<marquee behavior="scroll" bgcolor="red" scrollamount=3 direction="up" height=200pix width=200pix>Naresh i Technologies in SCROLL</marquee>
<marquee behavior="slide" bgcolor="pink" scrollamount=3 direction="down" height=200pix width=200pix>Naresh i Technologies in SLIDE</marquee>
<marquee behavior="alternate" bgcolor="yellow" scrollamount=3 direction="right" height=200pix width=200pix>Naresh i Technologies in ALTERNATE</marquee>
</body>
</html>

Example:
<marquee behavior="scroll" direction="left" scrollamount="3">Slow Speed scroll speed</marquee>
<marquee behavior="scroll" direction="left" scrollamount="10">Medium Speed scroll speed</marquee>
<marquee behavior="scroll" direction="left" scrollamount="17">Fast Speed scroll speed</marquee>

Example:
<marquee behavior="scroll" direction="left" id="marquee1"><p>Press Button</p></marquee>
<input type="button" value="Stop Marquee" onClick="document.getElementById('marquee1').stop();">
<input type="button" value="Start Marquee" onClick="document.getElementById('marquee1').start();">

Example:
<marquee behavior="scroll" direction="left" scrollamount="6" id="marquee1">marquee slow/medium/fast speed using button</marquee>
<input type="button" value="Slower" onClick="document.getElementById('marquee1').setAttribute('scrollamount', 1, 0);">
<input type="button" value="Medium" onClick="document.getElementById('marquee1').setAttribute('scrollamount', 5, 0);">
<input type="button" value="Faster" onClick="document.getElementById('marquee1').setAttribute('scrollamount', 10, 0);">

More Advanced:
<marquee style="z-index:2;position:absolute;left:18px;top:97px;font-family:Cursive;font-size:14pt;color:#ff0000;height:200px;"scrollamount="3" direction="down">nareshit.com</marquee>
<marquee style="z-index:2;position:absolute;left:1px;top:89px;font-family:Cursive;font-size:14pt;color:#ff0000;height:100px;"scrollamount="7" direction="down">nareshit.com</marquee>
<marquee style="z-index:2;position:absolute;left:111px;top:7px;font-family:Cursive;font-size:14pt;color:#ff0000;height:302px;"scrollamount="4" direction="down">nareshit.com</marquee>
<marquee style="z-index:2;position:absolute;left:225px;top:83px;font-family:Cursive;font-size:14pt;color:#ff0000;height:371px;"scrollamount="3" direction="down">nareshit.com</marquee>
<marquee style="z-index:2;position:absolute;left:105px;top:53px;font-family:Cursive;font-size:14pt;color:#ff0000;height:317px;"scrollamount="2" direction="down">nareshit.com</marquee>
<marquee style="z-index:2;position:absolute;left:168px;top:69px;font-family:Cursive;font-size:14pt;color:#ff0000;height:369px;"scrollamount="1" direction="down">nareshit.com</marquee>
<marquee style="z-index:2;position:absolute;left:130px;top:117px;font-family:Cursive;font-size:14pt;color:#ff0000;height:289px;"scrollamount="7" direction="down">nareshit.com</marquee>
<marquee style="z-index:2;position:absolute;left:176px;top:57px;font-family:Cursive;font-size:14pt;color:#ff0000;height:78px;"scrollamount="7" direction="down">nareshit.com</marquee>
<marquee style="z-index:2;position:absolute;left:16px;top:57px;font-family:Cursive;font-size:14pt;color:#ff0000;height:56px;"scrollamount="5" direction="down">nareshit.com</marquee>
<marquee style="z-index:2;position:absolute;left:300px;top:86px;font-family:Cursive;font-size:14pt;color:#ff0000;height:194px;"scrollamount="2" direction="down">nareshit.com</marquee>
<marquee style="z-index:2;position:absolute;left:292px;top:10px;font-family:Cursive;font-size:14pt;color:#ff0000;height:251px;"scrollamount="6" direction="down">nareshit.com</marquee>
<marquee style="z-index:2;position:absolute;left:278px;top:74px;font-family:Cursive;font-size:14pt;color:#ff0000;height:154px;"scrollamount="1"direction="down">nareshit.com</marquee>
<marquee style="z-index:2;position:absolute;left:241px;top:72px;font-family:Cursive;font-size:14pt;color:#ff0000;height:82px;"scrollamount="3" direction="down">nareshit.com</marquee>
<marquee style="z-index:2;position:absolute;left:276px;top:32px;font-family:Cursive;font-size:14pt;color:#ff0000;height:70px;"scrollamount="8" direction="down">nareshit.com</marquee>
<marquee style="z-index:2;position:absolute;left:272px;top:15px;font-family:Cursive;font-size:14pt;color:#ff0000;height:334px;"scrollamount="11" direction="down">nareshit.com</marquee>
<marquee style="z-index:2;position:absolute;left:90px;top:38px;font-family:Cursive;font-size:14pt;color:#ff0000;height:167px;"scrollamount="7" direction="down">nareshit.com</marquee>
<marquee style="z-index:2;position:absolute;left:275px;top:108px;font-family:Cursive;font-size:14pt;color:#ff0000;height:375px;"scrollamount="7" direction="down">nareshit.com</marquee>
<marquee style="z-index:2;position:absolute;left:22px;top:76px;font-family:Cursive;font-size:14pt;color:#ff0000;height:12px;"scrollamount="7" direction="down">nareshit.com</marquee>
<marquee style="z-index:2;position:absolute;left:89px;top:54px;font-family:Cursive;font-size:14pt;color:#ff0000;height:366px;"scrollamount="2" direction="down">nareshit.com</marquee>
<marquee style="z-index:2;position:absolute;left:26px;top:72px;font-family:Cursive;font-size:14pt;color:#ff0000;height:358px;"scrollamount="1" direction="down">nareshit.com</marquee>
<marquee style="z-index:2;position:absolute;left:3px;top:44px;font-family:Cursive;font-size:14pt;color:#ff0000;height:130px;"scrollamount="3" direction="down">nareshit.com</marquee> 
<marquee style="z-index:2;position:absolute;left:300px;top:108px;font-family:Cursive;font-size:14pt;color:#ff0000;height:375px;"scrollamount="7" direction="down">nareshit.com</marquee>
<marquee style="z-index:2;position:absolute;left:335px;top:76px;font-family:Cursive;font-size:14pt;color:#ff0000;height:125px;"scrollamount="7" direction="down">nareshit.com</marquee>
<marquee style="z-index:2;position:absolute;left:400px;top:54px;font-family:Cursive;font-size:14pt;color:#ff0000;height:366px;"scrollamount="2" direction="down">nareshit.com</marquee>
<marquee style="z-index:2;position:absolute;left:355px;top:72px;font-family:Cursive;font-size:14pt;color:#ff0000;height:358px;"scrollamount="1" direction="down">nareshit.com</marquee>
<marquee style="z-index:2;position:absolute;left:380px;top:44px;font-family:Cursive;font-size:14pt;color:#ff0000;height:375px;"scrollamount="3" direction="down">nareshit.com</marquee>

---------------------------------------------------------------------------------------------------------------------------------------------------------------

Styles and Semantics

HTML Span Tag
Generally HTML span tag is used to apply the inline styles on some specific character, words or other HTML elements. It is a paired tag.

Syntax: 
 <span>-----------------</span>

Example:
<body>
<span style="color:red">Welcome to SPAN </span>
</body>

Example:
<!doctype html>
<body>
<span style='color:red;font-family:tahoma;font-size:30px'>Welcome to Span tag..!!</span> <br>

<span style='color:green;font-family:candara;font-size:40px'>Welcome</span> to Span tag..!! <br>

<span style='color:blue;font-family:arial;font-size:90px'>W</span>elcome to Span tag..!!

<!-- style attribute is global attribute to apply different styles from Cascading Style Sheets -->
</body>

HTML <div> Tag:
By using this tag we can design the webpage as multuple divisions. If you want to design the web page with a specific format we can go for div tag. It is a paired tag, it can hold multiple elements.

Syntax:
<div>-------------</div>

Attributes:
1 align	2 style
	
Example:
<body>
<div style="background-color:orange;width:100%;height:100">
<span style='color:blue;font-size:30'>Welcome to my site div1</span>
</div>
<div style='background-color:white;width:100%;height:100'>
<span style='color:blue;font-size:30'>Welcome to my site div2</span>
</div>
<div style='background-color:green;width:100%;height:100'>
<span style='color:blue;font-size:30'>Welcome to my site div3</span>
</div>
</body>

------------------------------------------------------------------------------------------------------------------------------------------
CSS
---------------------------------------------------------------------------------------------------------------------------------------

What is CSS?
Cascading Style Sheets, fondly referred to as CSS, is a simple design language intended to simplify the process of making web pages presentable.;
	
Why CSS?
1 CSS easy Manage a lot of Websites page Layout.
2 CSS save a lot of Time.
3 CSS Sheets make Global change to all website pages.

Features of CSS:
1. Flexibility
2. Codes Rendering
3. Accessibility
4. Easy Manage
5. Global Change
6. CSS Save a lot of time
7. Easy Maintenance
8. Inline Styles
9. Internal Style Sheets
10. External Style Sheets
11. Page Load Faster
12. Superior styles to HTML 
13. Multiple Device Compatibility
14. Global web standards 

CSS Versions:
CSS1.0 ==> 1996
CSS2.0 ==> 1998
CSS3.0 ==> 2008
CSS4.0 ==> 2016
Bootstrap: Mobile Front-End Framework for Responsive Web Design, One Wesite can able to fit on any device..!!
LESS ==> Linear CSS
SASS ==> Syntatically Awesome Style Sheets

CSS Syntax:
Selector: A selector is an HTML tag at which style will be applied. This could be any tag like <h1> or <table> etc.

Property: A property is a type of attribute of HTML tag. Put simply, all the HTML attributes are converted into CSS properties. They could be color or border etc.

Value: Values are assigned to properties. For example color property can have value either red or #F1F1F1 etc.

Syntax as follows:
selector { property: value }

Example: Table border as follows:
table{ border :1px solid #C0lorCode; }

Basic Examples:

<html><head>
<style type="text/css">
	h1 {color: green}
 	h2 {color: #dda0dd}
 	p {color: rgb(0,0,255)}
</style>
</head>
<body>
 	<h1>This is header 1</h1>
 	<h2>This is header 2</h2>
 	<p>This is a paragraph</p>
</body>
</html>

Example2
<body background="chrome.png" style="background-repeat:no-repeat;background-attachment:fixed;margin:100;text-align:justify">
 	
Example3
<style>
<img src="fr.jpg" width="100" style="position:absolute;top:100;left:100"  >
</style>

Three Ways to Insert CSS (Types of Style Sheets)
There are three ways of inserting a style sheet:
Inline styles
Internal style sheet
External style sheet 

Examples for Inline Style sheets:
<p style="color: red">Hi I am in RED color</p> 
This will make that specific paragraph red. 
<span style="color:blue">Hi I am sky in Blue color</span> 
This will make that text style in blue color.

2. <b p style="color: green">Hi I am in Bold </b> </p>
<span style="color:lightblue">Hi I am sky in Blue color</span> 

Examples for Internal Style Sheets or Page Level Style Sheets
1. 
<html>
<head>
<style type="text/css">
p
{
color:red;
text-align:center;
} 
</style>
</head>
<body>
<p>Hello World!</p>
<p>This paragraph is styled with CSS.</p>
</body>
</html>

2. 
<html>
<head>
<style type="text/css">
p
{
color:pink;
text-align:right;
background-color:green;
} 
</style>
</head>
<body>
<p>Welcome to CSS</p>
<p>This paragraph is styled with CSS.</p>
</body>
</html>

EXTERNAL STYLE SHEETS

Example1:
Step 1
Prepare CSS file
Step 2
Prepare HTML file

Step 1
h1 {color: green}
h2 {color: #dda0dd}
p {color: rgb(0,0,255)}

Step 2
<head>
<link rel="stylesheet" href="one.css">
</head>
<body>
 	<h1>This is header 1</h1>
 	<h2>This is header 2</h2>
 	<p>This is a paragraph</p>
</body>
</html>


Example2:
Step 1
Prepare CSS file
Step 2
Prepare HTML file

.cls{
border:1px solid blue;
width:100;
height:100;
background-color:red;
}

<head>
<link rel="stylesheet" href="style.css">
</head>
<body>
<div class="cls">
Hello
</div>
</body>


3.
strong 
{
color: red;
text-decoration: underline;
}

<!DOCTYPE html>
<html>
  <head>
  <meta charset="UTF-8">
  <title>Sample document</title>
  <link rel="stylesheet" href="style1.css">
  </head>
  <body>
    <p>
      <strong>C</strong>ascading
      <strong>S</strong>tyle
      <strong>S</strong>heets
    </p>
  </body>
</html>

----------------------------------------------------------------------------------------------------------------------------------------
CSS Units
CSS supports a number of measurements including absolute units such as inches, centimeters, points, and so on, as well as relative measures such as percentages and em units. 

em (ems, the height of the element's font), An em is a unit of measurement in the field of typography, equal to the currently specified point size. 

Syntax: em;

Example:
<html>
<head>
<style type="text/css">
p 
{
letter-spacing: 7em;
}
</style>
</head>
<body>
<h1>CSS Units!</h1>
<p>This text is not easy to read on page.</p>
</body>
</html>

ex (x-height, the height of the letter "x")
This value defines a measurement relative to a font's x-height. 

Syntax: ex;

Example:
<html>
<head>
<style type="text/css">
p 
{
font-size: 24pt; 
line-height: 3ex;
}
</style>
</head>
<body>
<h1>CSS Units!</h1>
<p>This text is not easy to read on page.</p>
</body>
</html>

Defines a measurement in screen pixels.
px (pixels, relative to the canvas resolution)

Syntax: px;

Example:
<html>
<head>
<style type="text/css">
p 
{
padding: 25px;
}
</style>
</head>
<body>
<h1>CSS Units!</h1>
<p>This text is not easy to read on page.</p>
</body>
</html>

Absolute length units are highly dependent on the output medium, and so are less useful than relative units. The following absolute units are available:

in (inches; 1in=2.54cm)
Defines a measurement in inches.

Syntax: in

Example:
<html>
<head>
<style type="text/css">
p 
{
word-spacing: .15in;
}
</style>
</head>
<body>
<h1>CSS Units!</h1>
<p>This text is not easy to read on page.</p>
</body>
</html>

cm (centimeters; 1cm=10mm)
Defines a measurement in centimeters

Syntax: cm;

div 
{
margin-bottom: 2cm;
}

mm (millimeters)
Defines a measurement in millimeters

Syntax:mm;

<html>
<head>
<style type="text/css">
p
{
word-spacing: 15mm;
}
</style>
</head>
<body>
<h1>CSS Units!</h1>
<p >This text is not easy to read on page.</p>
</body>
</html>

pt
Defines a measurement in points. A point is defined as 1/72nd of an inch. pt (points; 1pt=1/72in)

Syntax:pt;

<html>
<head>
<style type="text/css">
body 
{
font-size: 18pt;
}
</style>
</head>
<body>
<h1>CSS Units!</h1>
<p >This text is not easy to read on page.</p>
</body>
</html>

pc (picas; 1pc=12pt)
Defines a measurement in picas. A pica is equivalent to 12 points; thus, there are 6 picas per inch.

Syntax: pc;

<html>
<head>
<style type="text/css">
p
{
font-size: 20pc;
}
</style>
</head>
<body>
<h1>CSS Units!</h1>
<p >This text is not easy to read on page.</p>
</body>
</html>

% 
Defines a measurement as a percentage relative to another value, typically an enclosing element.

Example:
<html>
<head>
<style type="text/css">
p 
{
font-size: 16pt; 
line-height: 125%;
}
</style>
</head>
<body>
<h1>CSS Units!</h1>
<p >This text is not easy to read on page.</p>
</body>
</html>

Setting Backgrounds using CSS:
1. background-color
2. background-image
3. background-repeat
4. background-attachment
5. background-position

1. The background-color property is used to set the background color of an element.
2. The background-image property is used to set the background image of an element.
3. The background-repeat property is used to control the repetition of an image in the background.
4. The background-position property is used to control the position of an image in the background.
5. The background-attachment property is used to control the scrolling of an image in the background.

1 background-color Porperty:
The background-color property is used to set the background color of an element.
Syntax:
background-color:colorName/ColorCode/HexaCode;
or
background:colorName/ColorCode/HexaCode;

Example:
<head>
<style type='text/css'>
div
{
background-color:#FFFF00;
}
</style>
<body>
<div>Working with Typography...!!</div>
</body>

Example2:
<head>
<style type='text/css'>
div
{
background:red;
}
</style>
<body>
<div>Working with Typography...!!</div>
</body>

Example:
<p style="background-color:yellow;">
This text has a yellow background color.
</p>

2. The background-image property is used to set the background image of an element.

Syntax:
background-image:url('ImgPath');
or
background:url('ImgPath');

Example1:
<head>
<style type='text/css'>
body
{
background-image:url("html5.png");
}
</style>
<body>
<div>Working with Typography...!!</div>
</body>

Example2:
<head>
<style type='text/css'>
body
{
background:url("html5.png");
}
</style>
<body>
<div>Working with Typography...!!</div>
</body>

Example3:
<p style="background-color:yellow;background-image:url('html.png')">This text has a yellow background color.
</p>

3. The background-repeat property is used to control the repetition of an image in the background.

Syntax:
background-repeat:no-repeat;
or
background:no-repeat;

Property Values
Value		Description	
repeat		The background image repeated both vertically and horizontally. 	
repeat-x		The background image repeated only horizontally	
repeat-y		The background image repeated only vertically	
no-repeat	The background-image not repeated	

Example:
<head>
<style>
body
{
background-image:url('water.gif');
background-repeat:no-repeat;
}
</style>
</head>
<body>
<p>repeat-x will repeat a background image only vertically.</p>
</body>

Example:
<style>
<body background="chrome.png" style="background-repeat:no-repeat;background-attachment:fixed;margin:100;text-align:justify">
</style>

4. The background-attachment property is used to control the scrolling of an image in the background.

Syntax:
background-attachment:fixed;
or
background:fixed;

Example:
<body background="html5.png" style="background-repeat:no-repeat;background-attachment:fixed;text-align:justify">
Some Text...
Some Text...
</body>

5. The background-position property is used to control the position of an image in the background.

Syntax:
background-position:left/center/right;
or
background:center;

Example:
<html>
<head>
<style type="text/css">
body
{ 
background-image:url('water.gif');
background-repeat:no-repeat;
background-attachment:fixed;
background-position:center; 
}
</style>
</head>
</body>
</html>

--------------------------------------------------------------------------------------------------------------------------------------------
Selectors:
Styles Reusability 

Types of Selectors:
1. Tag/Type Selectors
2. ID Selectors
3. Class Selectors
4. Grouping Selectors
5. Customized Selectors etc...............

Type/Tag selectors
A type selector matches the name of a document language element type. A type selector matches every instance of the element type in the document tree.

Syntax:
div
{
Styles
Styles
Styles
}

2.
<html>
<head>
<style type="text/css">
body
{
background-color:#FF00FF;
}
</style>
</head>
<body>
<h1>My CSS web page!</h1>
<p>Hello world!</p>
</body>
</html>
3.
<html>
<head>
<style type="text/css">
h1
{
background-color:red;
}
div
{
background-color:pink;
}
</style>
</head>
<body>
<h1>CSS background-color example!</h1>
<div>
This is a text inside a div element. We are still in the div element.
</div>
</body>
</html>

The id and class Selectors
In addition to setting a style for a HTML element, CSS allows you to specify your own selectors called "id" and "class".

The id Selector
It is used to specify a style for a single, unique element. The id selector uses the id attribute of the HTML element, and is defined with a "#". # is the notation or Symbol.

Syntax1:
#div
{
styles
styles
styles
}

Syntax:
div#div
{
styles
styles
styles
}

Examples
1.
<html>
<head>
<style type="text/css">
p#bold 
{ 
font-weight: bold; 
}
</style>
</head>
<body>
<p id="bold">this paragraph will be rendered bold.</p>
</body>
</html>
2.
<html>
<head>
<style type="text/css">
#Exa
{
text-align:center;
color:red;
} 
</style>
</head>
<body>
<p id="Exa">Hello CSS World!</p>
<p>This paragraph is not affected by the style.</p>
</body>
</html>
3.
<html>
<head>
<style type="text/css">
#para1
{
text-align:right;
color:green;
} 
#para2
{
text-align:center;
color:red;
} 
</style>
</head>
<body>
<p id="para1">Hello World!</p>
<p id="para2">This paragraph is not affected by the style.</p>
</body>
</html>

Example:
<head>
<style type='text/css'>
#div1
{
color:blue;
font-family:tahoma;
}
</style>
<script type='text/javascript'>
function MySelector()
{
document.getElementById("div1").innerHTML="Raju";
}
</script>
</head>
<body>
<p style='color:gray'>Click the button to display the ID related result...!!</p>
<div id="div">HTML5</div>
<div id="div1">JavaScript</div>
<button onclick="MySelector()">ClickMe</button>
</body>

The class Selector
It is used to specify a style for a group of elements .The class selector uses the HTML class attribute, and is defined with a "."

Syntax:
.div
{
styles
styles
styles
}

Syntax:
div.div
{
styles
styles
styles
}

Examples:
1.
<html>
<head>
<style type="text/css">
p.bold 
{ 
font-weight: bold; 
}
</style>
</head>
<body>
<p class="bold">this paragraph will
 be rendered bold.</p>
</body>
</html>
2.
<html>
<head>
<style type="text/css">
.right1
{
text-align:right;
}
</style>
</head>
<body>
<h1 class="right1">Right-aligned heading</h1>
<p class="right1">Right-aligned paragraph.</p> 
</body>
</html>
3.
<html>
<head>
<style type="text/css">
.center
{
text-align:center;
}
</style>
</head>
<body>
<h1 class="center">Naresh i Technologies</h1>
<p class="center">Center-aligned paragraph.</p>
<b class="center">Text is in bold.</b> 
</body>
</html>
4.
<html>
<head>
<style>
#div1
{
text-decoration:underline;
color:lime;
}
.cls1
{
border:5px double red;
width:100;
height:100;
}
</style>
<body>
<div id='div1'>Hello</div>
<div class="cls1">Hii</div>
</body>
</html>                    

Selector Grouping
We can group selectors using a comma (,) separator.

Example1:

h1 { font-family: sans-serif }
h2 { font-family: sans-serif }
h3 { font-family: sans-serif }

is equivalent to:
h1, h2, h3 { font-family: sans-serif }

Example:
p 
{
   font-family: tahoma;
   font-size: 14px;
}
div 
{
   font-family: tahoma;
   font-size: 14px;
}
blockquote 
{
   font-family: tahoma;
   font-size: 14px;
}

is equivalent to:

p, div, blockquote 
{
   font-family: tahoma;
   font-size: 14px;
}

Example:

<html>
<head>
<style>
#div1,.cls1
{
text-decoration:underline;
color:lime;
}
</style>
<body>
<div id='div1'>Hello</div>
<div class="cls1">Hii</div>
</body>
</html>         

---------------------------------------------------------------------------------------------------------------------------------------

Setting Fonts using CSS:
1.font-family 
2. font-style
3. font-variant
4. font-weight
5. font-size

1. The font-family property is used to change the face of a font.
2. The font-style property is used to make a font italic or oblique.
3. The font-variant property is used to create a small-caps effect.
4. The font-weight property is used to display bold or light a font appears
5. The font-size property is used to increase or decrease the size of a font.

Example:
<p style="font-family:georgia,garamond,serif;">
This text is rendered in either georgia, garamond, or the default
serif font depending on which font  you have at your system.
</p>

<html>
<head>
<style>
p.normal {font-style:normal;}
p.italic {font-style:italic;}
p.oblique {font-style:oblique;}
</style>
</head>
<body>
<p class="normal">This is a paragraph, normal.</p>
<p class="italic">This is a paragraph, italic.</p>
<p class="oblique">This is a paragraph, oblique.</p>
</body>
</html>

<p style="font-weight:bold;">
This font is bold.
</p>
<p style="font-weight:bolder;">
This font is bolder.
</p>
<p style="font-weight:900;">
This font is 900 weight.
</p>

<p style="font-size:20px;">
This font size is 20 pixels
</p>
<p style="font-size:small;">
This font size is small
</p>
<p style="font-size:large;">
This font size is large
</p>

<head>
<style type="text/css">
p.normal {font-variant:normal;}
p.small {font-variant:small-caps;}
</style>
</head>
<body>
<p class="normal">My name is SubbaRaju.</p>
<p class="small">My name is SubbaRaju.</p>
</body>

font Example:
<html>
<head>
<style type='text/css'>
p.ex1
{
font:25px tahoma;
}
</style>
</head>
<body>
<p class="ex1">This is a paragraph. This is a paragraph. This is a paragraph.</p>
</body>
</html>

CSS Basic Text Properties:
1. color
2. direction
3. letter-spacing 
4. word-spacing
5. text-indent 
6. text-align
7. text-decoration
8. text-transform 
9. white-space
10. vertical-align 
	
Manipulating Text using CSS
1. The color property is used to set the color of a text.
2. The direction property is used to set the text direction.
3. The letter-spacing property is used to add or subtract space between the letters that make up a word.
4. The word-spacing property is used to add or subtract space between the words of a sentence.
5. The text-indent property is used to indent the text of a paragraph.
6. The text-align property is used to align the text of a  document.
7. The text-decoration property is used to underline, overline, and line-through text.
8. The text-transform property is used to capitalize text or convert text to uppercase or lowercase letters.
9. The white-space property is used to control the flow and formatting of text.
10. vertical-align property sets the vertical alignment of an element.


1. The color property is used to set the color of a text.

Syntax:
color:colorName/ColorCode

Example:
<head>
<style type="text/css">
p
{ 
color:blue;
}
</style>
</head>
<body>
<p>Welcome to CSS Text Properties..!!</p>
</body>

Example:
<body>
<p style="color:blue">Welcome to CSS Text Properties..!!</p>
</body>

Examples
<p style="direction:rtl;">
This text will be renedered from right to left
</p>

<p style="letter-spacing:5px;">
This text is having space between letters.
</p>

<head>
<style type="text/css">
p 
{
text-indent:50px;
}
</style>
</head>
<body>
<p>jQuery is a fast and concise JavaScript library created by John Resig in 2006 with a nice motto: Write less, do more. jQuery simplifies HTML document traversing, event handling, animating, and Ajax interactions for Rapid Web Development. jQuery is library of JavaScript file, containing all jQuery functions. jQuery developing Ajax base Application.</p>
</body>

<p style="text-align:right;">
This will be right aligned.
</p>
<p style="text-align:center;">
This will be center aligned.
</p>
<p style="text-align:left;">
This will be left aligned.
</p>

<p style="text-decoration:underline;">
This will be underlined
</p>
<p style="text-decoration:line-through;">
This will be striked through.
</p>
<p style="text-decoration:overline;">
This will have a over line.
</p>
<p style="text-decoration:blink;">
This text will have blinking effect
</p>

<p style="text-transform:capitalize;">
This will be capitalized
</p>
<p style="text-transform:uppercase;">
This will be in uppercase
</p>
<p style="text-transform:lowercase;">
This will be in lowercase
</p>

<head>
<style type="text/css">
p
{
white-space:nowrap;
}
</style>
</head>
<body>
<p>
This is some text. This is some text. This is some text.
This is some text. This is some text. This is some text.
</p>
</body>

<p style="text-shadow:4px 4px 8px blue;">
If your browser supports the CSS text-shadow property, 
this text will have a  blue shadow.</p>

vertical-align Property Values
baseline
sub
super
top
text-top
middle
bottom
text-bottom
0px
10px

Example:
<head>
<style type="text/css">
b
{
background-color:yellow;
vertical-align:super;
}
</style>
</head>
<body>
vertical alignment of an <b> element </b>
</body>

CSS - Images:
CSS plays a good role to control image display. You can set following image properties using CSS.

1.The border property is used to set the width of an image border.
2. The height property is used to set the height of an image.
3. The width property is used to set the width of an image.

The image border Property:
<img style="border:0px;" src="html.png" />
<br />
<img style="border:3px dashed red;" src="html.png" />

The image height Property:
The height property of an image is used to set the height of an image. This property can have a value in length or in %.

<img style="border:1px solid red; height:100px;" 
        src="html.png" />
<br />
<img style="border:1px solid red; height:50%;" 
        src="html.png" />

CSS - Links
The :link Signifies unvisited hyperlinks.
The :visited Signifies visited hyperlinks.
The :hover Signifies an element that currently has the user's mouse pointer hovering over it.
The :active Signifies an element on which the user is currently clicking.

Set the color of Links:
<style type="text/css">
a:link {color:#000000}
</style>
<a href="nit1.html">Black Link</a>

Set the color of Visited Links:
<style type="text/css">
a:visited {color: #006600}
</style>
<a href="nit1.html">Click this link</a>

Change the color of links when mouse is over:
<head>
<style type="text/css">
a:hover 
{
color: #FFCC99;
}
</style>
</head>
<body>
<a href="goodmorning.gif">Bring Mouse Here</a>
</body>

Change the color of active links:
<style type="text/css">
a:active {color: #FF00CC}
</style>
<a href="nit1.html">Click This Link</a>
-----------------------------------------------------------------------------------------------------------------------------------
CSS - Lists
Lists are very helpful in conveying a set of either numbered or bulleted points.
There are following CSS properties which can be used to control lists:
1. The list-style-type Allows you to control the shape or appearance of the marker.
2. The list-style-position Specifies whether a long point that wraps to a second line should align with the first line or start underneath the start of the marker.
3. The list-style-image Specifies an image for the marker rather than a bullet point or number.
4. The list-style Serves as shorthand for the preceding properties.

Example:
<html>
<head>
<style type='text/css'>
ul
{
list-style-type:square;
}
</style>
</head>
<body>
<ul> 
<li>HTML</li>
<li>JavaScript</li>
<li>CSS</li>
<li>jQuery</li>
<li>Json</li>
</ul>
</body>
</html>

<ul style="list-style-type:square;">
<li>Maths</li>
<li>Social Science</li>
<li>Physics</li>
</ul>

<ol style="list-style-type:decimal;">
<li>Maths</li>
<li>Social Science</li>
<li>Physics</li>
</ol>

<ol style="list-style-type:lower-alpha;">
<li>Maths</li>
<li>Social Science</li>
<li>Physics</li>
</ol>

<ol style="list-style-type:lower-roman;">
<li>Maths</li>
<li>Social Science</li>
<li>Physics</li>
</ol>

The list-style-position:
The list-style-position property specifies if the list-item markers should appear inside or outside the content flow.

Property Values
Value	Description	
inside	Indents the marker and the text. The bullets appear inside the content  flow	
outside	Keeps the marker to the left of the text. The bullets appears outside the content flow. 	This is default

Example:
<html>
<head>
<style type='text/css'>
ul
{
list-style-position:inside;
}
</style>
</head>
<body>
<ul> 
<li>HTML</li>
<li>JavaScript</li>
<li>CSS</li>
<li>jQuery</li>
<li>Json</li>
</ul>
</body>
</html>

The list-style-image Property:
The list-style-image allows you to specify an image so that you can use your own bullet style. 

Example:

<ul>
<li style="list-style-image: url(unsure.gif);">HTML</li>
<li>JavaScript</li>
<li>CSS</li>
<li>jQuery</li>
</ul>

<ol>
<li style="list-style-image: url(unsure.gif);">Maths</li>
<li>Social Science</li>
<li>Physics</li>
</ol>

Example:
<html>
<head>
<style type='text/css'>
ul
{
list-style:square url("unsure.gif");
}
</style>
</head>
<body>
<ul> 
<li>HTML</li>
<li>JavaScript</li>
<li>CSS</li>
<li>jQuery</li>
<li>Json</li>
</ul>
</body>
</html>

CSS Tables
Table Borders
To specify table borders in CSS, use the border property.

Example:
<html>
<head>
<style type='text/css'>
table,th,td
{
border:2px solid blue;
}
</style>
</head>
<body>
<table>
<tr>
<th>Firstname</th>
<th>Lastname</th>
</tr>
<tr>
<td>Subba</td>
<td>Raju</td>
</tr>
<tr>
<td>Thomus</td>
<td>Affee</td>
</tr>
</table>
</body>
</html>

Collapse Borders
The border-collapse property sets whether the table borders are collapsed into a single border or separated:
Example:
<html>
<head>
<style type='text/css'>
table
{
border-collapse:collapse;
}
table,th,td
{
border:2px solid blue;
}
</style>
</head>
<body>
<table>
<tr>
<th>Firstname</th>
<th>Lastname</th>
</tr>
<tr>
<td>Subba</td>
<td>Raju</td>
</tr>
<tr>
<td>Thomus</td>
<td>Affee</td>
</tr>
</table>
</body>
</html>

Table Width and Height
Width and height of a table is defined by the width and height properties.

Example:
table 
{
width:100%;
}
th
{
height:50px;
}

Table Text Alignment
The text in a table is aligned with the text-align and vertical-align properties.
The text-align property sets the horizontal alignment, like left, right, or center:

Example
td
{
text-align:right;
}

Table Padding
To control the space between the border and content in a table, use the padding property on td and th elements:

Example
td
{
padding:15px;
}

Table Color
The example below specifies the color of the borders, and the text and background color of th elements:

Example
table, td, th
{
border:1px solid green;
}
th
{
background-color:green;
color:white;
}

CSS Box Model
The CSS box model is essentially a box that wraps around HTML elements, and it consists of: margins, borders, padding, and the actual content.

The box model allows us to place a border around elements and space elements in relation to other elements.

Explanation of the four different parts:
Margin - Clears an area around the border. The margin does not have a background color, it is completely transparent

Border - A border that goes around the padding and content. The border is affected by the background color

Padding - Clears an area around the content. The padding is affected by the background color of the box

Content - The content of the box, where text and images appear

Example:
<html>
<head>
<style>
div
{
width:220px;
padding:10px;
border:5px solid gray;
margin:0px;
}
</style>
</head>
<body>
<img src="water.gif" width="250" height="250" />
<div>It is Good Background Pic.</div>
</body>
</html>

CSS - Borders
The border properties allow you to specify how the border of the box representing an element should look. There are three properties of a border you can change

1. The border-color Specifies the color of a border.
2. The border-style Specifies whether a border should be solid, dashed line, double line, or one of the other possible values.
3. The border-width Specifies the width of a border.

The border-style Property:
The border-style property allows you to select one of the following styles of border:
 none: No border. (Equivalent of border-width:0;)
 solid: Border is a single solid line.
 dotted: Border is a series of dots.
 dashed: Border is a series of short lines.
 double: Border is two solid lines.
 groove: Border looks as though it is carved into the page.
 ridge: Border looks the opposite of groove.
 inset: Border makes the box look like it is embedded in the page.
 outset: Border makes the box look like it is coming out of the canvas.
 hidden: Same as none, except in terms of border-conflict resolution for table elements.

Examples:
<p style="border-width:4px; border-style:none;">
This is a border with none width.
</p>
<p style="border-width:4px; border-style:solid;">
This is a solid border.
</p>
<p style="border-width:4px; border-style:dashed;">
This is a dahsed border.
</p>
<p style="border-width:4px; border-style:double;">
This is a double border.
</p>
<p style="border-width:4px; border-style:groove;">
This is a groove border.
</p>
<p style="border-width:4px; border-style:ridge">
This is aridge  border.
</p>
<p style="border-width:4px; border-style:inset;">
This is a inset border.
</p>
<p style="border-width:4px; border-style:outset;">
This is a outset border.
</p>
<p style="border-width:4px; border-style:hidden;">
This is a hidden border.
</p>

CSS Outlines
An outline is a line that is drawn around elements (outside the borders) to make the element "stand out". The outline properties specify the style, color, and width of an outline.
However, the outline property is different from the border property.

outline Property
Example:
<html>
<head>
<style>
p 
{
border:1px solid red;
outline:green dotted thick;
}
</style>
</head>
<body>
<p>Supports the outline properties only</p>
</body>
</html>

outline-color Property
The outline-color property specifies the color of an outline.

Example:
p 
{
outline-style:dotted;
outline-color:#00ff00;
}

outline-style Property
The outline-style property specifies the style of an outline.

Example:
p 
{
outline-style:dotted;
}

outline-width Property
The outline-width specifies the width of an outline.

Example:
p 
{
outline-style:dotted;
outline-width:5px;
}

CSS - Margins:
The margin property defines the space around an HTML element. It is possible to use negative values to overlap content.

CSS Margin Properties
Property		Description
margin		A short hand property for setting the margin.
margin-bottom	Sets the bottom margin of an element
margin-left	Sets the left margin of an element
margin-right	Sets the right margin of an element
margin-top	Sets the top margin of an element

Example:
<html>
<head>
<style type='text/css'>
h5
{
margin:2cm 4cm 3cm 4cm
}
</style>
</head>
<body>
<p>A paragraph with no specified margins.</p>
<h5>A paragraph with specified margins.</h5>
<p>A paragraph with no specified margins.</p>
</body>
</html>

margin-bottom	Sets the bottom margin of an element

Example:
<html>
<head>
<style type='text/css'>
h5
{
margin-bottom:2cm;
}
</style>
</head>
<body>
<p>A paragraph with no specified margins.</p>
<h5>A paragraph with specified margins.</h5>
<p>A paragraph with no specified margins.</p>
</body>
</html>

CSS - Paddings
The padding property allows you to specify how much space should appear between the content of an element and its border:

All CSS Padding Properties
Property		Description
padding		A shorthand property for setting all the padding 			properties in one declaration
padding-bottom	Sets the bottom padding of an element
padding-left	Sets the left padding of an element
padding-right	Sets the right padding of an element
padding-top	Sets the top padding of an element

Example: 
<html>
<head>
<style>
h4
{
padding:2cm;
}
h5
{
padding:0.5cm 3cm;
}
</style>
</head>
<body>
<h4>This text has equal padding on each side.</h4>
<h5>This text has a top and bottom padding of 0.5cm</h5>
</body>
</html>
---------------------------------------------------------------------------------------------------------------------------------------------------------
CSS - Cursors:
The cursor property of CSS allows you to specify the type of cursor that should be displayed to the user.
auto		Shape of the cursor depends on the context area it is over. 
crosshair 		A crosshair or plus sign
default	  	An arrow
pointer   		A pointing hand 
move	  	The I bar
e-resize  		The cursor indicates that an edge of a box is to be moved 
ne-resize 		The cursor indicates that an edge of a box is to be moved up 
nw-resize		The cursor indicates that an edge of a box is to be moved up 
n-resize se-resize 	moved down and sw-resize moved down and left 
s-resize		moved down (south)
w-resize		moved left (west)
text		The I bar
wait		An hour glass
help		A question mark or balloon	


Examples:
<p>Move the mouse over the words to see the cursor change:</p>
<div style="cursor:auto">Auto</div>
<div style="cursor:crosshair">Crosshair</div>
<div style="cursor:default">Default</div>
<div style="cursor:pointer">Pointer</div>
<div style="cursor:move">Move</div>
<div style="cursor:e-resize">e-resize</div>
<div style="cursor:ne-resize">ne-resize</div>
<div style="cursor:nw-resize">nw-resize</div>
<div style="cursor:n-resize">n-resize</div>
<div style="cursor:se-resize">se-resize</div>
<div style="cursor:sw-resize">sw-resize</div>
<div style="cursor:s-resize">s-resize</div>
<div style="cursor:w-resize">w-resize</div>
<div style="cursor:text">text</div>
<div style="cursor:wait">wait</div>
<div style="cursor:help">help</div>

What are Pseudo-Elements?
A CSS pseudo-element is used to style specified parts of an element. Style the first letter, or line, of an element, Insert content before, or after, the content of an element.

Syntax
selector::pseudo-element 
{
property:value;
}

The ::first-line Pseudo-element
It is used to add a special style to the first line of a text.

Example:
<head>
<style>
p::first-line 
{
color: #ff00ff;
font-variant: small-caps;
}
</style>
</head>
<body>
<p>You can use the ::first-line pseudo-element to add a special effect to the first line of a text. Some more text. And even more, and more, and more, and more, and more, and more, and more, and more, and more, and more, and more, and more.</p>
</body>

The ::first-letter Pseudo-element
The ::first-letter pseudo-element is used to add a special style to the first letter of a text.

Example:
<head>
<style>
p::first-letter 
{
color: #ff0000;
font-size: xx-large;
}
</style>
</head>
<body>
<p>You can use the ::first-letter pseudo-element to add a special effect to the first character of a text!</p>
</body>

CSS - The ::before Pseudo-element
The ::before pseudo-element can be used to insert some content before the content of an element.

Example:
<head>
<style>
h1::before {
content: url(smiley.png);
}
</style>
</head>
<body>
<h1>This is a heading</h1>
<p>The ::before pseudo-element inserts content before the content of an element.</p>
</body>

CSS - The ::after Pseudo-element
The ::after pseudo-element can be used to insert some content after the content of an element.

Example:
<head>
<style>
h1::after {
content: url(smiley.png);
}
</style>
</head>
<body>
<h1>This is a heading</h1>
<p>The ::after pseudo-element inserts content after the content of an element.</p>
</body>

CSS - The ::selection Pseudo-element
The ::selection pseudo-element matches the portion of an element that is selected by a user.

Example:
<head>
<style>
::-moz-selection { /* Code for Firefox */
    color: red;
    background: yellow;
}

::selection {
    color: red;
    background: yellow;
}
</style>
</head>
<body>
<h1>Select some text on this page:</h1>
<p>This is a paragraph.</p>
<div>This is some text in a div element.</div>
</body>


Advanced Cascading Style Sheets
CSS3 Backgrounds
CSS3 contains several new background properties, which allow greater control of the background element.

Property		Description	
background-size	Specifies the size of the background images
background-origin	Specifies the positioning area of the background images	
background-clip	Specifies the painting area of the background images	

background-size:
The background-size property specifies the size of the background image. Before CSS3, the background image size was determined by the actual size of the image. In CSS3 it  is possible to specify the size of the background image, which allows us to re-use background images in different contexts.

Syntax
background-size: length|percentage|cover|contain;

Example:
<!DOCTYPE HTML>
<html lang="en-US">
<head>
<meta charset=utf-8>
<title>CSS3 Examples</title>
<style type="text/css"> 
body
{
background:url(img_flwr.gif);
background-size:80px 60px;
background-repeat:no-repeat;
padding-top:40px;
}
</style>
</head>
<body>
<p>
CSS-Image
</p>
<p>Original image: <img src="img_flwr.gif" alt="Flowers" width="250" height="200" /></p>
</body>
</html>

Example:(Stretch the background-image)
<!DOCTYPE HTML>
<html lang="en-US">
<head>
<meta charset=utf-8>
<title>CSS3 Examples</title>
<style type="text/css"> 
div
{
background:url(img_flwr.gif);
background-size:100% 100%;
-moz-background-size:100% 100%;
background-repeat:no-repeat;
}
</style>
</head>
<body>
<div>

With CSS you define the colors and sizes in "styles". Then as you write your documents you refer to the styles. Therefore: if you change a certain style it will change the look of your entire site.

Another big advantage is that CSS offers much more detailed attributes than plain HTML for defining the look and feel of your site.

    CSS stands for Cascading Style Sheets
    Styles define how to display HTML elements
    Styles were added to HTML 4.0 to solve a problem
    External Style Sheets can save a lot of work
    External Style Sheets are stored in CSS files

</div>
<p></p>
<div>
With CSS you define the colors and sizes in "styles". Then as you write your documents you refer to the styles. Therefore: if you change a certain style it will change the look of your entire site.

Another big advantage is that CSS offers much more detailed attributes than plain HTML for defining the look and feel of your site.

    CSS stands for Cascading Style Sheets
    Styles define how to display HTML elements
    Styles were added to HTML 4.0 to solve a problem
    External Style Sheets can save a lot of work
    External Style Sheets are stored in CSS files
</div>
</body>
</html>

CSS3 Multiple Background Images
CSS3 allows you to use several background images for an element.

Syntax:
background-image:url(img1),url(img2);


Example:
<!DOCTYPE HTML>
<html lang="en-US">
<head>
<meta charset=utf-8>
<title>CSS3 Examples</title>
<style type="text/css"> 
body
{
background-image:url(img_flwr.gif),url(xmas-tree.gif);
}
</style>
</head>
<body>
</body>
</html>

background-clip: This property specifies the painting area of the background.

Syntax:
background-clip: border-box|padding-box|content-box;

Example:
<!DOCTYPE HTML>
<html lang="en-US">
<head>
<meta charset=utf-8>
<title>CSS3 Examples</title>
<style> 
div
{
width:300px;
height:300px;
padding:50px;
background-color:lightblue;
background-clip:content-box;
border:4px solid #FF0000;
text-align:justify;
}
</style>
</head>
<body>
<div>
Cascading Style Sheets were developed as a means for creating a consistent approach to providing style information for web documents. CSS has various levels and profiles. Each level of CSS builds upon the last. CSS3 has all advance features.
<p> Cascading Style Sheets were developed as a means for creating a consistent approach to providing style information for web documents. typically adding new features and typically denoted as CSS 1, CSS 2, CSS 3, and CSS 4.  </p>
</div>
</body>
</html>

Note: border porperty change to dotted and observe output.

background-origin Property:
The background-origin property specifies, what the background-position property should be relative to.

Syntax
background-origin: padding-box|border-box|content-box;

Example:
<!DOCTYPE HTML>
<html lang="en-US">
<head>
<meta charset=utf-8>
<title>CSS3 Examples</title>
<style> 
div
{
border:2px solid red;padding:30px;
background-image:url('chrome.png');
background-repeat:no-repeat;
background-position:left;
background-origin:border-box;
}
</style>
</head>
<body>
<div>
Google Chrome is a browser that combines a minimal design with sophisticated technology to make the Web faster, safer, and easier. Use one box for everything type in the address bar and get suggestions for both search and Web pages. 
</div>
</body>
</html>
---------------------------------------------------------------------------------------------------------------------------------------------------
background-clip: This property specifies the painting area of the background.

Syntax:
background-clip: border-box|padding-box|content-box;

Example:
<!DOCTYPE HTML>
<html lang="en-US">
<head>
<meta charset=utf-8>
<title>CSS3 Examples</title>
<style> 
div
{
width:300px;
height:300px;
padding:50px;
background-color:lightblue;
background-clip:content-box;
border:4px solid #FF0000;
text-align:justify;
}
</style>
</head>
<body>
<div>
Cascading Style Sheets were developed as a means for creating a consistent approach to providing style information for web documents. CSS has various levels and profiles. Each level of CSS builds upon the last. CSS3 has all advance features.
<p> Cascading Style Sheets were developed as a means for creating a consistent approach to providing style information for web documents. typically adding new features and typically denoted as CSS 1, CSS 2, CSS 3, and CSS 4.  </p>
</div>
</body>
</html>

Note: border porperty change to dotted and observe output.

background-origin Property:
The background-origin property specifies, what the background-position property should be relative to.

Syntax
background-origin: padding-box|border-box|content-box;

Example:
<!DOCTYPE HTML>
<html lang="en-US">
<head>
<meta charset=utf-8>
<title>CSS3 Examples</title>
<style> 
div
{
border:2px solid red;padding:30px;
background-image:url('chrome.png');
background-repeat:no-repeat;
background-position:left;
background-origin:border-box;
}
</style>
</head>
<body>
<div>
Google Chrome is a browser that combines a minimal design with sophisticated technology to make the Web faster, safer, and easier. Use one box for everything type in the address bar and get suggestions for both search and Web pages. 
</div>
</body>
</html>

CSS3 Borders
With CSS3, you can create rounded borders, add shadow to boxes, and use an image as a border - without using a design program, like Photoshop. following border properties:

1. border-radius
2. box-shadow
3. border-image


CSS3 Rounded Corners
Adding rounded corners in CSS2 was tricky. We had to use different images for each corner. In CSS3, creating rounded corners is easy. In CSS3, the border-radius property is used to create rounded corners:


New Border Properties
Property		Description	
border-image	A shorthand property for setting all the border-image-*properties	
border-radius	A shorthand property for setting all the four border-*-radius properties
box-shadow	Attaches one or more drop-shadows to the box

border-radius: It  is a shorthand property for setting the four border-*-radius properties

Syntax
border-radius: 1-4 length|% /px  1-4 length|%;

JavaScript syntax:	
object.style.borderRadius="5px"

Example:
<!DOCTYPE HTML>
<html lang="en-US">
<head>
<meta charset=utf-8>
<title>CSS3 Examples</title>
<style type="text/css"> 
div
{
border:2px solid #b2b2b2;
padding:10px 40px; 
background:#ccddcc;
width:300px;
border-radius:25px;
</style>
</head>
<body>
<div>The border-radius property allows you to add rounded corners to elements.</div>
</body>
</html>

CSS3 Box Shadow
The box-shadow property attaches one or more drop-shadows to the box.

Syntax
box-shadow: h-shadow v-shadow blur spread-color inset;

Example:
<!DOCTYPE HTML>
<html lang="en-US">
<head>
<meta charset=utf-8>
<title>CSS3 Examples</title>
<style type="text/css"> 
div
{
width:300px;height:100px;
background-color:red;
box-shadow: 10px 10px 5px #990099;
}
</style>
</head>
<body>
<div></div>
</body>
</html>

Example
<!DOCTYPE HTML>
<html lang="en-US">
<head>
<meta charset=utf-8>
<title>CSS3 Examples</title>
<style type="text/css"> 
div
{
width:300px;height:100px;
background-color:yellow;
box-shadow: 10px 10px 50px 20px pink inset
}
</style>
</head>
<body>
<div></div>
</body>
</html>

CSS3 Border Image
The border-image property is a shorthand property for setting the border-image-source, border-image-slice, border-image-width, border-image-outset and border-image-repeat properties.

Syntax
border-image: source slice width outset repeat;

Value				Description	
border-image-source		The path to the image to be used as a border	
border-image-slice			The inward offsets of the image-border	
border-image-width			The widths of the image-border	
border-image-outset		The amount by which the border image area extends beyond 						the border box	
border-image-repeat		Whether the image-border should be repeated,rounded or 						stretched

Example:
<!DOCTYPE HTML>
<html lang="en-US">
<head>
<meta charset=utf-8>
<title>CSS3 Examples</title>
<style type="text/css"> 
div
{
border:15px solid transparent;
width:250px;
padding:10px 20px;
}
#round
{
border-image:url(border.png) 30 30 round;
}
#stretch
{
border-image:url(border.png) 30 30 stretch;
}
</style>
</head>
<body>
<div id='round'>Here, the image is tiled (repeated) to fill the area.</div>
<br>
<div id='stretch'>Here, the image is stretched to fill the area.</div>
</body>
</html>



CSS3 text-overflow Property:
The text-overflow property specifies what should happen when text overflows the containing element.

Syntax
text-overflow: clip|ellipsis;

JavaScript syntax:	
object.style.textOverflow="ellipsis"

Value	Description	
clip	Clips the text	
ellipsis	Render an ellipsis ("...") to represent clipped text	


Example:
<!DOCTYPE HTML>
<html lang="en-US">
<head>
<meta charset=utf-8>
<title>CSS3 Examples</title>
<style> 
div.test
{
white-space:nowrap; 
width:12em; 
overflow:hidden; 
border:1px solid #ff0000;
}
</style>
</head>
<body>
<p>This div uses "text-overflow:ellipsis":</p>
<div class="test" style="text-overflow:ellipsis;">This is some long text that will not fit in the box</div>
<p>This div uses "text-overflow:clip":</p>
<div class="test" style="text-overflow:clip;">This is some long text that will not fit in the box</div>
</body>
</html>

Text-Shadow:
It applies shadow to text. You specify the horizontal shadow, the vertical shadow, the blur distance, and the color of the shadow:

Syntax
text-shadow: h-shadow v-shadow blur color;

JavaScript syntax:	
object.style.textShadow="2px 2px #ff0000"

Example:
<!DOCTYPE HTML>
<html lang="en-US">
<head>
<meta charset=utf-8>
<title>CSS3 Examples</title>
<style type="text/css">
h1
{
text-shadow: 5px 5px 5px #FF0011;
}
</style>
</head>
<body>
<h1>NareshTechnologies!</h1>
</body>
</html>

Example:
<!DOCTYPE HTML>
<html lang="en-US">
<head>
<meta charset=utf-8>
<title>CSS3 Examples</title>
<style type="text/css">
h1
{
text-shadow:-10px -10px red
}
</style>
</head>
<body>
<h1>NareshTechnologies!</h1>
</body>
</html>


CSS3 word-break Property
The word-break property specifies line breaking rules for non-CJK scripts.

Note: 
CJK scripts are Chinese, Japanese and Korean ("CJK") scripts.

Syntax
word-break: normal|break-all|;


Value		Description
normal		Breaks non-CJK scripts according to their own rules
break-all		Lines may break between any two characters for non-CJK scripts

Example:
<!DOCTYPE HTML>
<html lang="en-US">
<head>
<meta charset=utf-8>
<title>CSS3 Examples</title>
<style type='text/css'> 
p.test1
{
width:11em; 
border:1px solid #ff0000;
word-break:hyphenate;
}
p.test2
{
width:11em; 
border:1px solid #0000ff;
word-break:break-all;
}
</style>
</head>
<body>
<p class="test1"> This paragraph contains some text. This line will-break-at-hyphenates.</p>
<p class="test2"> This paragraph contains some text: The lines will break at any character.</p>
</body>
</html>

CSS3 word-wrap Property
It allows long words to be able to be broken and wrap onto the next line

JavaScript syntax:	
object.style.wordWrap="break-word"

Syntax
word-wrap: normal|break-word;

Value		Description
normal		Break words only at allowed break points
break-word	Allows unbreakable words to be broken

Example:
<!DOCTYPE HTML>
<html lang="en-US">
<head>
<meta charset=utf-8>
<title>CSS3 Examples</title>
<style type="text/css"> 
p.test
{
width:11em; 
border:1px solid #00dd00;
word-wrap:break-word;
}
</style>
</head>
<body>
<p class="test"> This paragraph contains a very long word: thisisaveryveryveryveryveryverylongword. The long word will break and wrap to the next line.</p>
</body>
</html>
--------------------------------------------------------------------------------------------------------------------------------------------------
CSS3 Web Fonts:
@font-face
The CSS3 @font-face Rule:Your "own" fonts are defined in the CSS3 @font-face rule. Before CSS3, web designers had to use fonts that were already installed on the user's computer. With CSS3, web designers can use whatever font they likes.  

Note: 
Firefox, Chrome, Safari, and Opera support fonts of type .ttf (True Type Fonts) and .otf (OpenType Fonts).

Note: 
Internet Explorer 9+ supports the new @font-face rule, but it only supports fonts of type .eot (Embedded OpenType).

Syntax:
@font-face
{
font-properties
}

Different Font Formats
TrueType Fonts (TTF)
TrueType is a font standard developed in the late 1980s, by Apple and Microsoft.

OpenType Fonts (OTF)
OpenType is a format for scalable computer fonts. It was built on TrueType, and is a registered trademark of Microsoft. 

The Web Open Font Format (WOFF)
WOFF is a font format for use in web pages. It was developed in 2009, and is now a W3C Recommendation. All Browsers Compatable

SVG Fonts/Shapes
SVG fonts allow SVG to be used as glyphs when displaying text. 

Embedded OpenType Fonts (EOT)
EOT fonts are a compact form of OpenType fonts designed by Microsoft for use as embedded fonts on web pages.

CSS3 Font Descriptors
The following table lists all the font descriptors that can be defined inside the @font-face rule:

Example:
<!DOCTYPE HTML>
<head>
<style type="text/css"> 
@font-face
{
font-family: myFirstFont;
src: url('Sansation_Light.ttf')    
}
div
{
font-family:myFirstFont;
}
</style>
</head>
<body>
<div>
With CSS3, We can declare user defined fonts as per the requirements.
</div>
</body>

Example:
<!DOCTYPE HTML>
<head>
<style type="text/css"> 
@font-face
{
font-family: myFirstFont;
src: url('Sansation_Light.ttf')   
}
@font-face
{
font-family: myFirstFont;
src: url('Sansation_Bold.ttf')    
font-weight:bold;
}
div
{
font-family:myFirstFont;
}
</style>
</head>
<body>
<div>
With CSS3, websites can <b>finally</b> use fonts other than the pre-selected "web-safe" fonts.
</div>
</body>

CSS3 Transitions
With CSS3, we can add an effect when changing from one style to another, without using Flash animations or JavaScripts.

A transition is such a property of CSS3, which is used to animate the object, without using flash or any other animation application. With this feature of CSS3 You can change the shape and size of your object with animated effects. 

How does it work?
CSS3 transitions are effects that let an element gradually change from one style to another.

Transition Properties
Property		Description	
transition		Shorthand property for setting all transition properties 
transition-duration	Defines the length of time that a transition takes.Default 0	
transition-delay 	Specifies when the transition effect will start

CSS3 transition Property:
The transition property is a shorthand property for the four transition properties: transition-property, transition-duration, transition-timing-function, and transition-delay.

Syntax
transition: property duration timing-function delay;

Example:
<!DOCTYPE HTML>
<html lang="en-US">
<head>
<meta charset=utf-8>
<title>CSS3 Examples</title>
<style type="text/css">
div
{
width:100px;
height:100px;
background:blue;
transition:width 2s;
}
div:hover
{
width:300px;
}
</style>
</head>
<body>
<div></div>
<p>Hover over the div element above, to see the transition effect.</p>
</body>
</html>

CSS3 transition-duration Property
It specifies how many seconds (s) or milliseconds (ms) a transition effect takes to complete.

Syntax
transition-duration: time;

Value	Description
time	Specifies how many seconds or milliseconds a transition effect takes to 		complete. 
	
Example:
<!DOCTYPE HTML>
<html lang="en-US">
<head>
<meta charset=utf-8>
<title>CSS3 Examples</title>
<style type="text/css">
div
{
width:100px;
height:100px;
background:blue;
transition:width 2s;
transition-duration:5s;
}
div:hover
{
width:300px;
}
</style>
</head>
<body>
<div></div>
<p>Hover over the div element above, to see the transition effect.</p>
</body>
</html>

CSS3 transition-delay Property
It specifies when the transition effect will start. The transition-delay value is defined in seconds (s) or milliseconds (ms).

Syntax
transition-delay: time;

Value	Description
time	Specifies the number of seconds or milliseconds to wait before the transition 		effect will start.

Example:
<!DOCTYPE HTML>
<html lang="en-US">
<head>
<meta charset=utf-8>
<title>CSS3 Examples</title>
<style type="text/css">
div
{
width:100px;
height:100px;
background:blue;
transition:width 2s;
transition-duration:5s;
transition-delay:2s;
}
div:hover
{
width:300px;
}
</style>
</head>
<body>
<div></div>
<p>Hover over the div element above, to see the transition effect.</p>
<p><b>Note:</b> The transition effect will wait 2 seconds before starting.</p>
</body>
</html>

CSS3 Animations
With CSS3, we can create animations, which can replace animated images, Flash animations, and JavaScripts in many web pages. With this feature of CSS3 You can change the object into one style to another style in animated way.

@keyframes rule.
The @keyframes rule is where the animation is created. Specify a CSS style inside the @keyframes rule and the animation will gradually change from the current style to the new style.

CSS3 animation
When the animation is created in the @keyframe, bind it to a selector, otherwise the animation will have no effect. Bind the animation to a selector by specifying at least these two CSS3 animation properties:

    1 Specify the name of the animation
    2 Specify the duration of the animation

What are Animations in CSS3?
An animation is an effect that lets an element gradually change from one style to another.You can change as many styles you want, as many times you want. Specify when the change will happen in percent, or the keywords "from" and "to", which is the same as 0% and 100%. 0% is the beginning of the animation, 100% is when the animation is complete. 

CSS3 Animation Properties
Property		Description	
@keyframes	Specifies the animation	
animation		A shorthand property for all the the animation properties
animation-name	Specifies the name of the @keyframes animation	
animation-duration	Specifies how many seconds or milliseconds an animation takes to 				complete one cycle
animation-direction 	Specifies whether or not the animation should play in reverse on 				alternate cycles
animation-delay 	Specifies when the animation will start
animation-iteration-count  Specifies the number of times an animation should be played


CSS3 Animation Properties
animation
animation-name
animation-duration	
animation-direction 
animation-delay 
animation-iteration-count

CSS3 @keyframes Rule
With the @keyframes rule, you can create animations. The animation is created by gradually changing from one set of CSS styles to another. During the animation, you can change the set of CSS styles many times.

Example:
<!DOCTYPE HTML>
<html lang="en-US">
<head>
<meta charset=utf-8>
<title>CSS3 Examples</title>
<style type="text/css">
div
{
width:100px;
height:100px;
background:red;
position:relative;
animation:mymove 5s infinite;
}
@keyframes mymove
{
from {top:0px;}
to {top:200px;}
}
@-moz-keyframes mymove /* Firefox */
{
from {top:0px;}
to {top:200px;}
}
</style>
</head>
<body>
<div></div>
</body>
</html>

CSS3 animation Property:
The animation property is a shorthand property for six of the animation properties: animation-name, animation-duration, animation-timing-function, animation-delay, animation-iteration-count, and animation-direction.

Syntax
animation: name duration timing-function delay iteration-count direction;

Example:
<!DOCTYPE HTML>
<html lang="en-US">
<head>
<meta charset=utf-8>
<title>CSS3 Examples</title>
<style type='text/css'> 
div
{
width:100px;
height:100px;
background:red;
position:relative;
animation:mymove 5s infinite;
}
@keyframes mymove
{
from {left:0px;}
to {left:200px;}
}
@-moz-keyframes mymove /*Firefox*/
{
from {left:0px;}
to {left:200px;}
}
</style>
</head>
<body>
<div></div>
</body>
</html>
-------------------------------------------------------------------------------------------------------------------------------------------------------------
CSS3 animation-duration Property:
It defines how many seconds or milliseconds an animation takes to complete one cycle.

Syntax
animation-duration: time;

Value		Description	
time		Specifies the length an animation takes to finish. Default value is 0, 		meaning there will be no animation

Example:
<!DOCTYPE HTML>
<html lang="en-US">
<head>
<meta charset=utf-8>
<title>CSS3 Examples</title>
<style type='text/css'> 
div
{
width:100px;
height:100px;
background:red;
position:relative;
animation:mymove infinite;
animation-duration:1s;
}
@keyframes mymove
{
from {top:0px;}
to {top:200px;}
}
</style>
</head>
<body>
<div></div>
</body>
</html>

CSS3 animation-iteration-count Property
It defines how many times an animation should be played.

Syntax
animation-iteration-count: value;

Value		Description
n		A number that defines how many times an animation 				should be played
infinite		Specifies that the animation should be played infinite times 				(for ever)

Example:
<!DOCTYPE HTML>
<html lang="en-US">
<head>
<meta charset=utf-8>
<title>CSS3 Examples</title>
<style type='text/css'> 
div
{
width:100px;
height:100px;
background:red;
position:relative;
animation:mymove 5s;
animation-iteration-count:3;
}
@keyframes mymove
{
from {top:0px;}
to {top:200px;}
}
@-moz-keyframes mymove /* Firefox */
{
from {top:0px;}
to {top:200px;}
}
</style>
</head>
<body>
<div></div>
</body>
</html>

CSS3 animation-direction Property
The animation-direction property defines whether or not the animation should play in reverse on alternate cycles. If the animation-direction value is "alternate", the animation will be played as normal every odd time (1,3,5,etc..) and backwards every even time (2,4,6,etc...).

Syntax
animation-direction: value;

Value	Description	
normal	Default value.The animation should be played as normal	
alternate	The animation should play in reverse on alternate cycles	

Example:
<!DOCTYPE HTML>
<html lang="en-US">
<head>
<meta charset=utf-8>
<title>CSS3 Examples</title>
<style type='text/css'> 
div
{
width:100px;
height:100px;
background:red;
position:relative;
animation:myfirst 5s infinite;
animation-direction:alternate;
}
@keyframes myfirst
{
0%   {background:red; left:0px; top:0px;}
25%  {background:yellow; left:200px; top:0px;}
50%  {background:blue; left:200px; top:200px;}
75%  {background:green; left:0px; top:200px;}
100% {background:red; left:0px; top:0px;}
}
@-moz-keyframes myfirst /* Firefox */
{
0%   {background:red; left:0px; top:0px;}
25%  {background:yellow; left:200px; top:0px;}
50%  {background:blue; left:200px; top:200px;}
75%  {background:green; left:0px; top:200px;}
100% {background:red; left:0px; top:0px;}
}
</style>
</head>
<body>
<div></div>
</body>
</html>
</body>
</html>


CSS3 Multiple Columns
You can create multiple columns for laying out text - like in newspapers!
1. column-count
2. column-gap 
3. column-rule
5. column-rule-color
6. column-rule-style
7. column-rule-width
8. column-span
9. column-width
10. columns

New Multiple Columns Properties
Property		Description	
column-count	Specifies the no. of columns an element should bedivided.	
column-gap	Specifies the gap between the columns	
column-rule	A shorthand property for setting all the column-rule-*Propers.	
column-rule-color	Specifies the color of the rule between columns	
column-rule-style	Specifies the style of the rule between columns	
column-rule-width	Specifies the width of the rule between columns	
column-span	Specifies how many columns an element should span across	
column-width	Specifies the width of the columns	
columns		A shorthand property for setting column-width,column-count

CSS3 Create Multiple Columns
The column-count property specifies the number of columns an element should be divided into:


Syntax
column-count: number|auto;

Value	Description	
number	The optimal number of columns into which the content of the element will be flowed	
auto	The number of columns will be determined by other properties 

Example:
<!DOCTYPE HTML>
<html lang="en-US">
<head>
<meta charset=utf-8>
<title>CSS3 Examples</title>
<style type="text/css">
.newspaper
{
-moz-column-count:3;
column-count:3;
}
</style>
</head>
<body>
<div class="newspaper">
About RIAs
Rich Internet applications (RIAs) offer a rich, engaging experience that improves user satisfaction and increases productivity. Using the broad reach of the Internet, RIAs can be deployed across browsers and desktops.
Silverlight is a new cross-browser, cross-platform implementation of the .NET Framework for building and delivering the next generation of media experiences and Rich Interactive Applications(RIA) for the web. It runs in all popular browsers, including Microsoft Internet Explorer, Mozilla Firefox, Apple Safari, Opera. The plugin required to run Silverlight is very small in size hence gets installed very quickly.
</div>
</body>
</html>

CSS3&4 Specify the Gap Between Columns
The column-gap property specifies the gap between the columns:

Syntax
column-gap: length|normal;

Value	Description	
length	A specified length that will set the gap between the columns	
normal	Specifies a normal gap between the columns.

Example:
<!DOCTYPE HTML>
<html lang="en-US">
<head>
<meta charset=utf-8>
<title>CSS3 Examples</title>
<style type="text/css">
.newspaper
{
-moz-column-count:3;
column-count:3;
-moz-column-gap:40px;
column-gap:40px;
}
</style>
</head>
<body>
<div class="newspaper">
About RIAs
Rich Internet applications (RIAs) offer a rich, engaging experience that improves user satisfaction and increases productivity. Using the broad reach of the Internet, RIAs can be deployed across browsers and desktops.
Silverlight is a new cross-browser, cross-platform implementation of the .NET Framework for building and delivering the next generation of media experiences and Rich Interactive Applications(RIA) for the web. It runs in all popular browsers, including Microsoft Internet Explorer, Mozilla Firefox, Apple Safari, Opera. The plugin required to run Silverlight is very small in size hence gets installed very quickly.
</div>
</body>
</html>

CSS3 column-rule Property
It is a shorthand property for setting all the column-rule-* properties. The column-rule property sets the width, style, and color of the rule between columns.

Syntax
column-rule: column-rule-width column-rule-style column-rule-color;

Value		Description
column-rule-width	Sets the width of the rule between columns
column-rule-style	Sets the style of the rule between columns
column-rule-color	Sets the color of the rule between columns

Example:
<!DOCTYPE HTML>
<html lang="en-US">
<head>
<meta charset=utf-8>
<title>CSS3 Examples</title>
<style type="text/css">
.newspaper
{
-moz-column-count:3; 
column-count:3;

-moz-column-gap:40px;
column-gap:40px;

-moz-column-rule:4px outset #ff00ff;
column-rule:4px outset #ff00ff;
}
</style>
</head>
<body>
<div class="newspaper">
About RIAs Rich Internet applications (RIAs) offer a rich, engaging experience that improves user satisfaction and increases productivity. Using the broad reach of the Internet, RIAs can be deployed across browsers and desktops.
Silverlight is a new cross-browser, cross-platform implementation of the .NET Framework for building and delivering the next generation of media experiences and Rich Interactive Applications(RIA) for the web. It runs in all popular browsers, including Microsoft Internet Explorer, Mozilla Firefox, Apple Safari, Opera. The plugin required to run Silverlight is very small in size hence gets installed very quickly.
</div>
</body>
</html>



CSS3 column-rule-color Property
The column-rule-color property specifies the color of the rule between columns.

Syntax
column-rule-color: color;

Value		Description	
color		Specifies the color of the rule. 

Example:
<!DOCTYPE HTML>
<html lang="en-US">
<head>
<meta charset=utf-8>
<title>CSS3 Examples</title>
<style type="text/css">
.newspaper
{
column-count:3;
-moz-column-count:3;
column-gap:40px;
-moz-column-gap:40px;
column-rule-style:outset;
-moz-column-rule-style:outset;
column-rule-color:#ff0000;
-moz-column-rule-color:#ff0000;
}
</style>
</head>
<body>
<body>
<div class="newspaper">
About RIAs Rich Internet applications (RIAs) offer a rich, engaging experience that improves user satisfaction and increases productivity. Using the broad reach of the Internet, RIAs can be deployed across browsers and desktops.
Silverlight is a new cross-browser, cross-platform implementation of the .NET Framework for building and delivering the next generation of media experiences and Rich Interactive Applications(RIA) for the web. It runs in all popular browsers, including Microsoft Internet Explorer, Mozilla Firefox, Apple Safari, Opera. The plugin required to run Silverlight is very small in size hence gets installed very quickly.
</div>
</body>
</html>

CSS3 column-rule-style Property
The column-rule-style property specifies the style of the rule between columns.

Syntax
column-rule-style: none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset;

Value	Description	
none	Defines no rule	
hidden	Defines a hidden rule	
dotted	Defines a dotted rule	
dashed	Defines a dashed rule	
solid	Defines a solid rule	
double	Defines a double rule	
groove	Specifies a 3D grooved rule. 
ridge	Specifies a 3D ridged rule. 
inset	Specifies a 3D inset rule. 
outset	Specifies a 3D outset rule. 

Example:
<!DOCTYPE HTML>
<html lang="en-US">
<head>
<meta charset=utf-8>
<title>CSS3 Examples</title>
<style type="text/css">
.newspaper
{
-moz-column-count:3;
column-count:3;

-moz-column-gap:40px;
column-gap:40px;

-moz-column-rule-style:dotted;
column-rule-style:dotted;
}
</style>
</head>
<body>
<body>
<div class="newspaper">
About RIAs Rich Internet applications (RIAs) offer a rich, engaging experience that improves user satisfaction and increases productivity. Using the broad reach of the Internet, RIAs can be deployed across browsers and desktops.
Silverlight is a new cross-browser, cross-platform implementation of the .NET Framework for building and delivering the next generation of media experiences and Rich Interactive Applications(RIA) for the web. It runs in all popular browsers, including Microsoft Internet Explorer, Mozilla Firefox, Apple Safari, Opera. The plugin required to run Silverlight is very small in size hence gets installed very quickly.
</div>
</body>
</html>

CSS3 column-rule-width Property
The column-rule-width property specifies the width of the rule between columns.

Syntax
column-rule-width: thin|medium|thick|length;

Value	Description
thin	Defines a thin rule	
medium	Defines a medium rule	
thick	Defines a thick rule	
length	Specifies the width of the rule

Example:
<!DOCTYPE HTML>
<html lang="en-US">
<head>
<meta charset=utf-8>
<title>CSS3 Examples</title>
<style type="text/css">
.newspaper
{
-moz-column-count:4; 
column-count:4;

-moz-column-gap:40px;
column-gap:40px;

-moz-column-rule-style:outset;
column-rule-style:outset;

-moz-column-rule-width:3px; 
column-rule-width:3px;
}
</style>
</head>
<body>
<body>
<div class="newspaper">
About RIAs Rich Internet applications (RIAs) offer a rich, engaging experience that improves user satisfaction and increases productivity. Using the broad reach of the Internet, RIAs can be deployed across browsers and desktops.
Silverlight is a new cross-browser, cross-platform implementation of the .NET Framework for building and delivering the next generation of media experiences and Rich Interactive Applications(RIA) for the web. It runs in all popular browsers, including Microsoft Internet Explorer, Mozilla Firefox, Apple Safari, Opera. The plugin required to run Silverlight is very small in size hence gets installed very quickly.
</div>
</body>
</html>

CSS3 column-span Property
The column-span property specifies how many columns an element should span across.

Syntax
column-span: 1|all;

Value	Description	
1	The element should span across one column	
all	The element should span across all columns

Example:
<!DOCTYPE HTML>
<html lang="en-US">
<head>
<meta charset=utf-8>
<title>CSS3 Examples</title>
<style type="text/css">
.newspaper
{
-webkit-column-count:3;
column-count:3;
}
h2
{
-webkit-column-span:all;
column-span:all;
}
</style>
</head>
<body>
<div class="newspaper">
<h2>RIAs Rich Internet applications (RIAs) in Web Environment</h2>
About RIAs Rich Internet applications (RIAs) offer a rich, engaging experience that improves user satisfaction and increases productivity. Using the broad reach of the Internet, RIAs can be deployed across browsers and desktops.
Silverlight is a new cross-browser, cross-platform implementation of the .NET Framework for building and delivering the next generation of media experiences and Rich Interactive Applications(RIA) for the web. It runs in all popular browsers, including Microsoft Internet Explorer, Mozilla Firefox, Apple Safari, Opera. The plugin required to run Silverlight is very small in size hence gets installed very quickly.
</div>
</body>
</html>

CSS3 column-width Property
The column-width property specifies the width of the columns.

Syntax
column-width: auto|length;

Value	Description	
auto	The column width will be determined by the browser	
length	A length that specifies the width of the columns

Example:
<!DOCTYPE HTML>
<html lang="en-US">
<head>
<meta charset=utf-8>
<title>CSS3 Examples</title>
<style type="text/css">
.newspaper
{
-moz-column-width:100px; /* Firefox */
column-width:100px;
}
</style>
</head>
<body>
<div class="newspaper">
About RIAs Rich Internet applications (RIAs) offer a rich, engaging experience that improves user satisfaction and increases productivity. Using the broad reach of the Internet, RIAs can be deployed across browsers and desktops.
Silverlight is a new cross-browser, cross-platform implementation of the .NET Framework for building and delivering the next generation of media experiences and Rich Interactive Applications(RIA) for the web. It runs in all popular browsers, including Microsoft Internet Explorer, Mozilla Firefox, Apple Safari, Opera. The plugin required to run Silverlight is very small in size hence gets installed very quickly.
</div>
</body>
</html>

CSS3 columns Property
It is a shorthand property for setting column-width and column-count.

Syntax
columns: column-width column-count;

Value		Description
column-width	The width of the columns
column-count	The number of columns

Example:
<!DOCTYPE HTML>
<html lang="en-US">
<head>
<meta charset=utf-8>
<title>CSS3 Examples</title>
<style type="text/css">
.newspaper
{
columns:100px 3;
-moz-columns:100px 3;
}
</style>
</head>
<body>
<div class="newspaper">
About RIAs Rich Internet applications (RIAs) offer a rich, engaging experience that improves user satisfaction and increases productivity. Using the broad reach of the Internet, RIAs can be deployed across browsers and desktops.
Silverlight is a new cross-browser, cross-platform implementation of the .NET Framework for building and delivering the next generation of media experiences and Rich Interactive Applications(RIA) for the web. It runs in all popular browsers, including Microsoft Internet Explorer, Mozilla Firefox, Apple Safari, Opera. The plugin required to run Silverlight is very small in size hence gets installed very quickly.
</div>
</body>
</html>
------------------------------------------------------------------------------------------------------------------------------------------------
New Semantic/Structural Elements
HTML5 offers new elements for better structure:
Semantics are classified into the following three types:
1. General Semantics
2. Arabic Semantics
3. Chinese Semantics

1. General Semantics
1. <section> 		
2. <article> 		
3. <header> 		
4. <footer> 		
5. <hgroup> 		 
6. <aside> 		
7. <command> 
8. <details> 		
9. <summary> 	
10. <figure> 		
11. <figcaption> 	
12. <nav> 
13. <wbr> 		

2. Arabic Semantics
14. <bdi> 		
15. <bdo>		

3. Chinese Semantics
16. <ruby> 	
17. <rt> 		
18. <rp> 	


Tag 		Description
<section> 		Defines a section in a document
<article> 		Defines an article
<header> 		Defines a header for a document or section
<footer> 		Defines a footer for a document or section
<hgroup> 		Groups a set of <h1> to <h6> elements 
<aside> 		Defines content  of related surrounding content 
<command> 	Defines a command button
<details> 		Def. additional details that the user can view/hide
<summary> 	Defines a visible heading for a <details> element
<figure> 		Spe. self-contained content, like photos, code,listings, etc.
<figcaption> 	Defines a caption for a <figure> element
<nav> 		Defines navigation links
<wbr> 		Defines a possible line-break
<bdi> 		Isolates a part of text formated in a different direction 
<bdo>		It is used to override the current text direction
<ruby> 		Defines a ruby annotation(for East Asian typography)
<rt> 		Defines an explanation/pronunciation of characters 	
<rp> 		Defines what to show in browsers 


<section>
It defines sections in a document.Such as chapters, headers, footers, or any other sections of the document. It is a paired tag.

Syntax: 
<section>.........................</section>

Attributes:
Element-Specific Attributes None.

Example:
<!DOCTYPE html>
<html>
<body>
<section>
<article>
<header>CSS</header>
A style sheet consists of a list of rules. Each rule or rule-set consists of one or more selectors, and a declaration block. A declaration-block consists of a list of declarations in braces. Each declaration itself consists of a property, a colon (:), and a value. If there are multiple declarations in a block, a semi-colon (;) must be inserted to separate each declaration.
<footer> &copy; &reg; reserved W3C. </footer>
  </article>
</section>
<section>
  <h1>CSS3</h1>
<p>The development of CSS3 is going to be split up into ‘modules’. Some of these modules are: The Box Model Lists Module Hyperlink Presentation Speech Module Backgrounds and Borders Text Effects Multi-Column Layout.</p>
</section>
</body>
</html>

<header>
This element is used to display headers for subheadings,version information, navigational controls, etc. It is a paired tag.

Syntax: 
<header>------------------</header>

Attributes:
Element-Specific Attributes are None.

Note: 
A <header> tag cannot be placed within a <footer>

Example:
<!DOCTYPE html>
<html>
<body>
<article>
  <header>
  <h1>Search Engine Optimization</h1>
  </header>
  <p>As an Internet marketing strategy, SEO considers how search engines work, what people search for, the actual search terms or keywords typed into search engines and which search engines are preferred by their targeted audience</p>
</article>
</body>
</html>

<footer>
It is used for defining the footer of an HTML document or section. Footers usually contain information such as the author of the document, copyright information, links to terms of use, privacy policy, etc. It is a paired tag.

Syntax: <footer>------------------</footer>

Attributes:
Element-Specific Attributes are None.


Example:
<!DOCTYPE html>
<html>
<body>
<article>
<p>Rich Internet applications (RIAs) offer a rich, engaging experience that improves user satisfaction and increases productivity. </p>
<p>Using the broad reach of the Internet, RIAs can be deployed across browsers and desktops.</p>
</article>
<footer>
 &copy 2012 RIA Internet Apps &reg
</footer>
</body>
</html>

HTML5 <article> Tag:
It is used to represent an article. More specifically, the content within the <article> tag is independent from the other content on the site.This could be a forum post, a magazine or newspaper article, a blog entry etc. It is  a paired tag.

Syntax: <article>------------------</article>

Attributes:
Element-Specific Attributes None

Example1:
<article>
  <h4>A really awesome article</h4>
  <p>Lots of awesome text. It is good Article</p>
</article>

Example2:
<!DOCTYPE HTML>
<html lang="en-US">
<head>
<meta charset=utf-8>
<title>HTML5 article example</title>
</head>
<body>
<article>
<h1>HTML5 article element</h1>
<p>HTML5 article element represents independent item like a blog entry in an web document.</p>
</article>
</body>
</html>

Example2:
<!Doctype HTML>
<html lang="en-US">
<head>
<meta charset=utf-8>
<title>Example of article tag.</title>
</head>
<body>
<p><b>Example of article <article> tag in HTML5.</b></p>
<article>
<p>
It  is global services company that understands businesses and aims to deliver value to its customers through its software solutions and services. </p>
</article>
</body>
</html>

<hgroup>
It is typically used to group a set of one or more h1-h6 elements -to group,such as subheadings, alternative titles, or taglines. It is a paired tag.

Syntax: <hgroup> ---------</hgroup>

Attributes:
Element-Specific Attributes are None.

Example:
<!DOCTYPE html>
<html>
<body>
<hgroup>
<h1>Welcome to my NareshTech</h1>
<h2>All Web Technologies Train Here</h2>
<h3> like HTML CSS JS jQuery </h3>
</hgroup>
<p>The rest of the content...</p>
</body>
</html>

<aside>
It is used to represent content that is related to the surrounding content within an article or web page, but could still stand alone in its own right. It is a paired tag..!!

Syntax: <aside>-------------</aside>

Attributes:
Element-Specific Attributes --> None

Example:
<!DOCTYPE html>
<html lang="en-US">
<head>
<meta charset=utf-8>
</head>
<body>
<p>HTML5 is Web Environment or platform for future development</p>
<aside>
<h4>Cascading Style Sheets</h4>
<p>It is another advanced look and feel for designing.</p>
</aside>
</body>
</html>

Example:
<!DOCTYPE HTML>
<html lang="en-US">	
<head>
<meta charset=utf-8>
<title>
Good Example for ASIDE
</title>
</head>
<body>
<aside style="font-size:larger;font-style:italic;color:blue;float:right;width:120px;">
HTML5 is Web platform. It is collection of technologies. It is from WHATWG and W3C.
</aside>
<p>The aside element is new to HTML5 and it can be used in two different contexts. Basically, the context of the aside element is based on whether or not it inside or outside the article element.</p>
<p>The HTML article tag is used to represent an article. More specifically, the content within the article tag is independent from the other content on the site.This could be a forum post, a magazine or newspaper article, a blog entry, a user-submitted comment, an interactive widget or gadget, or any other independent item of content..</p>
</body>
</html>

<command>
It defines a command (a radiobutton, a checkbox, or a command button) that the user can invoke. It is a paired tag.

Syntax: 
<command>------------------</command>

Attributes:
Attribute 	Value 	Description
checked	checked Specifies that the command should be checked when the page loads. 	
disabled  disabled 	Specifies that the command should be disabled.
icon 	URL 	Specifies an image that represents the command.
label	Text 	Specifies the name of the command, as shown to the user.

Example:
<menu>
<command onclick="alert('Hello World')">
Click Me!</command>
</menu>

Example:
<!DOCTYPE HTML>
<html lang="en-US">
<head>
<meta charset=utf-8>
<title>
Good Example for Command
</title>
<script>

function save()

{

alert("Command...Success....");

}

</script>

</head>

<body>


<menu>

<input type="command"
label="Save" onclick="save()">Save</command>

</menu>


</body>

<details>
It can used to create an interactive widget that the user can open and close. The content of a <details> element should not be visible unless the open attribute is set. It is a paired tag.

Syntax: <details>------------------</details>

Attributes
Attribute 	Value 	Description
open 	open 	Specifies that the details should be visible (open) to the user

Example:
<!DOCTYPE HTML>
<html lang="en-US">
<head>
<meta charset=utf-8>
</head>
<body>
<details>
<summary>Copyright 1999-2012.</summary>
<p> - NareshiTech. All Rights Reserved.</p>
<p>All contents are related to IT resources and Training and Development</p>
</details>
</body>
</html>

Example
<!DOCTYPE HTML>
<html lang="en-US">
<head>
<meta charset=utf-8>
</head>
<body>
<details open="open">
<summary>Copyright 1999-2012.</summary>
<p> - NareshiTech. All Rights Reserved.</p>
<p>All contents are related to IT resources and Training and Development</p>
</details>
</body>
</html>

<summary>
It defines a visible heading for the <details> element. The heading can be clicked to view/hide the details. It is a paired tag.

Syntax: 
<summary>------------------</summary>

Note: 
It should be the first child element of the <details> element.

Attributes 
Element-Specific Attributes are None.

Example:
<!DOCTYPE HTML>
<html lang="en-US">
<head>
<meta charset=utf-8>
</head>
<body>
<details>
<summary>Nareshit Description</summary>
<p>Naresh i Technologies</p>
<p>Leader in IT Training</p>
<p>Ameerpet-vist-www.nareshit.com</p>
<p>Hyderabad</p>
</details>
</body>
</html>

<figure>
The figure element represents a unit of content, optionally with a caption, that is self-contained, that is typically referenced as a single unit from the main flow of the document, and that can be moved away from the main flow of the document without affecting the document’s meaning.

Syntax: <figure>----------------------</figure>

Attributes: Element-Specific Attributes are None.

Example:
<!DOCTYPE html>
<html>
<body>
<p>HTML5 will be the new standard for HTML, XHTML, and the HTML DOM.
The previous version of HTML came in 1999. The web has changed a lot since then.
HTML5 is still a work in progress. However, most modern browsers have some HTML5 support...</p>
<figure>
  <img src="html5.png" title="WebPlatform" width="300" height="250" />
</figure>
</body>
</html>

<figcaption>
The <figcaption> tag defines a caption for a <figure> element. The figcaption element represents a caption or legend for a figure.

Syntax: <figcaption>----------------</figcaption>

Attributes:
Element-Specific Attributes are None.

Example:
<!DOCTYPE html>
<html>
<body>
<p>HTML5 will be the new standard for HTML, XHTML, and the HTML DOM.
The previous version of HTML came in 1999. The web has changed a lot since then.
HTML5 is still a work in progress. However, most modern browsers have some HTML5 support...</p>
<figure>
  <img src="html5.png" title="WebPlatform" width="300" height="250" />
<figcaption> It is HTML5 Logo from W3C and WHATWG</figcaption>
</figure>
</body>
</html>

<nav>
The HTML <nav> tag is used for declaring a navigational section of the HTML document. Websites typically have sections dedicated to navigational links - links that enable the user to navigate the site. These links should be placed inside a <nav> tag.

Syntax: <nav>--------------------</nav>

Attributes:
Element-Specific Attributes None.

Example
<!DOCTYPE html>
<html>
<body>
<nav>
<a href="http://www.nareshit.com">Nareshit</a> |
<a href="http://www.licindia.com">LIC</a> |
<a href="http://www.gmail.com">Gmail</a> |
<a href="http://www.w3c.org">W3C</a> |
<a href="http://www.yahoomail.com">YahooMail</a>
</nav>
</body>
</html>

<wbr>
Word break. For defining a line-break opportunity. The Word Break Opportunity (<wbr>) specifies where in a text it would be ok to add a line-break

Syntax: <wbr> or <wbr/>

Attributes:
Element-Specific Attributes None.

Example:
<!DOCTYPE html>
<html>
<body>
<p>This is a veryveryveryveryveryveryveryvery<wbr>longwordthatwillbreakatspecific<wbr>placeswhenthebrowserwindowisresized.</p>
</body>
</html>
---------------------------------------------------------------------------------------------------------------------------------------------------------
New inline elements
HTML 5 introduces new elements to help indicate basic elements such as times or numbers.

<mark> - This denotes that a bit of text is marked in some way. You could, for example, use this to mark search terms in a list of results.

<meter> - This can be used to indicate a figure of some sort. It can have multiple attributes including: value, min, max, low, high, and optimum.

<progress> - This can be used to show a progress bar of some sort. It has a couple of attributes: value and max. The max attribute can be omitted.

<time> - You can use this to represent time or date in your block of text.

<mark>
It is used for indicating text as marked or highlighted for reference purposes. This tag is used to highlight the text in the html document. It is a paired tag.

Syntax: 
<mark>.......................</mark>

Attributes:
Element-Specific Attributes are None.

Example:
<!DOCTYPE html>
<html lang='en-US'>
<body>
<p>Do not forget to learn about WEB <mark>HTML5</mark> Today.</p>
</body>
</html>

Example (CSS) 
<style type='text/css'>
mark 
{
  background-color: #ddddcc;
  font-weight: bold;
  font-style: italic;
   color: red;
}
</style>
<body>
<mark>Naresh i Technologies</mark>
</body>

<meter>
It defines a scalar measurement within a known range, or a fractional value. This is also known as a gauge (such as disk space usage or a tally of votes). It is a paired tag.

Syntax: 
<meter>.......................</meter>

Note: The <meter> tag should not be used to indicate progress.

Attributes:
Attribute 		Value 	Description
form 		form_id 	Speci one or more forms 
high 		number 	Spe the range that is considered to be a high 
low 		number   Spe the range that is considered to be low 
max 		number 	Specifies the maximum value of the range
min 		number 	Specifies the minimum value of the range
optimum 		number 	What value is the optimal value for the gauge
value	 	number 	Specifies the current value of the gauge

Example:
<body>
<meter value="2" min="0" max="10">2 out of 10</meter>
</body>

Example:
<!DOCTYPE html>
<html lang='en-US'>
<head>
<meta charset='utf-8'>
</head>
<body>
<p> The following meter full 20%..!!</p>
<meter value="2" min="0" max="10">2 out of 10</meter>
<br/>
<p> The following meter full 40%..!!</p>
<meter value="4" min="0" max="10">4 out of 10</meter>
<br/>
<p> The following meter full 80%..!!</p>
<meter value="8" min="0" max="10">8 out of 10</meter>
<br/>
</body>
</html>

Note:
1. if value is higher than high, the gauge is red: (When Low available)
2. When value is lower than low, if optimum is lower than low, the gauge is Green
3. if Value is more than high then optimum is yellow (When Max Available)

Example:
<!DOCTYPE html>
<html lang='en-US'>
<head>
<meta charset='utf-8'>
</head>
<body>
<p>He got a <meter low="69" high="80" max="100" value="84">B</meter> on the exam.</p>
<p>He got a <meter high="80" max="100" value="84">B</meter> on the exam.</p>
<p>He got a <meter max="100" value=50 min=10>B</meter> on the exam.</p>
</body>
</html>

Optimum Attribute
The optimum attribute specifies the range where the gauge's value is considered to be an optimal value. This is considered to be the optimum value and needs to be somewhere between min and max. It can be greater than the high attribute.

Syntax
<meter optimum="number"> 

Attribute Values
Value 	Description
number 	Specifies a floating point number that is the optimal value of the gauge

Example:
<!DOCTYPE html>
<html>
<body>
<meter value="0.3" high="0.9" low="0.1" optimum="0.5"></meter>
</body>
</html>

Example
A voting or rating tool
<p>Your score is:  <meter>2 out of 10</meter></p>
We can give this further meaning by adding min and max attributes
<p>Your score is: <meter min="0" max="10">2 out of 10</meter></p>
<p>Your score is: <meter value="91" min="0" max="100" low="40" high="90" optimum="100">A+</meter></p>


<progress>
It is used for representing the progress of a task. This element could be used in conjunction with JavaScript to display the progress of a task or process as it is underway. 

Syntax: <progress>.................</progress>

Attributes:
Attribute 	Value 	Description
max 	number 	Specifies how much work the task requires in total
value 	number 	Specifies how much of the task has been completed

Example:
<!DOCTYPE html>
<html>
<body>
Downloading progress:
<progress value="22" max="100">
</progress>
</body>
</html>

Example:
<body>
<script type='text/javascript'>
window.onload = function() 
{
var bar = document.getElementById("bar"), 
fallback = document.getElementById("fallback"), 
loaded = 0;
var load = function() 
{
loaded += 10;
bar.value = loaded;
if(loaded == 100) 
{
clearInterval(dummyLoad);
}
};
var dummyLoad = setInterval(function() 
{
load();
} ,100);        
}
</script>
<p>
<progress id="bar" value="0" max="100"> 
<span id="fallback"></span> </progress></p>
</body>

Example:
 <body>
<progress id="progressBar" value="0" max="100" style="width:300px;"></progress>
<span id="status"></span>
<h1 id="finalMessage"></h1>
<script type="text/javascript" language="javascript">
function progressBarSim(al) 
{
var bar = document.getElementById('progressBar');
var status = document.getElementById('status');
status.innerHTML = al+"%";
bar.value = al;
al++;
var sim = setTimeout("progressBarSim("+al+")",10);
if(al == 100)
{
status.innerHTML = "100%";
bar.value = 100;
clearTimeout(sim);
var finalMessage = document.getElementById('finalMessage');
finalMessage.innerHTML = "Process is completed Successfully";
}
}
var amountLoaded = 0;
progressBarSim(amountLoaded);
</script>
</body> 
    
<time>
It is intended to be used presenting dates and times in a machine readable format. It is a paired tag.

Syntax:<time>......................</time>

Attributes:
Attribute 		Value 		Description
datetime 		datetime 		Gives the date/time being specified.

Example
<body>
We arrived at <time>09:00</time>
</body>

Example
<body>
I have an appointment with doctor on date 
<time datetime="2010-09-02"> day</time>.
</body>
-------------------------------------------------------------------------------------------------------------------------------------
HTML5 <bdo> Tag
bdo stands for Bi-Directional Override. The <bdo> tag is used to override the current text direction. This can be useful when displaying hebrew, arabic, and other languages/scripts that are written from right to left. It is a paired tag.

Syntax: <bdo>......................</bdo>

Attributes
Attribute	Value	Description
dir	ltr    	Specifies the text direction
	rtl	Specifies the text direction

Example:
<!DOCTYPE HTML>
<html lang="en-US">
<head>
<meta charset=utf-8>
</head>
<body>
<bdo dir="ltr">
How to override text direction? 
I think you already know!
</bdo>
<br/>
<bdo dir="rtl">
How to override text direction? 
I think you already know!
</bdo>
 </body>
</html>

<bdi>
Bi-directional Isolation. This can be useful when displaying right-to-left text (such as Arabic) inside left-to-right text (such as English) when the text-direction is unknown. It is a paired tag.

Syntax: 
<bdi>..............................</bdi>

Attributes 
Element-Specific Attributes are None.

Example:
<!DOCTYPE HTML>
<body>
<ul>
 <li>User <bdi>hrefs</bdi>: 60 points</li>
 <li>User <bdi>jdoe</bdi>: 80 points</li>
 <li>User <bdi>إيان</bdi>: 90 points</li>
</ul>
 </body>
</html>

<ruby>
It used for specifying Ruby annotations, which is used in East Asian typography. It is a paired tag.

Syntax: 
<ruby>--------------------</ruby>

Attributes:
Element-Specific Attributes None.

Example:
<!DOCTYPE html>
<html>
<body>
 <p>...<ruby>漢<rt>かん</rt>字<rt>じ</rt></ruby>...</p>
</body>
</html>

<rt> (Ruby Text)
It marks the Ruby Text component of a ruby annotation.Ruby annotations are used in East Asian typography. It is a paired tag. 

Syntax: 
<rt>..................</rt>

Attributes:
Element-Specific Attributes None.

Example:
<!DOCTYPE html>
<html>
<body>
<ruby>
 <rt> </rt>
</ruby>
</body>
</html>

<rp>
The HTML <rp> is used in ruby annotations for the benefit of browsers that don't support ruby annotations. It is  a paired tag.

Syntax:
<rp>---------------------</rp>

Attributes:
Element-Specific Attributes None.

Example:
<!DOCTYPE html>
<html>
<body>
<ruby>
 <rt><rp>(</rp><rp>)</rp></rt>
</ruby>
</body>
</html>

Example:
<body style="font: 75% Lucida Grande, Trebuchet MS">
    きのうの豪雨で山の水源地は<ruby>氾濫<rp>（</rp>
    <rt>はんらん</rt><rp>）</rp></ruby>し、濁流
    <ruby>滔々<rp>（</rp><rt>とうとう</rt><rp>）</rp>
    </ruby>と下流に 集り、猛勢一挙に橋を破壊し、どうどうと 
    響きをあげる激流が、<ruby>木葉微塵<rp>（</rp>
    <rt>こっぱみじん</rt><rp>）</rp></ruby>に<ruby>橋桁
    <rp>（</rp><rt>はしげた</rt><rp>）</rp></ruby>
    を跳ね飛ばしていた。
  </body>
  -----------------------------------------------------------------------------------------------------------------------------------------------------
  1. color
2. email
3. number
4. range
5. search
6. tel
7. url

Input Type:
The color type is used for input fields that should contain a color. With Color input type, you no longer need a complex Javascript color picker.

Syntax: Input type=name

Example:
<!doctype html>
<body>
<form>
<label style='color:blue;font-family:Arial Rounded MT;font-size:15px'>Select Required Color...!! </label> <br/>
<input type="color" name="clr"/> <br/>
<input type='submit' value="NextPage"/>
<input type='reset' value="Cancel"/>
</form>
</body>

Input Type: email 
The email type is used for input fields that should contain an e-mail address. The email INPUT tag gives a way to request email addresses in your web form.

Syntax: Input type=name

Example
<!doctype html>
<body>
<form>
<label style='color:blue;font-family:Arial Rounded MT;font-size:15px'>Enter Valid Email ID...!! </label> <br/>
<input type="email" name="eid"/> <br/>
<input type='submit' value="NextPage"/>
<input type='reset' value="Cancel"/>
</form>
</body>

Input Type: number
The number type is used for input fields that should contain a numeric value.

Syntax: Input type=name

Attributes
Use the following attributes to specify restrictions:
max - Specifies the maximum value allowed
min - Specifies the minimum value allowed
step - Specifies the legal number intervals
value - Specifies the default value

Example:
<!doctype html>
<body>
<form>
<label style='color:blue;font-family:Arial Rounded MT;font-size:15px'>Enter/Select Valid Number...!! </label> <br/>
<input type="number" name="nm" value="0" min="5" step="5" max="50"/> <br/>
<input type='submit' value="NextPage"/>
<input type='reset' value="Cancel"/>
</form>
</body>

Input Type: range 
The range type is used for input fields that should contain a value from a range of numbers. You can also set restrictions on what numbers are accepted.

Syntax:Input type=name

Attributes
Use the following attributes to specify restrictions:
1. max - Specifies the maximum value allowed
2. min - Specifies the minimum value allowed
3. step - Specifies the legal number intervals
4. value - Specifies the default value

Example:
<!doctype html>
<body>
<form>
<label style='color:blue;font-family:Arial Rounded MT;font-size:15px'>Select Valid Number Range...!! </label> <br/>
<input type="range" name="rg" value="0" min="5" step="5" max="50"/> <br/>
<input type='submit' value="NextPage"/>
<input type='reset' value="Cancel"/>
</form>
</body>

Input Type: search
In HTML5, we can define a textbox as search box instead of a normal textbox.  Notice, there is a blue "cross" sign appears in the textbox when,you input something in the search box, when you click on the "cross", your input string will be clear and you can start to type a new string.

Syntax:
Input type=name

Example:
<!doctype html>
<body>
<form>
<label style='color:blue;font-family:Arial Rounded MT;font-size:15px'>Enter Valid Search Keyword...!! </label> <br/>
<input type="search" name="sr"/> <br/>
<input type='submit' value="NextPage"/>
<input type='reset' value="Cancel"/>
</form>
</body>

Input Type: tel
Input fields that accept phone numbers use the "tel" type. The main advantage to using this type of field then is to optimize the keyboard on mobile devices. There is a new attribute that can help you to enforce your preferred format. It's called the pattern element.

Syntax:Input type=name

Example:
<!doctype html>
<body>
<form>
<label style='color:blue;font-family:Arial Rounded MT;font-size:15px'>Enter Valid Mobile Number:..!! </label> <br/>
<input type="tel" name="tno" required="required" pattern="[0-9]{10}" title="In-ValidMobileNumber" /> <br/>
<input type='submit' value="NextPage"/>
<input type='reset' value="Cancel"/>
</form>
</body>

Example:
<!DOCTYPE html>
<html lang='en-US'>
<head>
<meta charset='utf-8'>
<title>
Webforms 2.0 tel-InputType
</title>
</head>
<body>
<form action="nit.html">
<input type='tel' 
pattern='[\+]\d{2}[\(]\d{2}[\)]\d{4}[\-]\d{4}' 
title='Phone Number (Format: +99(99)9999-9999)'>
 <input type="submit"  value="ClickMe"/>
</form>
</body>
</html>

Input Type: url 
The url type is used for input fields that should contain a URL address. The value of the url field is automatically validated when the form is submitted.

Syntax:Input type=name

Example:
<!doctype html>
<body>
<form>
<label style='color:blue;font-family:Arial Rounded MT;font-size:15px'>Enter Valid URL:..!!</label> <br/>
<input type="url" name="ul"/> <br/>
<input type='submit' value="NextPage"/>
<input type='reset' value="Cancel"/>
</form>
</body>
-----------------------------------------------------------------------------------------------------------------------------------------
What is a Webform?
A Webform (HTML form) on a web page allows a user to enter data that is sent to a server for processing. These forms contains checkboxes, radio buttons, or text fields.  Webforms are defined in formal programming languages such as HTML, Perl, Php, Java or .NET.

Web 1.0 was an early stage of the conceptual evolution of the World Wide Web, centered around a top-down approach to the use of the web and its user interface. 

Web 2.0 was coined in 1999 to describe web sites that use technology beyond the static pages of earlier web sites. web 2.0 suggests a new version of the World Wide Web, it does not refer to an update to any technical specification. Web 2.0 include social networking sites, blogs, wikis, video sharing sites, hosted services, web applications, Web 2.0 offers all users the same freedom to contribute.

Key features of Web 2.0 
Free Classification of Information
Rich User Experience
User as a Contributor
Long Tail
User Participation
Basic Trust
Dispersion.

New <input> Types in HTML5 (Web forms 2.0) (Advanced Forms)

Web Forms 2.0 has been integrated into HTML5. These features were originally part of a WHATWG specification called Web Forms 2.0, based upon existing work at the W3C. That specification has now been rolled into HTML5.

HTML5 has several new input types for forms. These new features allow better input control and validation. HTML5 defines a variety of new input types: sliders, number spinners, popup calendars, color choosers, autocompleting suggest boxes, and more..!!

HTML5 defines 13 new values for the type attribute of the HTML <input> element (search, tel, url, email, datetime, date, month, week, time, datetime-local, number, range, and color). In that 6 are date pickers and 7 are new text types.

1. color(color chooser)
2. date(popup calendar)
3. datetime(datetime chooser)
4. datetime-local(datetime chooser)
5. email(Email Entry)
6. month(month chooser)
7. number(spinner)
8. range(slider)
9. search(Search Query Input)
10. tel(Telephone Input)
11. time(TimeSelector)
12. url(URL Entry)
13. week(WeekChooser)

Note: All major browsers support all the new input types.If they are not supported, they will behave as regular text fields.

Date pickers:
1. date
2. datetime
3. datetime-local
4. month
5. time
6. week

In RealTime the following Applications are required date pickers..!!
E-commerce, Ticket Booking, Appointments, Greetings, Training Schedules, Banking, Finance Applications, Registration forms, Birth certificates, school Admissions...!!

Input Type: date 
It allows the user to select a date. A Date and time field can be easily found in many web forms. Typical applications are like ticket booking, appointment booking, ordering food Items and etc.

Syntax: Input type="Name of Input"

Example:
<!doctype html>
<body>
<form>
<label style='color:blue;font-family:Arial Rounded MT;font-size:15px'>Select valid Date..!!</label> <br/>
<input type="date" name="dt"/> <br/>
<input type='submit' value="NextPage"/>
<input type='reset' value="Cancel"/>
</form>
</body>

Input Type: datetime
The datetime type allows the user to select a date and time (with time zone). You can choose date and time with time zone. Input value is represented in UTC/GMT time.

Syntax: Input type="name of the Type"

Example:
<!doctype html>
<body>
<form>
<label style='color:blue;font-family:Arial Rounded MT;font-size:15px'>Select Valid Date&Time..!!</label> <br/>
<input type="datetime" name="dtm"/> <br/>
<input type='submit' value="NextPage"/>
<input type='reset' value="Cancel"/>
</form>
</body>

Input Type: datetime-local 
The datetime-local type allows the user to select a date and time (no time zone).

Syntax: Input type=name

Example:
<!doctype html>
<body>
<form>
<label style='color:blue;font-family:Arial Rounded MT;font-size:15px'>Select Valid Date&Time-Local..!!</label> <br/>
<input type="datetime-local" name="dtm"/> <br/>
<input type='submit' value="NextPage"/>
<input type='reset' value="Cancel"/>
</form>
</body>

Input Type: month 
The month type allows the user to select a month and year.

Syntax: Input type=name

Example:
<!doctype html>
<body>
<form>
<label style='color:blue;font-family:Arial Rounded MT;font-size:15px'>Select Valid Month&Year..!!</label> <br/>
<input type="month" name="mn"/> <br/>
<input type='submit' value="NextPage"/>
<input type='reset' value="Cancel"/>
</form>
</body>

Input Type: time 
The time type allows the user to select a time. The time will be collected with the hour, minutes, seconds, and fractions of seconds. No timezone will be set.

Syntax:Input type=name

Example:
<!doctype html>
<body>
<form>
<label style='color:blue;font-family:Arial Rounded MT;font-size:15px'>Select Valid TIME..!!</label> <br/>
<input type="time" name="tm"/> <br/>
<input type='submit' value="NextPage"/>
<input type='reset' value="Cancel"/>
</form>
</body>

Input Type: week 
The week type allows the user to select a week and year. The week will be collected without any timezone information.

Syntax:Input type=name

Example:
<body>
<form>
<label style='color:blue;font-family:Arial Rounded MT;font-size:15px'>Select Valid WEEK & YEAR..!!</label> <br/>
<input type="week" name="wk"/> <br/>
<input type='submit' value="NextPage"/>
<input type='reset' value="Cancel"/>
</form>
</body>
--------------------------------------------------------------------------------------------------------------------------------------------
HTML5 New Form Attributes
HTML5 has several new attributes for <form> and <input>.

New attributes for <form>:
1. autocomplete
2. novalidate

<form> / <input> autocomplete Attribute
It Specifies whether a form or input field should have autocomplete on or off. When autocomplete is on, the browser automatically complete values based on values that the user has entered before.

Syntax
<form autocomplete="on/off">

Example:
<!DOCTYPE html>
<body>
<form action="nit1.html" autocomplete="off">
  First name:<br/>
<input type="text" name="fname" /><br>
  E-mail: <br/>
<input type="email" name="email" autocomplete="on" /><br>
  <input type="submit" />
</form>
</body>

<form> novalidate Attribute:
It is a boolean attribute. When present, it specifies that the form-data (input) should not be validated when submitted.

Syntax
<form novalidate="novalidate">

Example:
<!DOCTYPE html>
<body>
<form action="nit1.html" novalidate="on">
  First name:<br/>
<input type="text" name="fname" required="requried" /><br>
  Password: <br/>
<input type="password" name="pwd" required="requried" /><br>
  <input type="submit" value="GuestLogin"/>
</form>
</body>

New attributes for <input>:
1. placeholder (TextFieldswith TemporaryHints)
2. autofocus
3. required (TextFields with Required Values[non-empty])
4. autocomplete
5. form

<input> placeholder Attribute
It specifies a short hint that describes the expected value of an input field The hint is displayed in the input field when it is empty, and disappears when the field gets focus. 

Note: It is populary known as WaterMarks

Syntax
<input placeholder="text/hint"/>

Example:
<!DOCTYPE html>
<body>
<form action="nit.html">
<fieldset>
<legend align="center">User Login Form...!!</legend>
<input type="text" name="fname" placeholder="First name" /><br/>
<input type="password" name="pwd" placeholder="Password" /><br/>
<input type="submit" value="Login" />
</fieldset>
</form>
</body>

HTML5 <input> autofocus Attribute
The autofocus attribute is a boolean attribute. When present, it specifies that an <input> element should automatically get focus when the page loads.

Syntax
<input autofocus="autofocus" />
or
<input autofocus>
or
<input autofocus="">

Note: It supports in all major web browsers

Example:
<!DOCTYPE html>
<html lang='en-US'>
<head>
<meta charset='utf-8'>
<title>
New input attributes
</title>
</head>
<body>
<form action="nit.html">
 First name:<br/>
<input type="text" name="fname" autofocus="autofocus"> <br>
Last name: <br/>
<input type="text" name="lname"><br>
<input type="submit"  value="NextPage"/>
</form>
</body>
</html>

HTML5 <input> required Attribute
The required attribute is a boolean attribute. When present, it specifies that an input field must be filled out before submitting the form.

Note: The required attribute works with the following input types: text, search, url, tel, email, password, date pickers, number, checkbox, radio, and file.

Syntax
<input required="required" />
or
<input required>
or
<input required="">

Note: The required attribute works with the following input types: text, search, url, tel, email, password, date pickers, number, checkbox, radio, and file.

Example:
<!DOCTYPE html>
<html lang='en-US'>
<head>
<meta charset='utf-8'>
<title>
New input attributes
</title>
</head>
<body>
<form  action="nit.html" id="form1" name="Myform">
<label>What is your favorite movie:</label><br/>
<input name="movie" type="text" required="required"/> <br/>
<input type="submit" value="Login"/> 
</form>
</body>
</html>

Example:
<!DOCTYPE html>
<html>
<head>
    <title>Required Attribute</title>
</head>
<body>
    <form id="myform">
        <label>Name:</label>&nbsp;<input type="text" id="name" required="true" /><br/>
        <label>MyCar:</label>&nbsp;<input type="text" id="car" required="true" /><br/>
        <br/>
        <input type="submit" id="btnsubmit" value="Submit!" />
    </form>
</body>
</html>

<input> autocomplete Attribute
The autocomplete attribute specifies whether or not an input field should have autocomplete enabled. Autocomplete allows the browser to predict the value. When a user starts to type in a field, the browser should display options to fill in the field, based on earlier typed values.

Note: The autocomplete attribute works with the following <input> types: text, search, url, tel, email, password, datepickers, range, and color.

Note: It supports all major web browsers Except Opera.

Syntax
<input autocomplete="on|off" />


Attribute Values
Value	Description
on	Default. Specifies that autocomplete is on (enabled)
off	Specifies that autocomplete is off (disabled)

Example:
<!DOCTYPE html>
<html lang='en-US'>
<head>
<meta charset='utf-8'>
<title>
New Input Attributes
</title>
</head>
<body>
<form action="nit.html" autocomplete="off">
  First name:<br/>
<input type="text" name="fname" /><br/>
  Last name: <br/>
<input type="text" name="lname" /><br/>
  E-mail: <br/>
<input type="email" name="email" autocomplete="on"/> <br/>
<input type="submit"  value="Login"/>
</form>
</body>
</html>

<input> form Attribute
The form attribute specifies one or more forms an <input> element belongs to.

Syntax
<input form="id/name" />

Example:
<!DOCTYPE html>
<html lang='en-US'>
<head>
<meta charset='utf-8'>
<title>
New input attributes
</title>
</head>
<body>
<form action="nit.html" id="form1">
First name: <br/>
<input type="text" name="fname"><br/>
<input type="submit" value="Submit">
</form>
Last name: <br/> 
<input type="text" name="lname" form="form1">
</body>
</html>

<input> formaction Attribute
The formaction attribute specifies the URL of a file that will process the input control when the form is submitted. The formaction attribute overrides the action attribute of the <form> element.

Note: This attribute is used with the following input types
1."submit" 
2. "image"

Note: It supports all Major Browsers.

Example:
<!DOCTYPE html>
<html lang='en-US'>
<head>
<meta charset='utf-8'>
<title>
New input attributes
</title>
</head>
<body>
<form action="nit.html">
  First name: <br/>
<input type="text" name="fname"><br>
  Last name: <br/>
<input type="text" name="lname"><br>
<input type="submit" value="@form">
<input type="submit" formaction="html5.png" value="@input" >
</form>
</body>
</html>

<input> formenctype Attribute
The formenctype attribute specifies how the form-data should be encoded when submitting it to the server (only for forms with method="post") The formenctype attribute overrides the enctype attribute of the <form> element.

Note: It  is used with type="submit" and type="image".

Note: It supports all Major Browsers.

Syntax:
<input type formenctype=name>

Example:
<!DOCTYPE html>
<html lang='en-US'>
<head>
<meta charset='utf-8'>
<title>
New input attributes
</title>
</head>
<body>
<form action="nit.html" method="get">
First name: <br/>
<input type="text" name="fname"><br/>
Password: <br/>
<input type="password" name="pwd"><br/>
<input type="submit" value="G@form">
<input type="submit" formenctype="form-data" value="P@input">
</form>
</body>
</html>

<input> formmethod Attribute
The formmethod attribute defines the HTTP method for sending form-data to the action URL. The formmethod attribute overrides the method attribute of the <form> element.

Note:It can be used with type="submit" and type="image".

Note: It supports all Major Browsers.

Example:
<!DOCTYPE html>
<html lang='en-US'>
<head>
<meta charset='utf-8'>
<title>
New input attributes
</title>
</head>
<body>
<form action="nit.html" method="get">
First name: <br/>
<input type="text" name="fname"><br/>
Last name: <br/>
<input type="text" name="lname"><br/>
Password: <br/>
<input type="password" name="pwd"><br/>
<input type="submit" value="@Form">
<input type="submit" formmethod="post" formaction="goodmorning.gif" value="@Input">
</form>
</body>
</html>


Example2
<body>
<form action="nit.html">
 <input type="text" placeholder="User Name" name="fname"><br/>
<input type="password" placeholder="Password"  name="lname"><br/>
<input type="image" src="html5.png" alt="Submit" width="55" height="30" title='submit using GET'><br/>
<input type="submit" formmethod="post" formaction="nit1.html" value="Submit using POST">
</form>
</body>

<input> formnovalidate Attribute
The novalidate attribute is a boolean attribute. When present, it specifies that the <input> element should not be validated when submitted. The formnovalidate attribute overrides the novalidate attribute of the <form> element.

Note: It can be used with type="submit"
Note: It doesn't supports safari Browser.
Syntax:
<input type formnovalidate='on|off'>

Example:
<!DOCTYPE html>
<html lang='en-US'>
<head>
<meta charset='utf-8'>
<title>
New input attributes
</title>
</head>
<body>
<form action="nit.html">
E-mail: <br/>
<input type="email" name="userid" required="required"><br>
User Name: <br/>
<input type="text" name="user" required="required"><br>
<input type="submit" value="@YValidate">
<input type="submit" formnovalidate="formnovalidate" 
value="@NValidate">
</form>
</body>
</html>

<input> formtarget Attribute
The formtarget attribute specifies a name or a keyword that indicates where to display the response that is received after submitting the form. The formtarget attribute overrides the target attribute of the <form> element.

Note: It can be used with type="submit" and type="image".

Syntax:
<input type formtarget='target'>

Example:
<!DOCTYPE html>
<html lang='en-US'>
<head>
<meta charset='utf-8'>
<title>
New input attributes
</title>
</head>
<body>
<form action="nit.html">
  First name: <br/>
<input type="text" name="fname"><br>
  Last name: <br/>
<input type="text" name="lname"><br>
<input type="submit" value="@SameTW">
<input type="submit" formtarget="_blank" value="@NewTW">
</form>
</body>
</html>

<input> height and width Attributes
The height and width attributes specify the height and width of an <input> element.

Note: These attributes are only used with <input type="image">.

Syntax:
<input type='image' height='' " width=''">

Example:
<!DOCTYPE html>
<html lang='en-US'>
<head>
<meta charset='utf-8'>
<title>
New input attributes
</title>
</head>
<body>
<form action="nit.html">
  First name: <br/>
<input type="text" name="fname"><br/>
  Password: <br/>
<input type="password" name="pwd"><br/>
<input type="image" src="html5.png" width="25px" height="15px">
</form>
</body>
</html>

<input> list Attribute
The list attribute refers to a <datalist> element that contains pre-defined options for an <input> element.

Syntax: <input list="Name">

Example
<!DOCTYPE html>
<html lang='en-US'>
<head>
<meta charset='utf-8'>
<title>
New input attributes
</title>
</head>
<body>
<form action="nit.html" method="get">
<input list="browsers" name="browser">
<datalist id="browsers">
  <option value="Internet Explorer">
  <option value="Firefox">
  <option value="Chrome">
  <option value="Opera">
  <option value="Safari">
</datalist>
<input type="submit"></form>
</body>
</html>

<input> min and max Attributes

The min and max attributes specify the minimum and maximum value for an <input> element.

Note: The min and max attributes works with the following input types: number, range, date, datetime, datetime-local, month, time and week.


Syntax:
<input type min=value max=value>


Example:
<!DOCTYPE html>
<html lang='en-US'>
<head>
<meta charset='utf-8'>
<title>
Webforms 2.0 number-InputType
</title>
</head>
<body>
<form action="nit.html">
Quantity (between 1 and 8): 
<input type="number" name="quantity" min="1" max="8" />
<input type="submit"  value="Select"/>
</form>
</body>
</html>

Example:
<!DOCTYPE html>
<html lang='en-US'>
<head>
<meta charset='utf-8'>
<title>
New input attributes
</title>
</head>
<body>
<form action="nit.html">
  Enter a date before 1980-01-01:
  <input type="date" name="bday" max="1979-12-31"><br>
  Enter a date after 2000-01-01:
  <input type="date" name="bday" min="2000-01-02"><br>
  Quantity (between 1 and 5):
   <input type="number" name="quantity" min="1" max="5"><br>
   <input type="submit">
   </form>
   </body>
   </html>

<input> multiple Attribute
The multiple attribute is a boolean attribute. When present, it specifies that the user is allowed to enter more than one value in the <input> element.

Note: It supports email, and file input types.

Syntax:
<input type='file' multiple='on|off'>

Example:
<!DOCTYPE html>
<html lang='en-US'>
<head>
<meta charset='utf-8'>
<title>
New input attributes
</title>
</head>
<body>
<form action="nit.html">
  Select images: <input type="file" name="img" multiple="multiple">
  <input type="submit" value='Login'>
</form>
<p>Try selecting more than one file when browsing for files.</p>
</body>
</html>

<input> pattern Attribute
The pattern attribute specifies a regular expression that the <input> element's value is checked against.

Note: The pattern attribute works with the following input types: text, search, url, tel, email, and password.

Syntax:
<input type pattern=RegExp>

Example:
<!DOCTYPE html>
<html lang='en-US'>
<head>
<meta charset='utf-8'>
<title>
Webforms 2.0 tel-InputType
</title>
</head>
<body>
<form action="nit.html">
<input type='tel' 
pattern='[\+]\d{2}[\(]\d{2}[\)]\d{4}[\-]\d{4}' 
title='Phone Number (Format: +99(99)9999-9999)'>
 <input type="submit"  value="ClickMe"/>
</form>
</body>
</html>

Example:
<!doctype html>
<body>
<form action='nit1.html' name="Myform" id="form1">
<label style='color:blue;font-family:tahoma'>Enter Valid Country Code <b style='color:red'>*</b></label><br/>
<input type='text' placeholder="OnlyCountryCode" title="SorryInvalidCountryCode" pattern="[a-zA-Z]{2}" required="required"  name='ccode' id='txt1' />
<br/>
<input type='submit' value="NextPage" />
<input type='reset' value="Cancel" />
</form>
</body>

<input> step Attribute
The step attribute specifies the legal number intervals for an <input> element.

NOTE:
The step attribute works with the following input types: number, range, date, datetime, datetime-local, month, time and week.

Syntax:
<input type=name step=value>

Example:
<!DOCTYPE html>
<html lang='en-US'>
<head>
<meta charset='utf-8'>
<title>
New input attributes
</title>
</head>
<body>
<form action="nit.html">
  <input type="number" name="points" step="3">
  <input type="submit" value='Login'>
</form>
</body>
</html>
------------------------------------------------------------------------------------------------------------------------------------------------
HTML Multimedia
Multimedia on the web is sound, music, videos, and animations. Modern web browsers have support for many multimedia formats.

History of multimedia in the internet
First version of RealPlayer in 1995
Video support for Flash 8 in 2005
Windows Media Player and iTunes surpassed RealPlayer in 2007

What is Multimedia?
Multimedia comes in many different formats. It can be almost anything you can hear or see.
Modern Web pages have often embedded multimedia elements, and modern browsers have support for various multimedia formats.

Examples: 
Pictures, music, sound, videos, records, films, animations, and more.

The plugin era
Plugins proliferated:
    1991: Apple Quicktime (.mov)
    1994: MIDI (background music)
    1995: RealAudio (.ra, .ram)
    1997: RealVideo (H.263)
    1998: Windows Media Player
    1999: Quicktime for Windows (.mov, .mp3, .mp4, .swf)
    2002: Macromedia Shockwave Flash (.swf)
    2007: Microsoft Silverlight (flash, vid, etc.) 

Browser Support
The first Internet browsers had support for text only, and even the text support was limited to a single font in a single color. Then came browsers with support for colors, fonts and text styles, and support for pictures was added.

The support for sounds, animations, and videos is handled in different ways by various browsers. Some multimedia elements is supported, and some requires an extra helper program (a plug-in).


Multimedia Formats:(Video formats)
Multimedia files also have their own formats with different extensions like: .swf, .wav, .mp3, and .mp4. MP4 is the new and upcoming format for internet video. It is supported by YouTube, Flash players and HTML5. 
	

AVI(.avi)-->AVI (Audio Video Interleave) was developed by Microsoft. AVI is supported by all computers running Windows, and by the most popular web browsers.

WMV (.wmv)-->WMV (Windows Media Video) was developed by Microsoft. WMV is a common format on the Internet.

MPEG(.mpg or .mpeg)-->The MPEG (Moving Pictures Expert Group) format is the most popular format on the Internet.

Flash(.swf or .flv)--> Flash was developed by Macromedia. 

MP4 (.mp4 Mpeg-4 (MP4) is the new format for the internet.

Multimedia Formats:(Audio formats)

MIDI (.mid or .midi)-->MIDI (Musical Instrument Digital Interface) is a format for electronic music devices like synthesizers and PC sound cards.

MP3(.mp3)-->MP3 files are actually the sound part of MPEG files.

WAV (.wav)-->WAVE (more known as WAV) was developed by IBM and Microsoft. WAVs are compatible with Windows, Macintosh, and Linux operating systems.

WMA(.wma)-->WMA (Windows Media Audio)

HTML4 Multimedia Tags:

HTML <object> Tag
The <object> tag defines an embedded object within an HTML document. Use this element to embed multimedia (like audio, video, Java applets, ActiveX, PDF, and Flash) in your web pages. It is a paired tag

Syntax: <object>...............</object>

Example:
<html>
<body>
<object data="Windows XP Shutdown.wav">
<param name="autoplay" value="true" />
</object>
 </body>
</html>

Example:
<!DOCTYPE html>
<object data="Windows XP Shutdown.wav" type="audio/x-mplayer2" width="320" height="240">
<param name="src" value="music.wav">
<param name="autoplay" value="false">
<param name="autoStart" value="0">
Hear the sound : <a href="Windows XP Shutdown.wav">music</a>
</object>

<param> tag:
You can use the <param> tag to pass parameters to plugins that have been embedded with the <object> tag. It is a Non-Paired Tag..

Syntax: <param>

Example:
<html>
<body>
<object data="Windows XP Shutdown.wav">
<param name="autoplay" value="true" />
</object>
 </body>
</html>

<embed>
The HTML <embed> tag is used for embedding an external application or interactive content into an HTML document. It is non-paired tag.

Syntax: <embed>

Attributes
Attribute 	Value 		Description
height 	pixels 		Specifies the height of the embedded content
width 	pixels 		Specifies the width of the embedded content
src 	URL 		Specifies the address of the external file to embed
type 	MIME_type 	Specifies the MIME type of the embedded content


YouTube in HTML5
YouTube videos can be included in HTML documents, and Google offers the code to do so right on the same page as the video itself!

Example:
<!DOCTYPE html>
<html lang='en-US'>
<head>
<meta charset='utf-8'>
</head>
<body>
<embed src="http://www.youtube.com/v/opVb89Cmrtk&hl=en&fs=1" type="application/x-shockwave-flash"  width="425" height="344" >
</body>
</html>

Example:
<embed src="http://www.youtube.com/v/BHtGcZ9XqjY"
        type="application/x-shockwave-flash"
         allowscriptaccess="always" 
         allowfullscreen="true" width="480" height="385"/>

HTML <bgsound> Tag

The HTML <bgsound> tag is used to play a soundtrack in the background. This tag is for Internet Explorer only.

Specific Attributes
The HTML <bgsound> tag also supports following additional attributes:
Attribute	Value	Description
loop 	number	Lets you replay a background soundtrack a certain number of times.
src 	URL	Specifies the path of the sound file.

Example
<!DOCTYPE html>
<html>
<head>
<title>HTML bgsound Tag</title>
</head>
<body>
<bgsound src="/html/yourfile.mdi"/>
<p>This does create any result on the screen but it plays sound file in the background.</p>
</body>
</html>

<source>
The HTML <source> tag is used to specify multiple media resources on media elements (such as <audio> and <video>). 

Syntax: <source>....................</source>

Attributes
Attribute 	Value 		Description
media 	media_query 	Specifies the type of media resource
src 	URL 		Specifies the URL of the media file
type 	MIME_type 	Specifies the MIME type of the media resource.

Note: The media attribute is not supported in any of the major browsers.

Example:
<!DOCTYPE html>
<html lang='en-US'>
<head>
<meta charset='utf-8'>
</head>
<body>
<audio controls="controls">
<source src="good_enough.mp3" type="audio/mpeg" />
Your browser does not support the audio element.
</audio>
</body>
</html>

Example
<!DOCTYPE html>
<html lang='en-US'>
<head>
<meta charset='utf-8'>
	
Working with Source Tag
</title>
</head>
<body>
<video controls='controls'>
<source src="oceans.mp4" type="video/mp4" />
Your browser does not support the Video element.
</video>
</body>
</html>


HTML5-MULTIMEDIA 
It is a new standard for media content. Playing video and audio is easier than ever

HTML5 <audio> Tag
It is used to specify audio on an HTML document. It is a paired tag.

Note:
Any text inside between <audio> and </audio> will be displayed in browsers that do not support audio.

Syntax: 
<audio>....................</audio>

Attributes
Attribute 	Value 		Description
autoplay  autoplay 		Specifies that the audio will start playing 
controls  	controls 		Specifies that audio controls should be displayed
loop  	loop 		Specifies that the audio will start over again
src 	Path 		Specifies the URL of the audio file
muted	muted		Specified the audio should be muted


Example:
<!DOCTYPE html>
<html lang='en-US'>
<head>
<meta charset='utf-8'>
</head>
<body>
<audio controls="controls">
  <source src="song.ogg"  type="audio/ogg" />
   Your browser does not support the audio element.
</audio>
</body>
</html>

Example:
<!DOCTYPE html>
<html lang='en-US'>
<head>
<meta charset='utf-8'>
</head>
  <body>
    <audio src="song.ogg" controls="controls" autoplay="autoplay" loop="loop">
      <p>Your browser does not support the audio playback. Please upgrade to a modern 	browser.</p>
    </audio>
  </body>
</html>

Example: (from Web)
<!DOCTYPE html>
<html lang='en-US'>
<head>
<meta charset='utf-8'>
</head>
  <body>
    <audio src="http://sound26.mp3pk.com/indian/raone/raone01(www.songs.pk).mp3"       controls="controls" autoplay="autoplay" loop="loop">
      <p>Your browser does not support the audio playback. Please upgrade to a modern    browser.</p>
    </audio>
  </body>
</html>

Example:(wav)
<!DOCTYPE html>
<html lang='en-US'>
<head>
<meta charset='utf-8'>
</head>
  <body>
    <audio src="Windows XP Shutdown.wav"  controls="controls" autoplay="autoplay" loop="loop">
      <p>Your browser does not support the audio playback. Please upgrade to a modern browser.</p>
    </audio>
  </body>
</html>

Audio With JS
<!DOCTYPE html>
<html lang='en-US'>
<head>
<meta charset='utf-8'>
</head>
<body>
<audio id="demo" src="good_enough.mp3" controls='controls'></audio>
<div>
  <button onclick="document.getElementById('demo').play()">Play the Audio</button>
  <button onclick="document.getElementById('demo').pause()">Pause the Audio</button>
  <button onclick="document.getElementById('demo').volume+=0.1">Increase Volume</button>
  <button onclick="document.getElementById('demo').volume-=0.1">Decrease Volume</button>
</div> 
</body>
</html>

What is Ogg?
Ogg is a free, open container format maintained by the Xiph.Org Foundation. The creators of the Ogg format state that it is unrestricted by software patents and is designed to provide for efficient streaming and manipulation of high quality digital multimedia.

What is WebM?
The WebM Project is dedicated to developing a high-quality, open video format for the web that's freely available to everyone.

<video>
It is used to specify video on an HTML document. It is a paired tag.

Syntax: 
<video>..........................</video>

Note: 
Any text between the <video> and </video> tags will be displayed in browsers that do not support video.

Attributes:
Attribute 	Value 	Description
autoplay	autoplay 	Specifies that the video will start playing
controls 	controls 	Specifies that video controls should be displayed
src	 URL 	Specifies the URL of the video file
width	 pixels 	Sets the width of the video player
height	 pixels 	Sets the height of the video player
loop	 loop 	Specifies that the video will start over again
muted 	 muted 	Specifies that the audio output of the video should be muted
poster 	 URL 	Spe. an image to be shown while the video is downloading, or until the user hits the 		play button


Example:
<!DOCTYPE html>
<html lang='en-US'>
<head>
<meta charset='utf-8'>
</head>
<body>
<video width="300" height="250" controls="controls" autoplay="autoplay">
  <source src="movie.mp4" type="video/mp4" />
    Your browser does not support the video tag.
</video>
</body>
</html>

Example:
<!DOCTYPE html>
<html lang='en-US'>
<head>
<meta charset='utf-8'>
</head>
<body>
<video width="300" height="250" controls="controls" poster="http://t1.gstatic.com/images?q=tbn:ANd9GcQUc6Vt3q5h6tcyn3229tN6u7fcG9Z0WXl0fFYKUvnmj1GBNvpi">
  <source src="movie.mp4"  />
    Your browser does not support the video tag.
</video>
</body>
</html>

Video with JS
<!DOCTYPE html>
<html lang='en-US'>
<head>
<meta charset='utf-8'>
</head>
<body>
<video id="demo" src="movie.mp4" controls='controls'></video>
<div>
  <button onclick="document.getElementById('demo').play()">Play the Video</button>
  <button onclick="document.getElementById('demo').pause()">Pause the Video</button>
  <button onclick="document.getElementById('demo').volume+=0.1">Increase Volume</button>
  <button onclick="document.getElementById('demo').volume-=0.1">Decrease Volume</button>
</div>
</body>
</html>
-------------------------------------------------------------------------------------------------------------------------------------------------
What is Scripting Language?
It is loosely or weakly typed or light weight programming. Scripts are becoming more popular due to the emergence of web-based applications. 

Advantages of Scripting Languages:
1 Easy to learn and use
2 Minimum programming knowledge or experience required
3 Allow complex tasks to be performed in relatively few steps
4 Editing and running code is fast.

Limitations of Scripting Languages:
1. Because of code executes on the users computer, in some cases it can be exploited for malicious purposes. (Security Issues)
2. Not always able to work across different browsers. (Inconsistant)

Types of Scripts:
Scripts are Classified into the following two types:
1. Client Side Scripts
2. Server Side Scripts

1. Client Side Scripts
The script which is running within the browser is called as client side scripting.
Example:
1. Live Script
2. JavaScript 
3. Type Script
4. VB Script
5. AJAX (Asynchronous Javascript and XML)
6. HTML/DHTML/CSS
7. Dart (Google)
8. Brython

2. Server Side Scripts
The Script which is running within the web server is called as server side scripting. 
Example:
PYTHON ==> Simple HTTP Server (NO-1),WSGI
ASP ==>IIS (Internet Information Services)
JSP ==>Apache Tomcat, Sun Java System Web Server, Nginx
PHP ==> Apache http,Nginx,WampServer
RUBY==> Puma, WebRick,Unicorn
NodeJS ==> Server Side Java Script, Apache, IIS

What is JavaScript? Who Developed?
JavaScript is the world's most popular programming language.JavaScript is the programming language of the Web. JavaScript is easy to learn. It was created by Brendan Eich at Netscape in December 1995 under the name of LiveScript. JavaScript’s official name is ECMAScript.
(European Computer Manufacturer's Association). JavaScript became an ECMA standard (ECMA-262/ES1)

Why Study JavaScript?
JavaScript is one of the 3 languages all web developers must learn:
1. HTML to define the content of web pages
2. CSS to specify the layout of web pages
3. JavaScript to program the behavior of web pages

Every version of JavaScript:
1 The Original JavaScript ES1 ES2 ES3 (1997-1999)
2 The First Main Revision ES5-ECMAScript (2009)
3 The Second Revision ES6- ECMAScript (2015)
4 The Yearly Additions (2016, 2017) 
5. ECMAScript 2016/2017 was not called ES7/ES8

Features of JavaScript
1. It gives HTML designers a programming tool 
2. JavaScript can react to events 
3. Detecting the user's browser, OS, screen size,etc..!!
4. JavaScript can be used to validate data 
5. Open and cross-platform

What JavaScript can Do?
1. JavaScript Can Change HTML Content
2. JavaScript Can Change HTML Attribute Values
3. JavaScript Can Change HTML Styles (CSS)
4. JavaScript Can Hide HTML Elements
5. JavaScript Can Show HTML Elements

Code editors:
A code editor is the place where programmers spend most of their time. There are two main types of code editors: IDEs and lightweight editors.

IDE:
Integrated Development Environment refers to a powerful editor with many features that usually operates on a “whole project.” It is a full-scale “development environment.”
1 Visual Studio Code (cross-platform, free).
2 WebStorm (cross-platform, paid).

Lightweight Editors:
"Lightweight Editors" are not as powerful as IDEs, but they’re fast, elegant and simple.
1 Atom (cross-platform, free).
2 Sublime Text (cross-platform, shareware).
3 Notepad++ (Windows, free).
4 Vim and Emacs are also cool if you know how to use them.

JavaScript Syntax:
JavaScript consists of JavaScript statements that are placed within the following:

Syntax1:
<script type="text/javascript" language="javascript">
Statements;
Statements;
Statements;
</script> 

Syntax2:
<script language="javascript">
Statements;
Statements;
Statements;
</script> 

Syntax3:
<script>
Statements;
Statements;
Statements;
</script> 

Example:
<!DOCTYPE html>
<head>
<script>
document.write("Welcome to JavaScript"); 
</script>
</head>

Example:
<!DOCTYPE html>
<head>
<script>
document.write("Welcome to LiveScript"); 
document.write("Welcome to JavaScript"); 
</script>
</head>

Example:
<!DOCTYPE html>
<head>
<script>
document.write("Welcome to LiveScript"); 
document.write("<br/>")
document.write("Welcome to JavaScript"); 
</script>
</head>

Single and Double quotes in JavaScript
You can write the above code with single quotes too and it will give the same result. However, if the text contains double quotes that have to be displayed, you should use single quotes to surround the text as in:

Example:
<!doctype html>
<head>
<script>
document.write("Welcome to JavaScript"); 
document.write("<br/>"); 
document.write('Welcome to JavaScript'); 
</script>
</head>

Example:
<!doctype html>
<head>
<script>
document.write("Welcome to JavaScript"); 
document.write("<br/>"); 
document.write('Welcome to JavaScript'); 
document.write("<br/>"); 
document.write("Welcome to 'Java' Script"); 
document.write("<br/>"); 
document.write('Welcome to "Java" Script'); 
</script>
</head>

Example:
<!doctype html>
<head>
<script>
document.write("Welcome to "Java" Script"); 
document.write("<br/>"); 
document.write('Welcome to 'Java' Script'); 
</script>
</head>

Example:
<!doctype html>
<head>
<script>
document.write("Welcome to \"Java\" Script"); 
document.write("<br/>"); 
document.write('Welcome to \'Java\' Script'); 
</script>
</head>
--------------------------------------------------------------------------------------------------------------------------------------------
Difference between document.write() and window.document.write()
There is no difference between the two. Remember, the window object is the highest level object. It can contain other objects and their methods. Hence, document is a object contained inside the window object; write() is a method of the document object .

Example:
<!doctype html>
<head>
<script>
window.document.write("Welcome to JavaScript")
document.write("<br>")
document.write("Good Bye...!!")
</script>
</head>

Writing into the HTML output using document.write().
The write() method writes HTML expressions or JavaScript code to a document.

Syntax
document.write(exp1,exp2,exp3,...)

Example:
<!doctype html>
<body>
<script type='text/javascript'>
document.write("<h1>Hello World!</h1><p>Have a nice day!</p>");
</script>
</body>
 
Document writeln() Method
The writeln() method is identical to the write() method, with the addition of writing a new space character after each statement.

Syntax
document.writeln(exp1,exp2,exp3,...)

Example:
<!doctype html>
<body>
<pre>
<script type='text/javascript'>
document.write("Hello World!");
document.write("Have a nice day!");
</script>
</pre>
<pre>
<script type='text/javascript'>
document.writeln("Hello World!");
document.writeln("Have a nice day!");
</script>
</pre>
</body>

JavaScript Statements
A JavaScript program is a list of logical statements. In HTML, JavaScript programs are executed by the web browser. JavaScript statements are composed of Values, Operators, Expressions, Keywords, and Comments.

Example:
<!DOCTYPE html>
<body>
<p id="msg"></p>
<script type='text/javascript'>
document.getElementById("msg").innerHTML = "Hello Raju Sir.";
</script>
</body>

JavaScript Code
JavaScript code is a sequence of JavaScript statements. Each statement is executed by the browser in the sequence they are written.

This example will write a heading and two paragraphs to a web page:
Example
<!doctype html>
<head>
<script type="text/javascript">
document.write("<h1>This is a heading</h1>");
document.write("<p>This is a paragraph.</p>");
</script> 
</head>

JavaScript Blocks
JavaScript statements can be grouped together in blocks. Blocks start with a left curly bracket {, and end with a right curly bracket }. The purpose of a block is to make the sequence of statements execute together. 

This example will write a heading and two paragraphs to a web page:
Example
<!doctype html>
<head>
<script type="text/javascript">
{
document.write("<h1>This is a heading</h1>");
document.write("<p>This is a paragraph.</p>");
document.write("<p>This is another paragraph.</p>");
}
</script>
</head>


Comments in JAVASCRIPT:
Comments are non-executable statements or ignore statements. Comments are using to declare customize statements or user defined statements within the source code.

In JavaScript comments are classified into the following types.
1. Single line comments
2. Multiline comments

1. Single line comments
These comments are applicable to a specific line or statement. It is always denoted with (//) double forward slash.

Syntax:
// This is a comment

Example:
<!doctype html>
<head>
<script type='text/javascript'>
//document.write("Hello Comment");
//document.write("Thank U");
</script>
</head>

O/P: Blank Page

2. Multiline comments:
These comments are applicable one or more lines. It is always denoted with /* */ 

Syntax:
/* 
Statements
Statements
*/

Example:
<!doctype html>
<head>
<script>
/* document.write("Welcome to JS");
document.write("Thank U");
document.write("Good Bye"); */
</script>
</head>

JavaScript Values
The JavaScript syntax defines two types of values:
Fixed values => Fixed values are called Literals/Constants.
Variable values => Variable values are called Variables/Identifier.

JavaScript Literals
1. Numbers are written with or without decimals:
10.50; 1001

Example:
<!DOCTYPE html>
<body>
<script>
var a=10
document.write("The Value is: "+a +"<br>")
var a=9.99
document.write("The Value is: "+a)
</script>
</body>

2. Strings are text, written within double or single quotes:
"JavaScrpt"; 'JavaScript'

JavaScript Variables
In a programming language, variables are used to store data values. JavaScript uses the var keyword to declare variables. An equal sign is used to assign values to variables.
Example:
<!DOCTYPE html>
<body>
<h2>JavaScript Variables</h2>
<script>
var x; x = 6;
document.write("The Value is: "+x +"<br>")
</script>
</body>


JavaScript and Camel Case
Programmers have used different ways of joining multiple words into one variable name:

Hyphens:
first-name, last-name, master-card, inter-city.

Underscore:
first_name, last_name, master_card, inter_city.

Upper Camel Case (Pascal Case):
FirstName, LastName, MasterCard, InterCity.

Lower Camel Case:
JavaScript programmers tend to use camel case that starts with a lowercase letter:
firstName, lastName, masterCard, interCity.

Semicolons are Optional:
Simple statements in JavaScript are generally followed by a semicolon character.

Example:
<!doctype html>
<script> 
var1 = 10 
var2 = 20 
</script>

Example:
<!doctype html>
<script> 
var1 = 10; var2 = 20; 
</script>

Example:
<!DOCTYPE html>
<body>
<script>
document.write("Hello Welcome to JS");document.write("Hello Welcome to JS")
</script>
</body>

Note: It is a good programming practice to use semicolons.

JavaScript White Space
JavaScript ignores multiple spaces. You can add white space to your script to make it more readable.

Example:
<!DOCTYPE html>
<body>
<script>
var Name =  "RajuSir";
var Name="RajuSir"; 
</script>
</body>

JavaScript is Case Sensitive
A function named "myfunction" is not the same as "myFunction" and a variable named "myVar" is not the same as "myvar".

Example:
<!DOCTYPE html>
<body>
<script>
var a=10;A=100;b=1;B=100
document.write(a+A)
document.write("<br/>")
document.write(b-B)
</script>
</body>
-----------------------------------------------------------------------------------------------------------------------------------------------
JavaScript Popup Boxes
JavaScript has three kind of popup boxes: 
1. Alert box
2. Confirm box
3. Prompt box.

Alert Box
An alert box is often used if you want to make sure information comes through the user. When an alert box pops up, the user will have to click "OK" to proceed. 

Syntax
alert("Message");

Example:
<html>
<head>
<title>Alert box</title>
<script type="text/javascript">
alert("Click OK to Proceed");
alert("Naresh i Technologies");
</script>
</head>
<body>
</body>
</html>

How to write text on multiple lines in an alert box?
We can't use the <br> tag here, as we did in write(), because alert() is a method of the window object that cannot interpret HTML tags. Instead we use the new line escape character.

Escape characters in JavaScript:
Escape characters are characters that can be interpreted in some alternate way then what we intended to. To print these characters as it is, include backslash ‘\’ in front of them.
Code	Result
\b	Backspace
\f	Form Feed
\n	New Line
\r	Carriage Return
\t	Horizontal Tabulator
\v	Vertical Tabulator
\\	Backslash

Example:
<script>
alert("JavaScript\nis\na\nclient-side\nprogramming\nlanguage");
</script>

Example:
<script>
alert("1\n\t2\n\t\t3");
</script>

Example:
<html>
<head>
<script type="text/javascript">
function show_alert()
{
alert("I am an alert box!");
}
</script>
</head>
<body>
<input type="submit" onclick="show_alert()" value="Show alert box" />
</body>
</html>

Confirm Box:
A confirm box is often used if you want the user to verify or accept something. When a confirm box pops up, the user will have to click either "OK" or "Cancel" to proceed. If the user clicks "OK", the box returns true. If the user clicks "Cancel", the box returns false.

Syntax
confirm("Message");

Example:
<html>
<head>
<title>Confirm box</title>
<script type="text/javascript">
confirm("Click OK or Cancel");
</script>
</head>
<body>
</body>
</html>

Example:
<script>
xyz=confirm("Select OK or Cancel");
if (xyz==true)
{
alert("u selected OK");
}
else
{
alert("u selected cancel");
}
</script>
<body>
</body>

Example:
<html>
<head>
<script type="text/javascript">
function show_confirm()
{
var r=confirm("Press a button");
if (r==true)
  {
  alert("You pressed OK!");
  }
else
  {
  alert("You pressed Cancel!");
  }
}
</script>
</head>
<body>
<input type="button" onclick="show_confirm()" value="Show confirm box" />
</body>
</html>

Prompt Box
A prompt box is often used if you want the user to input a value before entering a page. When a prompt box pops up, the user will have to click either "OK" or "Cancel" to proceed after entering an input value. If the user clicks "OK" the box returns the input value. If the user clicks "Cancel" the box returns null.

Syntax
prompt("sometext","defaultvalue");

Example:
<html>
<head>
<title>Prompt box</title>
<script type="text/javascript">
var x=prompt("Enter the number","20");
alert("The Value that u entered is "+x);	
</script>
</head>
<body>
</body>
</html>

Example2:
<html>
<head>
<script type="text/javascript">
function show_prompt()
{
var name=prompt("Please enter your name","Raju");
if (name!=null && name!="")
  {
  document.write("<p>Hello " + name + "! How are you today?</p>");
  }
}
</script>
</head>
<body>
<input type="button" onclick="show_prompt()" value="Show prompt box" />
</body>
</html>

JavaScript Variables/identifiers:
A JavaScript variable is simply a name of storage location. There are some rules while declaring a JavaScript variable.

1 Names can contain letters, digits, underscores, and dollar signs.
2 Names must begin with a letter
3 Names can also begin with $ and _ (but we will not use it in this tutorial)
4. Reserved words (like JavaScript keywords) cannot be used as names
5. You declare JavaScript variables with the var keyword
6. Names are case sensitive (y and Y are different variables)

Correct JavaScript variables
var x = 10;  
var _value="NareshIT";  

Incorrect JavaScript variables
var  1abc=30;  
var *a=320;  

Example:
<!doctype html>
<head>
<script>  
var x = 10;  
var y = 20;  
var z=x+y;  
document.write("The Result is: "+z);  
</script>
</head>  

One Statement, Many Variables
You can declare many variables in one statement. Start the statement with var and separate the variables by comma.

Example:
<!DOCTYPE html>
<body>
<h2>JavaScript Variables</h2>
<script>
var person = "SARA", bname = "Yamaha", price = 2000;
document.write(bname +"<br>")
document.write(price +"<br>")
</script>
</body>

Value = undefined
A variable declared without a value will have the value undefined.

Example:
<!DOCTYPE html>
<body>
<h2>JavaScript Variables</h2>
<script>
var bname;
document.write(bname)
</script>
</body>

Re-Declaring JavaScript Variables
If you re-declare a JavaScript variable, it will not lose its value.

Example:
<!DOCTYPE html>
<body>
<h2>JavaScript Variables</h2>
<p id="txt"></p>
<script>
var bname = "Yamaha";
var bname="HeroHonda";
document.write(bname)
</script>
</body>

JavaScript Dollar Sign $
A letter (A-Z or a-z), A dollar sign ($), Or an underscore (_)
Since JavaScript treats a dollar sign as a letter, identifiers containing $ are valid variable names:

Example:
<!DOCTYPE html>
<body>
<h2>JavaScript $</h2>
<script>
var $ = 1;
var $myMoney = 4;
document.write( $ + $myMoney) 
</script>
</body>

JavaScript Underscore (_)
Since JavaScript treats underscore as a letter, identifiers containing _ are valid variable names:

Example:
<!DOCTYPE html>
<body>
<h2>JavaScript _</h2>
<script>
var _x = 2;
var _y = 5;
document.write(_x + _y);
</script>
</body>
---------------------------------------------------------------------------------------------------------------------------------------------
JavaScript Variables/identifiers:
A JavaScript variable is simply a name of storage location. There are some rules while declaring a JavaScript variable.

1 Names can contain letters, digits, underscores, and dollar signs.
2 Names must begin with a letter
3 Names can also begin with $ and _ (but we will not use it in this tutorial)
4. Reserved words (like JavaScript keywords) cannot be used as names
5. You declare JavaScript variables with the var keyword
6. Names are case sensitive (y and Y are different variables)

Correct JavaScript variables
var x = 10;  
var _value="NareshIT";  

Incorrect JavaScript variables
var  1abc=30;  
var *a=320;  

Example:
<!doctype html>
<head>
<script>  
var x = 10;  
var y = 20;  
var z=x+y;  
document.write("The Result is: "+z);  
</script>
</head>  

One Statement, Many Variables
You can declare many variables in one statement. Start the statement with var and separate the variables by comma.

Example:
<!DOCTYPE html>
<body>
<h2>JavaScript Variables</h2>
<script>
var person = "SARA", bname = "Yamaha", price = 2000;
document.write(bname +"<br>")
document.write(price +"<br>")
</script>
</body>

Value = undefined
A variable declared without a value will have the value undefined.

Example:
<!DOCTYPE html>
<body>
<h2>JavaScript Variables</h2>
<script>
var bname;
document.write(bname)
</script>
</body>

Re-Declaring JavaScript Variables
If you re-declare a JavaScript variable, it will not lose its value.

Example:
<!DOCTYPE html>
<body>
<h2>JavaScript Variables</h2>
<p id="txt"></p>
<script>
var bname = "Yamaha";
var bname;
document.getElementById("txt").innerHTML = bname;
</script>
</body>

JavaScript Dollar Sign $
A letter (A-Z or a-z), A dollar sign ($), Or an underscore (_)
Since JavaScript treats a dollar sign as a letter, identifiers containing $ are valid variable names:

Example:
<!DOCTYPE html>
<body>
<h2>JavaScript $</h2>
<script>
var $ = 1;
var $myMoney = 4;
document.write( $ + $myMoney) 
</script>
</body>

JavaScript Underscore (_)
Since JavaScript treats underscore as a letter, identifiers containing _ are valid variable names:

Example:
<!DOCTYPE html>
<body>
<h2>JavaScript _</h2>
<script>
var _x = 2;
var _y = 5;
document.write(_x + _y);
</script>
</body>

Using let and const (ES6)
Using the var keyword was the only way to declare a JavaScript variable. JavaScript (ES6) allows the use of the const keyword to define a variable that cannot be reassigned, and the let keyword to define a variable with restricted scope.

JavaScript Block Scope
Variables declared with the var keyword cannot have Block Scope. Variables declared inside a block {} can be accessed from outside the block.

Example
{ 
  var x = 5; 
}
// x CAN be used here

Example:
<!doctype html>
<head>
<script>
{ 
    var x = 5; 
    document.write(x)
  }
  // x CAN be used here
  document.write(x)
</script>
</head>

NOTE:
Before ES2015 JavaScript did not have Block Scope. Variables declared with the let keyword can have Block Scope. Variables declared inside a block {} cannot be accessed from outside the block:

Example
{ 
  let x = 5;
}
// x can NOT be used here

Example:
<head>
<script>
{ 
    let x = 5; 
    document.write(x)
  }
  // x CAN be used here
  document.write(x) 
</script>
</head>

Redeclaring Variables
Redeclaring a variable using the var keyword can impose problems. Redeclaring a variable inside a block will also redeclare the variable outside the block:

Example:
<!DOCTYPE html>
<body>
<h2>Declaring a Variable Using var</h2>
<script>
var  x = 100;
// Here x is 100
{  
  var x = 20;
  // Here x is 20
}
// Here x is 20
document.write(x);
</script>
</body>

JavaScript const
In JavaScript we can declare constants using 'const' keyword. These are literals, never allow to change.

Assigned when Declared
JavaScript const variables must be assigned a value when they are declared:

InValid Declaration
const PI;
PI = 3.14159265359;

Valid Declaration
Correct
const PI = 3.14159265359;

Example:
<!DOCTYPE html>
<body>
<script>
    // Declaring variables
    let name = "Subba Raju Sir";
    let age = 43;
    let isStudent = true;
    
    // Printing variable values
    document.write(name + "<br>");
    document.write(age + "<br>");
    document.write(isStudent + "<br>");
    
    // Declaring constant
    const PI = 3.14;
    
    // Printing constant value
    document.write(PI); // 3.14
    
    // Trying to reassign
    PI = 10; // error
    </script>
</body>

Block Scope
Declaring a variable with const is similar to let when it comes to Block Scope. The x declared in the block, in this example, is not the same as the x declared outside the block:

Example:
<!DOCTYPE html>
<body>
<h2>Declaring a Variable Using const</h2>
<p id="txt"></p>
<script>
var  x = 100;
// Here x is 100
{  
  const x = 20;
  // Here x is 20
}
// Here x is 100
document.write(x);
</script>
</body>

Javascript Data Types
JavaScript provides different data types to hold different types of values. There are two types of data types in JavaScript.
1. Primitive Data Types
2. Non Primitive(reference) Data Types

JavaScript is a dynamic type language, means you don't need to specify type of the variable because it is dynamically used by JavaScript engine. You need to use var here to specify the data type. It can hold any type of values such as numbers, strings etc.

Example:
var a=40;//holding number  
var b="RajuSir";//holding string  


1. Primitive Data Types
JavaScript has five primitive data types. These are the most simple forms of data we can use in JS programming.

Data Type	Description
String		Represents sequence of characters e.g. "JS"
Number		Represents numeric values e.g. 100
Boolean		Represents boolean value either false or true
Undefined	Represents undefined value
Null		Represents null i.e. no value at all

JavaScript Strings
A string is a variable which stores a series of characters like "nit". A string can be any text inside quotes. You can use single or double quotes:

Example
var name="nit";
var name='nit';

Example:
<!doctype html>
<head>
<script type="text/javascript">
document.write("Hello Welcome to JS Strings")
document.write("<br/>")
document.write('Hello Welcome to JS Strings')
</script>
</head>

Example:
<!doctype html>
<head>
<script type="text/javascript">
Str1="Hello",var Str2='World'
document.write("First String is: "+Str1)
document.write("<br/>")
document.write("Second String is: "+Str2)
</script>
</head>

Number Data Type
JavaScript has only one type of numbers. Numbers can be written with, or without decimals:

Example
var x1=34.00;      // Written with decimals
var x2=34;         // Written without decimals

Example:
<!doctype html>
<head>
<script type="text/javascript">
var x=10;var y=20.99; var z=x+y;
var name="Naresh i Technologies";
document.write("The value of x is "+x);
document.write("<br>");
document.write("The value of y is "+y);
document.write("<br>");
document.write("The value of z is "+z);
document.write("<br>");
document.write(name+" is Leader in IT Training");	
</script>
</head>

Boolean Data Type
The Boolean data type
The Boolean data type is used to represent a Boolean value. A Boolean value can be used to represent data that is in either of two states.Booleans are often used in conditional testing.

The two Boolean values
true // equivalent to true, yes, or on
false // equivalent to false, no, or off

Example:
<!doctype html>
<head>
<script type="text/javascript">
var x=10;var y=20;
document.write("The value is: "+(x>y));
document.write("<br>");
document.write("The value is: "+(x<y));
</script>
</head>

Undefined 
It is the value of a variable with no value. 

Example
var x;               // Now x is undefined

Example:
<!doctype html>
<head>
<script type="text/javascript">
var x;
document.write("The value is: "+x +"<br/>");
var y;
document.write("The value is: "+y);
</script>
</head>

null:
Variables can be emptied by setting the value to null;

Example:
var x=null;       // Now x is null

Example:
<!doctype html>
<head>
<script type="text/javascript">
var x=null;
document.write("The value is: "+x +"<br/>");
var y=null;
document.write("The value is: "+y);
</script>
</head>

2. Non Primitive Data Types
Object:
Declaring Variables as Objects.When a variable is declared with the keyword "new", the variable is declared as an object:

Syntax:
var name = new String();//String Object
var x =new Number();//Number Object
var y =new Boolean();//Boolean Object

Dynamic Types:
JavaScript has dynamic types. This means that the same variable can be used as different types:

Example
var x;               // Now x is undefined
var x = 5;           // Now x is a Number
var x = "RaaJ";      // Now x is a String

Example:
<!doctype html>
<body>
<script>
var x;
document.write(x +"<br/>");
var x=96; 
document.write(x);
document.write("<br/>");
var x="Modern Java Script";
document.write(x +"<br/>");
var x=null;
document.write(x +"<br/>");
var x=true;
document.write(x +"<br/>");
</script>
</body>

HTML <noscript> Tag
It is used to provide an alternate content for users that have disabled scripts in their browser or have a browser that doesn’t support client-side scripting. It is a paired tag.

Syntax: 
<noscript>..............</noscript>

Example:
<!doctype html>
<head>
<script>
document.write("Welcome to JavaScripting")
document.write("<br/>")
document.write("Welcome to JavaScripting")
</script>
</head>
<body>
<noscript>
<p>OOPs Script unable to execute on this web browser...!!</p>
</noscript>
</body>
---------------------------------------------------------------------------------------------------------------------------------
JavaScript Operators
JavaScript operators are symbols that are used to perform operations on operands.There are following types of operators in JavaScript.

1 Arithmetic Operators
2 Assignment Operators
3 JavaScript String Operators
4 JavaScript Incrementing and Decrementing Operators
5 JavaScript Logical Operators
6 JavaScript Comparison Operators

JavaScript Arithmetic Operators
Arithmetic operators are used to perform arithmetic operations on the operands.

Operator		Description		Example
+		Addition			10+20 = 30
-		Subtraction		20-10 = 10
*		Multiplication		10*20 = 200
/		Division			20/10 = 2
%		Modulus (Remainder)	20%10 = 0
++		Increment		var a=10; a++; Now a = 11
--		Decrement		var a=10; a--; Now a = 9


Example:
<!DOCTYPE html>
<body>
    <script>
    var x = 10;
    var y = 4;
    document.write(x + y); // display: 14
    document.write("<br>");
    
    document.write(x - y); // Prints: 6
    document.write("<br>");
    
    document.write(x * y); // Prints: 40
    document.write("<br>");
    
    document.write(x / y); // Prints: 2.5
    document.write("<br>");
    
    document.write(x % y); // Prints: 2
    </script>
</body>


JavaScript Assignment Operators
The assignment operators are used to assign values to variables.
Operator 	Description 		Example 	Is The Same As
= 	Assign 			x = y 	x = y
+= 	Add and assign 		x += y 	x = x + y
-= 	Subtract and assign 		x -= y 	x = x - y
*= 	Multiply and assign 		x *= y 	x = x * y
/= 	Divide and assign quotient 	x /= y 	x = x / y
%= 	Divide and assign modulus 	x %= y 	x = x % y

Example:
<!DOCTYPE html>
<body>
    <script>
    var x;    // Declaring Variable
    x = 10;
    document.write(x + "<br>"); // Prints: 10
    
    x = 20;
    x += 30;
    document.write(x + "<br>"); // Prints: 50
     
    x = 50;
    x -= 20;
    document.write(x + "<br>"); // Prints: 30
     
    x = 5;
    x *= 25;
    document.write(x + "<br>"); // Prints: 125
     
    x = 50;
    x /= 10;
    document.write(x + "<br>"); // Prints: 5
     
    x = 100;
    x %= 15;
    document.write(x); // Prints: 10
    </script>
</body>

JavaScript String Operators
There are two operators which can also used be for strings.

Operator 	Description 		Example 		Result
+ 	Concatenation 		str1 + str2 	Concatenation of str1 and str2
+= 	Concatenation assignment 	str1 += str2 	Appends the str2 to the str1

Example:
<!DOCTYPE html>
<body>
    <script>
    var str1 = "Hello";
    var str2 = " World!";
    document.write(str1 + str2 + "<br>"); // Outputs: Hello World!
    str1 += str2; 
    document.write(str1); // Outputs: Hello World!
    </script>
</body>

JavaScript Incrementing and Decrementing Operators
The increment/decrement operators are used to increment/decrement a variable's value.
Operator 	Name 		Effect
++x 	Pre-increment 	Increments x by one, then returns x
x++ 	Post-increment 	Returns x, then increments x by one
--x 	Pre-decrement 	Decrements x by one, then returns x
x-- 	Post-decrement 	Returns x, then decrements x by one


Example:
<!DOCTYPE html>
<body>
    <script>
    var x; // Declaring Variable
    x = 10;
    document.write(++x); // Prints: 11
    document.write("<p>" + x + "</p>");   // Prints: 11
     
    x = 10;
    document.write(x++); // Prints: 10
    document.write("<p>" + x + "</p>");   // Prints: 11
     
    x = 10;
    document.write(--x); // Prints: 9
    document.write("<p>" + x + "</p>");   // Prints: 9
     
    x = 10;
    document.write(x--); // Prints: 10
    document.write("<p>" + x + "</p>");   // Prints: 9
    </script>
</body>


JavaScript Logical Operators
The logical operators are typically used to combine conditional statements.

Operator 	Name 	Example 	Result
&& 	And 	x && y 	True if both x and y are true
|| 	Or 	x || y 	True if either x or y is true
! 	Not 	!x 	True if x is not true

Example:
<!doctype html>
   <body>   
      <script type = "text/javascript">
            var a = true;
            var b = false;
            var linebreak = "<br />";
      
            document.write("(a && b) => ");
            result = (a && b);
            document.write(result);
            document.write(linebreak);
         
            document.write("(a || b) => ");
            result = (a || b);
            document.write(result);
            document.write(linebreak);
         
            document.write("!(a && b) => ");
            result = (!(a && b));
            document.write(result);
            document.write(linebreak);
      </script>      
   </body>

JavaScript Comparison Operators
The comparison operators are used to compare two values in a Boolean fashion.

Operator 		Name 			Example 		
== 		Equal 			x == y 		
=== 		Identical 			x === y 		
!= 		Not equal 			x != y 	
!== 		Not identical 		x !== y 	
< 		Less than 			x < y 	
> 		Greater than 		x > y 	
>= 		Greater than or equal to 	x >= y 	
<= 		Less than or equal to 	x <= y 	

Example:
<!DOCTYPE html>
<body>
    <script>
    var x = 25;
    var y = 35;
    var z = "25";
    document.write(x == z);  // Prints: true, Checks only values
    document.write("<br>");
    
    document.write(x === z); // Prints: false,Checks including data types
    document.write("<br>");
    
    document.write(x != y);  // Prints: true
    document.write("<br>");
    
    document.write(x !== z); // Prints: true
    document.write("<br>");
    
    document.write(x < y);   // Prints: true
    document.write("<br>");
    
    document.write(x > y);   // Prints: false
    document.write("<br>");
    
    document.write(x <= y);  // Prints: true
    document.write("<br>");
    
    document.write(x >= y);  // Prints: false
    </script>
</body>



JavaScript Conditional Statements
JavaScript also allows you to write code that perform different actions based on the results of a logical or comparative test conditions at run time. There are several conditional statements in JavaScript that you can use to make decisions.

1 The if statement 
2 The if...else statement 
3 The if...else if....else statement 
4 The switch...case statement 
5 The Ternary Operator

The if Statement
The if statement is used to execute a block of code only if the specified condition evaluates to true. 

Syntax
if(condition) {
    // Code to be executed
} 

Example:
<!doctype html>
<body>
<script>  
var a=prompt("Enter Any Number: ");  
if(a>10)
{  
document.write("Value of a is greater than 10");  
}  
</script>  
</body>

Example:
<!doctype html>
<head>
<script type="text/javascript">
var x = prompt("Enter number 10");
if(x==10)
{
 alert("Its Correct");
}
</script>
</head>
----------------------------------------------------------------------------------------------------------------------------
JavaScript Conditional Statements
JavaScript also allows you to write code that perform different actions based on the results of a logical or comparative test conditions at run time. There are several conditional statements in JavaScript that you can use to make decisions.

1 The if statement 
2 The if...else statement 
3 The if...else if....else statement 
4 The switch...case statement  
5 The Ternary Operator 

The if Statement
The if statement is used to execute a block of code only if the specified condition evaluates to true. 

Syntax
if(condition) {
    // Code to be executed
} 

Example:
<!doctype html>
<body>
<script>  
var a=prompt("Enter Any Number: ");  
if(a>10)
{  
document.write("Value of a is greater than 10");  
}  
</script>  
</body>

Example:
<!doctype html>
<head>
<script type="text/javascript">
var x = prompt("Enter number 10");
if(x==10)
{
 alert("Its Correct");
}
</script>
</head>

2. if...else statement: 
It evaluates the content whether condition is true or false.

Syntax
if (condition)
  {
  True Block Statements
  True Block Statements
  }
else
  {
   False Block Statements
   False Block Statements
   }

Example:
<!doctype html>
<body>
<script>  
var a=prompt("Enter Any Number: ")  
if(a%2==0)
{  
document.write("a is Even Number");  
}  
else
{  
document.write("a is Odd Number");  
}  
</script>
</body>

Example:
<!doctype html>
<head>
<script type="text/javascript">
var b = prompt("Enter any number");
if (b > 100)
{
document.write("b is greater than 100")
}
else
{
document.write("b is less than or equal to 100")
}
</script>
</head>

If...else if...else Statement:
It is used to select one of several blocks of code to be executed.

Syntax
if(condition1) {
    // Code to be executed if condition1 is true
} else if(condition2) {
    // Code to be executed if the condition1 is false and condition2 is true
} else {
    // Code to be executed if both condition1 and condition2 are false
} 

Example:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cascading Style Sheets...!!</title>
</head>
<body>
<script>
    var x=prompt("Enter Any Number: ")
    parseInt(x)
    if(x>0)
    {
        document.write("YES POSITIVE")
        document.write("<br>")
        document.write("It is if block")
    }
    else if(x<0)
    {
        document.write("YES NEGATIVE:")
        document.write("<br>")
        document.write("It is elseif block")
    }
    else if(x==0)
    {
        document.write("ZEROZERO")
        document.write("<br>")
        document.write("It is elseif block")
    }
    else
    {
        document.write("Sorry Invalid Input")
        document.write("<br>")
        document.write("It is else block")
    }
</script>    
</body>
</html>

Example:
<!doctype html>
<body>
<script>  
var a=20;  
if(a==10)
{  
document.write("a is equal to 10");  
}  
else if(a==15)
{  
document.write("a is equal to 15");  
}  
else if(a==20)
{  
document.write("a is equal to 20");  
}  
else
{  
document.write("a is not equal to 10, 15 or 20");  
}  
</script>  
</body>

Example:
JavaScript Switch Statement
Use the switch statement to select one of many blocks of code to be executed. 

Syntax
switch(n)
{
case 1:
  execute code block 1
  break;
case 2:
  execute code block 2
  break;
default:
  code to be executed if 
n is different from case 1 and 2
}

The default Keyword
Use the default keyword to specify what to do if there is no match:

Example:
<!doctype html>
<head>
<script>
var grade=prompt("Enter any Upper Case Alphabet: ","A");
document.write("Entering switch block<br />");
switch (grade)
{
  case 'A': document.write("Good job<br />");
            break;
  case 'B': document.write("Pretty good<br />");
            break;
  case 'C': document.write("Passed<br />");
            break;
  case 'D': document.write("Not so good<br />");
            break;
  case 'F': document.write("Failed<br />");
            break;
  default:  document.write("Unknown grade<br />")
}
document.write("Exiting switch block");
</script>
</head>

Example:
<!doctype html>
<head>
<script type="text/javascript">
var MyNum=prompt("Enter any Number","5");
switch (MyNum)
{
  case '1': document.write("Selected First Block<br />");
            break;
  case '2': document.write("Selected Second Block<br />");
            break;
  case '3': document.write("Selected third Block<br />");
            break;
  case '4': document.write("Selected Fourth Block<br />");
            break;
  case '5': document.write("Selected Fifth Block<br />");
            break;
  default:  document.write("Default Block<br />")
}
</script>
</head>

Example:
<!doctype html>
<head>
<script type="text/javascript">
var book=prompt
("Enter your favorite book(HTML, JS, CSS, jQuery): ","JS")
switch(book)
{
case 'HTML':
alert("You are Selected HTML");
break;
case 'JS':
alert("You are Selected JS");
break;
case 'CSS':
alert("You are Selected CSS");
break;
case 'jQuery':
alert("You are Selected jQuery");
break;
default:
alert("You are Selected Wrong Book");
}
</script>
</head>

Example:
<!DOCTYPE html>
<body>
<script>  
var grade=prompt("Enter Any Grade: ");  
var result;  
switch(grade)
{  
case 'A':  
result="A Grade";  
break;  
case 'B':  
result="B Grade";  
break;  
case 'C':  
result="C Grade";  
break;  
default:  
result="No Grade";  
}  
document.write(result);  
</script>  
</body>

Example:
<!doctype html>
<script>
var page=prompt("Enter any desired Page Name(Home,About,News,Login,Links): ","Home")
document.write("Entering switch block<br />")
switch (page)
{
case "Home": document.write("You selected Home Page")
break
case "About": document.write("You selected About Page")
break
case "News": document.write("You selected News Page")
break
case "Login": document.write("You selected Login Page")
break
case "Links": document.write("You selected Links Page")
break
default:  document.write("You selected Unknown page<br />")
}
</script>

The Ternary Operator
The ternary operator provides a shorthand way of writing the if...else statements. The ternary operator is represented by the question mark (?) symbol and it takes three operands: a condition to check, a result for true, and a result for false.

Syntax:
var result = (condition) ? value1 : value2

NOTE:
The ternary operator evaluates the test condition.
    If the condition is true, expression1 is executed.
    If the condition is false, expression2 is executed.
The ternary operator takes three operands, hence, the name ternary operator. It is also known as a conditional operator.

Example:
<!DOCTYPE html>
<body>
    <script>
    var age = prompt("Enter Age: ")
    var userType = age < 18 ? 'Child' : 'Adult';
    document.write(userType); 
    var age = prompt("Enter Age: ")
    var userType = age < 18 ? 'Child' : 'Adult';
   document.write("<br/>");
    document.write(userType);
    </script>
</body>

JavaScript Reserved Words:
Reserved words or keywords, they cannot be used as JavaScript variables, functions, methods, loop labels, or any object names.

abstract 		arguments 	await* 		boolean
break 		byte 		case 		catch
char 		class* 		const 		continue
debugger 		default 		delete 		do
double 		else 		enum* 		eval
export* 		extends* 		false 		final
finally 		float 		for 		function
goto 		if 		implements 	import*
in 		instanceof 	int 		interface
let* 		long 		native 		new
null 		package 		private 		protected
public 		return 		short 		static
super* 		switch 		synchronized 	this
throw 		throws 		transient 		true
try 		typeof 		var 		void
volatile 		while 		with 		yield

NOTE:
Words marked with* are new in ECMAScript 5 and 6. 

Removed Reserved Words
The following reserved words have been removed from the ECMAScript 5/6 standard:
abstract 		boolean 		byte 		char
double 		final 		float 		goto
int 		long 		native 		short
synchronized 	throws 		transient 		volatile
------------------------------------------------------------------------------------------------------------------------------------------------------
JavaScript Looping Statements:
Different Kinds of Loops
JavaScript supports different kinds of loops:
1 for - loops through a block of code a number of times
2 while - loops through a block of code while a specified condition is true
3 do/while - also loops through a block of code while a specified condition is true
4 for/in - loops through the properties of an object
5 for/of - loops through the values of an iterable object
6 forEach() method calls a function once for each element in an array.

for Loop
A for loop enables a particular set of conditions to be executed repeatedly until a condition is satisfied.

Syntax:
for (initialization; test condition; iteration statement)
{
     Statement(s) to be executed if test condition is true
     Statement(s) to be executed if test condition is true
}
 
Example:
<!doctype html>
<body>
<script type="text/javascript">
for (i=1;i<=5;i++)
{
document.write("The number is " + i);
document.write("<br />");
}
</script>
</body>
------------------------------------------------------------------------------------------------------------------------------------------------
JavaScript Looping Statements:
Different Kinds of Loops
JavaScript supports different kinds of loops:
1 for - loops through a block of code a number of times
2 while - loops through a block of code while a specified condition is true
3 do/while - also loops through a block of code while a specified condition is true
4 for/in - loops through the properties of an object
5 for/of - loops through the values of an iterable object
6 forEach() method calls a function once for each element in an array.


for Loop
A for loop enables a particular set of conditions to be executed repeatedly until a condition is satisfied.

Syntax:
for (initialization; test condition; iteration statement)
{
     Statement(s) to be executed if test condition is true
     Statement(s) to be executed if test condition is true
}
 
Example:
<!doctype html>
<body>
<script type="text/javascript">
for (i=1;i<=5;i++)
{
document.write("The number is " + i);
document.write("<br />");
}
</script>
</body>

Example:
<!doctype html>
<body>
<script type="text/javascript">
for (i = 1; i <= 6; i++)
{
document.write("<h" + i + ">This is heading ");
document.write("</h" + i + ">");
}
</script>
</body>

JavaScript While Loop 
There are two key parts to a JavaScript while loop:
1.The conditional statement which must be True for the while loop's code to be executed.
2.The while loop's code that is contained in curly braces "{ and }" will be executed if the condition is True.

Syntax
while (variable<=endvalue)
  {
  code to be executed
  code to be executed
  }

Example1
<!doctype html>
<body>
<script type="text/javascript">
var i=1;
while (i<=10)
{
document.write("The number is " + i);
document.write("<br />");
i++;
}
</script>
</body>

Example:
<!doctype html>
<head>
<script>
counter=0
while (counter < 5)
{
document.write("Counter: " + counter + "<br />")
++counter
}
</script>
</head>

do...while Loops
When you require a loop to iterate at least once before any tests are made, use a
do...while loop, which is similar to a while loop, except that the test expression is
checked only after each iteration of the loop.

Syntax
do
  {
  code to be executed
  code to be executed
  }
while (variable<=endvalue);

Example:
<!doctype html>
<head>
<script type="text/javascript">
var i = 1;
do
{
document.write("The number is " + i);
document.write("<br />");
i++;
}
while (i <= 5);
</script>
</head>

Example:
<!doctype html>
<head>
<script>
count = 1
do
{
document.write(count + " times 7 is " + count * 7 + "<br />")
} 
while (++count <= 7)
</script>
</head>

JavaScript Break and Continue Statements
The break Statement
The break statement will break the loop and continue executing the code that follows after the loop (if any).

Example:
<!doctype html>
<body>
<script type="text/javascript">
var i=0;
for (i=0;i<=10;i++)
  {
  if (i==3)
    {
    break;
    }
  document.write("The number is " + i);
  document.write("<br />");
  }
</script>
</body>

The continue Statement
The continue statement will break the current loop and continue with the next value.

Example:
<!doctype html>
<body>
<script type="text/javascript">
var i=0;
for (i=0;i<=10;i++)
  {
  if (i==3)
    {
continue;
    }
  document.write("The number is " + i);
  document.write("<br />");
  }
</script>
</body>
JavaScript Looping Statements:
Different Kinds of Loops
JavaScript supports different kinds of loops:
1 for - loops through a block of code a number of times
2 while - loops through a block of code while a specified condition is true
3 do/while - also loops through a block of code while a specified condition is true
4 for/in - loops through the properties of an object
5 for/of - loops through the values of an iterable object
6 forEach() method calls a function once for each element in an array.


for Loop
A for loop enables a particular set of conditions to be executed repeatedly until a condition is satisfied.

Syntax:
for (initialization; test condition; iteration statement)
{
     Statement(s) to be executed if test condition is true
     Statement(s) to be executed if test condition is true
}
 
Example:
<!doctype html>
<body>
<script type="text/javascript">
for (i=1;i<=5;i++)
{
document.write("The number is " + i);
document.write("<br />");
}
</script>
</body>

Example:
<!doctype html>
<body>
<script type="text/javascript">
for (i = 1; i <= 6; i++)
{
document.write("<h" + i + ">This is heading ");
document.write("</h" + i + ">");
}
</script>
</body>

JavaScript While Loop 
There are two key parts to a JavaScript while loop:
1.The conditional statement which must be True for the while loop's code to be executed.
2.The while loop's code that is contained in curly braces "{ and }" will be executed if the condition is True.

Syntax
while (variable<=endvalue)
  {
  code to be executed
  code to be executed
  }

Example1
<!doctype html>
<body>
<script type="text/javascript">
var i=1;
while (i<=10)
{
document.write("The number is " + i);
document.write("<br />");
i++;
}
</script>
</body>

Example:
<!doctype html>
<head>
<script>
counter=0
while (counter < 5)
{
document.write("Counter: " + counter + "<br />")
++counter
}
</script>
</head>

do...while Loops
When you require a loop to iterate at least once before any tests are made, use a
do...while loop, which is similar to a while loop, except that the test expression is
checked only after each iteration of the loop.

Syntax
do
  {
  code to be executed
  code to be executed
  }
while (variable<=endvalue);

Example:
<!doctype html>
<head>
<script type="text/javascript">
var i = 1;
do
{
document.write("The number is " + i);
document.write("<br />");
i++;
}
while (i <= 5);
</script>
</head>

Example:
<!doctype html>
<head>
<script>
count = 1
do
{
document.write(count + " times 7 is " + count * 7 + "<br />")
} 
while (++count <= 7)
</script>
</head>

JavaScript Break and Continue Statements
The break Statement
The break statement will break the loop and continue executing the code that follows after the loop (if any).

Example:
<!doctype html>
<body>
<script type="text/javascript">
var i=0;
for (i=0;i<=10;i++)
  {
  if (i==3)
    {
    break;
    }
  document.write("The number is " + i);
  document.write("<br />");
  }
</script>
</body>

The continue Statement
The continue statement will break the current loop and continue with the next value.

Example:
<!doctype html>
<body>
<script type="text/javascript">
var i=0;
for (i=0;i<=10;i++)
  {
  if (i==3)
    {
continue;
    }
  document.write("The number is " + i);
  document.write("<br />");
  }
</script>
</body>
-----------------------------------------------------------------------------------------------------------------------------------------
Define Function?
A function is a block of code that will be executed only by an occurence of an event at that time fuction is called. A function can called from anywhere within the HTML page.  Function can define in the beginning of the <head> Tag.

A function is a group of reusable code which can be called anywhere in your program. This eliminates the need of writing same code again and again. This will help programmers to write modular code. This benefit is also known as "code reusability". 

Syntax
function functionName(parameters) 
{
code to be executed
code to be executed
}

Example:
<!DOCTYPE html>
<html>
    <title>Java-Script Functions...!!</title>
    <script type="text/javascript">
    //function body Part
    //Logical Implementation Part
    //This is Called Part
    //Declaring Arguments
    //Function is return type
    function WishMe()
    {
      window.alert("Welcome to Functions...!!")
      alert("FunctionsAreCodeReusability...!!")
    }
    </script>
</head>
<body>
  <!--Function Calling Part -->
  <!--Passing Parameters -->
  <!--Tail Part of the function -->
<p>Click the Following button to call the function....!!</p>
<button onclick="WishMe()">ClickHere.!</button>
</body>

Example:
<!doctype html>
<head>
<script type="text/javascript">
function popup() 
{
alert("Hello World")
}
</script>
</head>
<body>
<input type="button" onclick="popup()" value="popup">
</body>

Calling a Function with Arguments
When you call a function, you can pass along some values to it, these values are called arguments or parameters. These arguments can be used inside the function. You can send as many arguments as you like, separated by commas (,)

Syntax:
function myFunction(var1,var2)
{
JS Statements
JS Statements
JS Statements
}

The return Statement
The return statement is used to specify the value that is returned from the function. So, functions that are going to return a value must use the return statement. A JavaScript function can have an optional return statement.

Example:
<!doctype html>
<head>
<script type="text/javascript">
function myFunction()
{
return ("Hello world!");
}
</script>
</head>
<body>
<script type="text/javascript">
document.write(myFunction())
</script>
</body>

Example:
<!doctype html>
<head>
<script type="text/javascript">
function addition(x,y)
{
return x+y;
}
</script>
<script>
document.write("Addtion of two Number: "+addition(4,5));
</script>

Example:
<!doctype html>
<head>
<p>Click the button to call a function with arguments</p>
<script type="text/javascript">
function myFunction(name,job)
{
alert("Welcome " + name + ", the " + job);
}
</script>
<head>
<body>
<button onclick="myFunction('Subbaraju','SoftwareEngineer')">ClickMe</button>
</body>

Example:
<!doctype html>
<head>
<p>Click one of the buttons to call a function with arguments</p>
<script type="text/javascript">
function myFunction(name,job)
{
alert("Welcome " + name + ", the " + job);
}
</script>
</head>
<body>
<button onclick="myFunction('Smith','SQL Developer')">Click forSmith</button>
<button onclick="myFunction('Scott','Programmer')">Click for Scott</button>
</body>

The Lifetime of JavaScript Variables
Local JavaScript Variables
A variable declared within a JavaScript function becomes LOCAL and can only be accessed within that function. (the variable has local scope). You can have local variables with the same name in different functions.

Example:
<!doctype html>
<script>
function Scope_Local()
{
var x;
x = 5;
-------------
-------------
}

Example:
<!DOCTYPE html>
<html>
    <title>Java-Script Functions...!!</title>
    <script type="text/javascript">
	var a=10,b=20
    function Display1()
    {
      //Local Scope Variables
      //These are within the function
      var a=10,b=20
      document.write("The Result is: "+(a+b))
    }
    </script>
</head>
<body>
<button onclick="Display1()">HiTMe</button>
</body>
</html>

Global JavaScript Variables
Variables declared outside a function become GLOBAL, all scripts and functions on the web page can access it. Global variables are deleted when you close the page.

Example:
<!DOCTYPE html>
    <script type="text/javascript">
    //Global Scope
    b=1
    function Display1()
    {
      //Local Scope Variables
      //These are within the function
      var a=10,b=20
      document.write("The Result is: "+(a+b))
    }
    function Display2()
    {
      //Local Scope Variables
      //These are within the function
      var a=10
      document.write("The Result is: "+(a+b))
    }
    </script>
</head>
<body>
  <button onclick="Display1()">HiTMe</button>
  <button onclick="Display2()">HiTMe</button>
</body>

Example:
<!doctype html>
<script>
//Global Scope
year = 1997; 
function local_globalvariable () 
{ 
//LocalScope
month = 2; 
} 
local_globalvariable (); 
document . write ("year=" + year + " and month="+ month);
</script>	

Example:
<!doctype html>
<body>
<script>
//Global Scope
year = 2012; 
function local_globalvariable() 
{ 
//Local Scope
month = 8; 
}
function local_global_variable() 
{ 
//Local Scope
month = 9; 
}
local_globalvariable(); 
document . write ("year=" + Year + " and month="+ month);
document.write("<br/>");
local_global_variable(); 
document . write ("year=" + Year + " and month="+ month);
</script>	
</body>

BackGround Colors:
//document is an object represents webpage
// bgColor is the Property of doc object
Example:
<!DOCTYPE html>
<html>
    <title>Java-Script Functions...!!</title>
    <script type="text/javascript">
    function BgColorRed()
    {
      document.bgColor='red'
    }
    function BgColorBlue()
    {
      document.bgColor='blue'
    }
    function BgColorWhite()
    {
      document.bgColor='white'
    }
    </script>
</head>
<body>
<p>Click the following button to display Background Color..!!</p>  
<input type="submit" onclick="BgColorRed()" value="RedBg"/>
<input type="submit" onclick="BgColorBlue()" value="BlueBg"/>
<input type="submit" onclick="BgColorWhite()" value="WhiteBg"/>
</body>
-------------------------------------------------------------------------------------------------------------------------------------------
WORKING WITH JAVASCRIPT Events
By using JavaScript, we have the ability to create dynamic web pages. Events are actions that can be detected by JavaScript.  Every element on a web page has certain events which can trigger a JavaScript. Events are normally used in combination with functions.

EXAMPLES:
Clicking a button
A page is finished loading
An image is finished loading
Moving the mouse-cursor over an element
Entering an input field
Submitting a Form
A key Stroke .......!!

Events in JavaScript.
Event 		Description  
click 		Occurs when the user clicks on a link or form element
error		Occurs when an error happens during loading of doc 	
focus 		Occr when input focus is given to a form element.  
load 		Occurs when a page is loaded into Navigator 
mouseout  	Occurs when the user moves the pointer off 
mouseover  	Occurs when the user moves the pointer over
reset 		when the user clears a form using the Reset button  
select  		Occurs when the user selects a form element's field  
submit  		Occurs when a form is submitted
unload  		Occurs when the user leaves a page 

onClick: The onclick event occurs when the user clicks on an element.

Syntax
In HTML:
<element onclick="SomeJavaScriptCode">

In JavaScript:
object.onclick="SomeJavaScriptCode"

Example:
<!doctype html>
<head>
<script>
function displayDate()
{
document.getElementById("demo").innerHTML=Date();
}
</script>
</head>
<body>
<p>Click the button to execute the <h3>displayDate()</h3></p>
<button id="myBtn" onclick="displayDate()">ClickMe</button>
<p id="demo"></p>
</body>

Example:
<!doctype html>
<head>
<script type='text/javascript'>
function MyMsg()
{
alert("Welcome to JSEvents");
}
</script>
</head>
<body>
<p>Click the button to display the alert Msg ..</p>
<button  onclick="MyMsg()"><img src='html5.png' width=10px height=10px> </button>
<input type='submit' value="ClickMe" onclick="MyMsg()">
<input type='button' value="ClickMe" onclick="MyMsg()" >
</body>

ondblclick Event:
The ondblclick event occurs when the user double-clicks on an element.

Syntax:
In Html
<element ondblclick="SomeJavaScriptCode">

Syntax:
In JavaScript:
object.ondblclick="SomeJavaScriptCode"

Example:
<!doctype html>
<head>
<script type='text/javascript'>
function MyColor()
{
document.getElementById("col").style.color="#FF0099";
}
</script>
</head>
<body>
<p id="col">Double Click the button to Chage the Color of the Text...!</p>
<button ondblclick="MyColor()">DClickMe</button>
</body>

Example:
<!doctype html>
<head>
<script>
function copyText()
{
document.getElementById("field2").value=document.getElementById("field1").value;
}
</script>
</head>
<body>
Field1: <input type="text" id="field1" value="Hello World!" /><br />
Field2: <input type="text" id="field2" />
<br /><br />
<button ondblclick="copyText()">Copy Text</button>
</body>
		
onload:
The onload event occurs when an object has been loaded. onload is most often used within the <body> element to execute a script once a web page has completely loaded all content (including images, script files, CSS files, etc.).

Syntax
In HTML:
<element onload="SomeJavaScriptCode">

In JavaScript:
object.onload="SomeJavaScriptCode"

Example:
<!doctype html>
<head>
<script>
function load()
{
alert("Page is loaded");
}
</script>
</head>
<body onload="load()">
<h1>Hello World!</h1>
</body>

Example:
<!doctype html>
<head>
<script>
function loadImage()
{
alert("Image is loaded Successfully");
}
</script>
</head>
<body>
<img src="html5.png" onload="loadImage()" width="100" height="132" />
</body>

onunload Event:
The onunload event occurs once a page has unloaded (or the browser window has been closed). onunload occurs when the user navigates away from the page (by clicking on a link, submitting a form, closing the browser window, etc.)

Syntax
In HTML:
<element onunload="SomeJavaScriptCode">

In JavaScript:
object.onunload="SomeJavaScriptCode"

Example:
<!doctype html>
<head>
<script>
function bye()
{
alert("Thank you for visiting MySite!!");
}
</script>
</head>
<body onunload="bye()">
<h1>Welcome to my World</h1>
<p>Close this window or press F5 to reload the page.</p>
</body>

onerror Event
The onerror event is triggered if an error occurs while loading an external file (e.g. a document or an image).

Syntax
In HTML:	
<element onerror="SomeJavaScriptCode">

In JavaScript:
object.onerror="SomeJavaScriptCode"

onerror is Supported by the Following HTML Tags:
<img>, <object>, <script>, <style> 

Example:
<!doctype html>
<head>
<script>
function imgError()
{
alert('The image could not be loaded.');
}
</script>
</head>
<body>
<img src="water1.gif" onerror="imgError()">
<p> Image that does not exist, therefore the onerror event occurs.</p>
<p> If Image Existed NO Message displayed</p>
</body>
------------------------------------------------------------------------------------------------------------------------------------------
onmousemove Event:
The onmousemove event occurs when a user moves the mouse pointer over an element.

Syntax
In HTML:
<element onmousemove="SomeJavaScriptCode">

In JavaScript:
object.onmousemove="SomeJavaScriptCode"

Example:
<!doctype html>
<head>
<script>
function bigImg(x)
{
x.style.height="84px";
x.style.width="84px";
}
function normalImg(x)
{
x.style.height="32px";	
x.style.width="32px";
}
</script>
</head>
<body>
<img onmousemove="bigImg(this)" onmouseout="normalImg(this)" src="html.png" alt="Logo" width="32" height="32" />
</body>

onmouseover and onmouseout:
These two event types will help you to create nice effects with images or even with text as well. The onmouseover event occurs when you bring your mouse over any element and the onmouseout occurs when you take your mouse out from that element.

Syntax
In HTML:
<element onmouseover="SomeJavaScriptCode">

In JavaScript:
object.onmouseover="SomeJavaScriptCode"

Syntax
In HTML:
<element onmouseout="SomeJavaScriptCode">

In JavaScript:
object.onmouseout="SomeJavaScriptCode"

Example:
<!doctype html>
<head>
<script type="text/javascript">
function over() 
{
alert("Mouse Over");
}
function out() 
{
alert("Mouse Out");
}
</script>
</head>
<body>
<div onmouseover="over()" onmouseout="out()">
<h2> This is inside the division </h2>
</div>
</body>

Example:
<!doctype html>
<body>
<h1 onmouseover="style.color='red'" 
onmouseout="style.color='black'">
Mouse over this text
</h1>
</body>

Example:
<!doctype html>
<body>
<a href="http://www.nareshit.com/" 
onmouseover="document.bgColor='#FFFF00'"
onmouseout="document.bgColor='#FFFFEE'">
Move your mouse over me!
</a>
</body>

onresize Event
The onresize event occurs when the size of an element has changed.

Syntax
In HTML:
<element onresize="SomeJavaScriptCode">

In JavaScript:
object.onresize="SomeJavaScriptCode"

Example:
<!doctype html>
<head>
<script>
function showMsg()
{
alert("Hi!! changed the size of the Browser Window!");
}
</script>
</head>
<body onresize="showMsg()">
<p>Try to resize the browser window.</p>
</body>

HTML onchange Event:
The onchange attribute fires the moment when the value of the element is changed. The onchange attribute can be used with the <input>, <textarea>, and <select> elements.

Syntax
 <element onchange="script"> 

Attribute Values 
Value	Description
script	The script to be run on onchange

Example:
<!doctype html>
<head>
<script>
function checkField(val)
{
alert("The input value has changed. The new value is: " + val);
}
</script>
</head>
<body>
Enter text: 
<input type="text" name="txt" value="NareshTech" onchange="checkField(this.value)">
<p>Modify the text in the input field, then click outside the field to fire onchange.</p>
</body>

HTML onselect Event
The onselect attribute fires after some text has been selected in an element. The onselect attribute can be used within: 
<input type="file">, <input type="password">, 
<input type="text">, and <textarea>.

Syntax
 <element onselect="script"> 
	
Attribute Values
Value	Description
script	The script to be run on onselect

Examples:
<!doctype html>
<head>
<script>
function showMsg()
{
alert("You have Selected My Text!");
}
</script>
</head>
<body>
Some text: 
<input type="text" value="sraju!!" onselect="showMsg()">
</body>
</html>

Form Events:
onblur:The onblur event occurs when an object loses focus. Onblur is most often used with form validation code (When the user leaves a form field).

Note: The onblur event is the opposite of the onfocus event.

Syntax
In HTML:
<element onblur="SomeJavaScriptCode">

In JavaScript:
object.onblur="SomeJavaScriptCode"

Supported JS objects: 
Document, Window.

Example:
<!doctype html>
<head>
<script>
function upperCase()
{
var x=document.getElementById("fname");
x.value=x.value.toUpperCase();
}
function lowerCase()
{
var x=document.getElementById("fname");
x.value=x.value.toLowerCase();
}
</script>
</head>
<body>
Enter your name: <input type="text" id="fname" onblur="upperCase()" />
</body>

onfocus Event:
The onfocus event occurs when an element gets focus. Onfocus is most often used with <input>, <select>, and <a>.

Note: The onfocus event is the opposite of the onblur event.

Syntax
In HTML:
<element onfocus="SomeJavaScriptCode">

In JavaScript:
object.onfocus="SomeJavaScriptCode"

Example:
<!doctype html>
<head>
<script type="text/javascript">
function setStyle(x)
{
document.getElementById(x).style.background="yellow";
}
</script>
</head>
<body>
<form action="html5.png" name="myform" id="form1">
<label>First name: </label> <br/>
<input type="text" id="fname" onfocus="setStyle(this.id)" />
<br />
<label>Last name: </label> <br/>
<input type="text" id="lname" onfocus="setStyle(this.id)" /> <br/>
<input type='submit' value="NextPage"/>
<input type='reset' value="Cancel"/>
</form>
</body>

HTML onsubmit Event :
The onsubmit attribute fires when a form is submitted. The onsubmit attribute is only used within: <form>.

Syntax
 <form onsubmit="script"> 

Attribute Values
Value	Description
script	The script to be run on onsubmit

Example:
<!doctype html>
<head>
<script>
function checkForm()
{
alert("The form is submitted");
}
</script>
</head>
<body>
<form action="nit.html" onsubmit="checkForm()">
First name: <input type="text" name="fname"><br>
Last name: <input type="text" name="lname"><br>
<input type="submit" value="Submit">
</body>
</html>
------------------------------------------------------------------------------------------------------------------------------------
JavaScript - Errors & Exceptions Handling
There are three types of errors in programming: 
(a) Syntax Errors 
(b) Runtime Errors 
(c) Logical Errors

Syntax errors:
Syntax errors, also called parsing errors, occur at compile time for traditional programming languages, at interpret time for JavaScript.
	
Following example causes a syntax error because it is missing a closing parenthesis.

Example:
<!doctype html>
<head>
<script type="text/javascript">
window.document.write("Hey JS"
</script>
</head>

When a syntax error occurs in JavaScript, only the code contained within the same thread as the syntax error is affected and code in other threads

Example:
<!doctype html>
<head>
<script type='text/javascript'>
document.write("Hello<br/>");
document.write("Welcome to JS<br/>");
document.write("Thank U";
</script>
</head>

Logical Errors/Semantic Errors:
Logical errors can be the most difficult type of errors to track down. These errors are not the result of a syntax or runtime error. Instead, they occur when you make a mistake in the logic that drives your script and you do not get the result you expected.

You can not catch those errors, because it depends on your business requirement what type of logic you want to put in your program.

Example:
<!doctype html>
<head>
<script type='text/javascript'>
var x=100;
var y=10;
var z=x+y/2
document.write("The Value is: ",z)
</script>
</head>

The above script displays '105', to avoid invalid computations, we must use expression in a proper format ie (x+y)/2.

Example:
<script type='text/javascript'>
var x=100;var y=10;
var z=(x+y)/2
document.write("The Value is: ",z)
</script>

Runtime errors:
Runtime errors, also called exceptions, occur during execution (after compilation/ interpretation).

The following example causes a run time error because here syntax is correct but at run time it is trying to call a non existed method:

Example:
<!doctype html>
<head>
<script type="text/javascript">
document.write("Good One");
window.document.writepn("Hello");
</script>
</head>

What is Exception Handling?
An exception is a problem that arises during the execution of a program.
OR
Exception handling is the process of responding to the occurrence, during computation, of exceptions.

The try...catch Statement:
The try...catch statement allows you to test a block of code for errors. The try block contains the code to be run, and the catch block contains the code to be executed if an error occurs.

1 The try statement lets you test a block of code for errors.
2 The catch statement lets you handle the error.
3 The throw statement lets you create custom errors.
4 The finally statement lets you execute code, after try and catch, regardless of the result.

Syntax: 
<script> 
try 
{ 
Code to run [break;] 
}
catch ( e ) 
{ 
Code to run if an exception occurs [break;] 
}
</script>

Examples:
<script>
try{
alrt("hi")
}
catch(e)
{
alert(e.description)
}
alert("hello")
</script>

JavaScript eval() Function
The eval() function evaluates or executes an argument.

Syntax
eval(expression)

Example:
<!doctype html>
<head>
<script type='text/javascript'>
var x=prompt("Enter value  to evalu")
alert(eval(x))
alert("Next")
</script>
</head>

Example:
<!doctype html>
<head>
<script type='text/javascript'>
try
{
var x=prompt("Enter Any Value  to Compute")
alert(eval(x))
}
catch(e)
{
alert("Sorry Alpha-Invalid: " +e.description)
}
alert("Next")
</script>
</head>

The finally Statement
The finally statement lets you execute code, after try and catch, regardless of the result:

Syntax:
try {
    Block of code to try
}
catch(err) {
    Block of code to handle errors
} 
finally {
    Block of code to be executed regardless of the try / catch result
}

Example:
<!doctype html>
<head>
<script type='text/javascript'>
try
{
var x=prompt("Enter Any Value  to Compute")
alert(eval(x))
}
catch(e)
{
alert("Sorry Alpha-Invalid: " +e.description)
}
finally
{
alert("This Block Always Get Executed");
}
alert("Next")
</script>
</head>

The JS Throw Statement
The throw statement allows you to create an exception. If you use this statement together with the try...catch statement, you can control program flow and generate accurate error messages. The exception can be a string, integer, Boolean or an object.

Syntax
throw exception

Example:
<!doctype html>
<body>
<script type="text/javascript">
var x=prompt("Enter Any Number: ","100")
try
{ 
if(x>100)
  {
  throw "Err1";
  }
else if(x<=100)
  {
  throw "Err2";
  }
else if(isNaN(x))
  {
  throw "Err3";
  }
}
catch(err)
{
if(err=="Err1")
  {
  document.write("Error! The value is too high.");
  }
if(err=="Err2")
  {
  document.write("Error! The value is too low.");
  }
if(err=="Err3")
  {
  document.write("Error! The value is not a number.");
  }
}
</script>
</body>

JavaScript Global Functions
JavaScript eval() Function
The eval() function evaluates or executes an argument.

Syntax
eval(expression)

Example:
<!doctype html>
<body>
<script type='text/javascript'>
eval("x=10;y=20;document.write(x*y)");
document.write("<br/>" + eval("2+2"));
document.write("<br/>" + eval(x+17));
</script>
</body>

JavaScript isFinite() function
The isFinite is used to determine whether a specified number is finite or not. isFinite is a top-level function and is not associated with any object.

Syntax
isFinite(number)

Example
<!doctype html>
<body>
<script type='text/javascript'>
document.write(isFinite("Good Morning")+ "<br />");
document.write(isFinite(-9.34)+ "<br />");
document.write(isFinite("2009/01/01")+ "<br />");
document.write(isFinite(15-12)+ "<br />");
</script>
</body>

JavaScript : isNaN() function
The isNaN function is used to determine whether a value is "NaN" (not a number) or not. isNaN is a top-level function and is not associated with any object.

Syntax
isNan(textvalue)

Example
<!doctype html>
<body>
<script type='text/javascript'>
document.write(isNaN("Good Morning")+ "<br />");
document.write(isNaN(-9.34)+ "<br />");
document.write(isNaN("2009/01/01")+ "<br />");
document.write(isNaN(15-12)+ "<br />");
</script>
</body>

JS parseInt and parseFloat:
To convert a string to a number, use the JavaScript functions 
1. parseFloat (for conversion to a floating-point number) or 
2. parseInt (for string-to-integer conversion).

JavaScript parseInt() Function:
The parseInt() function parses a string and returns an integer.

Syntax
parseInt(string)

Parameter	Description
string		Required. The string to be parsed


Example
<!doctype html>
<head>
<script type='text/javascript'>
var x="100";
var y="200";
var z=x+y;
alert("The sum(contanation) of the values are: " +z);
var xyz=parseInt(x)+parseInt(y)
alert('Sum of the values are: ' +xyz)
</script>
</head>

Example:
<!doctype html>
<head>
<script type='text/javascript'>
document.write(parseInt("10") + "<br />");
document.write(parseInt("10.33") + "<br />");
document.write(parseInt("34 45 66") + "<br />");
document.write(parseInt("He was 40") + "<br />");
document.write("<br />");
document.write(parseInt("10",16)+ "<br />");
</script>
</head>

Example:
<!doctype html>
<head>
<script type='text/javascript'>
var x=prompt("Enter any value");
var y=prompt("Enter any value")
var z=x+y;
alert("The sum(contanation) of the values are: " +z);
var xyz=parseInt(x)+parseInt(y)
alert('Sum of the values are: ' +xyz)
</script>
</head>

JavaScript parseFloat() Function:
The parseFloat() function parses a string and returns a floating value.

Syntax
parseFloat(string)

Parameter	Description
string		Required. The string to be parsed

Example:
<!doctype html>
<head>
<script type='text/javascript'>
var x="100.25";
var y="200.25";
var z=x+y;
alert("The sum(contanation) of the values are: " +z);
var xyz=parseFloat(x)+parseFloat(y)
alert('Sum of the values are: ' +xyz)
</script>
</head>

Example:
<!doctype html>
<head>
<script type='text/javascript'>
 document.write("<BR>" + parseInt("15"))
 document.write("<BR>" + parseFloat("12.12345"))
 document.write("<BR>" + parseInt("45.00000000"))
 document.write("<BR>" + parseInt("23.348  44.218  55.405"))
 document.write("<BR>" + parseFloat("    55 aardvarks"))
 document.write("<BR>" + parseFloat("Year 2002")) 
</script>
</head>

Example:
<!doctype html>
<head>
<script type='text/javascript'>
var x=prompt("Enter any value");
var y=prompt("Enter any value")
var z=x+y;
alert("The sum(contanation) of the values are: " +z);
var xyz=parseFloat(x)+parseFloat(y)
alert('Sum of the values are: ' +xyz)
</script>
</head>
----------------------------------------------------------------------------------------------------------------------------------
JavaScript Objects Introduction:
JavaScript is an Object Based Programming language. An Object Based Programming language allows you to define your own objects and make your own variable types. An object has properties and methods.

Properties: Properties are the values associated with an object.
Example:
length	Width	Height	Name

Methods: Methods are the actions that can be performed on objects.
Open()	Close()	Resize()

Example:
<!doctype html>
<head>
<script type='text/javascript'>
person=new Object();
person.name='Ram';
person.age=30;
person.gender='male';
person.height=6;
document.write(person.name+' is '+person.age+' years old, '+person.gender+', and '+person.height+' foot tall.');
</script>
</head>

NOTE:
In the above example object name repeated many times, to-overcome that drawback JS has 'with' keyword..!!

with
There is a keyword associated with an object, which is 'with'. It creates a kind of halfway reference. we can drop the repeated references to 'person', because with (person) has already made the reference for us.

Syntax:
with (Object)
{
Statements;
Statements;
Statements;
}

Example:
<!doctype html>
<head>
<script type='text/javascript'>
person=new Object();
with (person) 
{
name='Ram';
age=30;
gender='male';
height=6;
document.write(name+' is '+age+' years old, '+gender+', and '+height+' foot tall.');
}
</script>
</head>

JavaScript and HTML DOM:(Document Object Model)
1 JavaScript Objects:
2 Browser Objects

JavaScript Objects:
    Array object	    Boolean object
    Date object	    Math object
    String object	    Number object    RegExp object
    
Browser Objects: 
    Window object	    Navigator object
    Screen object	    History object	    Location object

JavaScript Array
The Array object is used to store multiple values in a single variable

The following points should always be remembered when using arrays in JavaScript:
1. The array is a special type of variable.
2.Values are stored into an array by using the array name and by stating the location in the array you wish to store the value in brackets. 
Example: myArray[2] = "Hello World";
3. Values in an array are accessed by the array name and location of the value. Example: myArray[2];
4. JavaScript has built-in functions for arrays

Creating a JavaScript Array
Creating an array is slightly different from creating a normal variable. Because JavaScript has variables and properties associated with arrays, you have to use a special function to create a new array.

Create an Array
An array can be created in three ways.
1 Literal:
var myNames=[items];
2 Regular:
var myNames=new Array();
3 Condenced:
var myNames=new Array(items);

Example:
<!doctype html>
<head>
<script type='text/javascript'>
//Literal Way Array Declaration
var MyArr=['html5','css3','js','jQ','ajs'];
document.write("The Length of An Array is: " +MyArr.length);
document.write("<br>");
document.write("Number of Elements in an Array is: " +MyArr.length);
</script>
</head>

Example:
<!doctype html>
<head>
<script type='text/javascript'>
function MyArrayLen()
{
//Literal Way Array Declaration with Function
var MyArr=['html5','css3','js','jQ','ajs'];
document.write("The Length of An Array is: " +MyArr.length);
document.write("<br>");
document.write("Number of Elements in an Array is: " +MyArr.length);
}
</script>
</head>
<body>
<p>Click the button to display the array Length ... </p>
<button onclick="MyArrayLen()"> Click_Array </button>
</body>

2: Regular:
var myNames=new Array();
myNames[0]="Ravi";      
myNames[1]="Smith";
myNames[2]="Raju";

Example:
<!doctype html>
<head>
<script type='text/javascript'>
//Regular Way Array Declaration
var MyArr=new Array();
MyArr[0]='html5';
MyArr[1]='css3';
MyArr[2]='js';
MyArr[3]='jQ';
MyArr[4]='ajs';
MyArr[5]='ajs';
document.write("The Length of An Array is: " +MyArr.length);
document.write("<br>");
document.write("Number of Elements in an Array is: " +MyArr.length);
</script>
</head>

3: Condensed:
var myNames=new Array("Ravi","Smith","Raju");

Example:
<!doctype html>
<head>
<script type='text/javascript'>
//Condensed Way Array Declaration
var MyArr=new Array('html5','css3','js','jQ','ajs');
document.write("The Length of An Array is: " +MyArr.length);
document.write("<br>");
document.write("Number of Elements in an Array is: " +MyArr.length);
</script>
</head>

Array Methods and Properties
The Array object has predefined properties and methods:
var x=myNames.length      // the number of elements in myNames
var y=myNames.indexOf("Raju")   // the index position of "Raju"

Example:
<!doctype html>
<html>
<body>
<script>
var i;
var mynames = new Array();
mynames[0] = "Ravi";
mynames[1] = "sai";
mynames[2] = "Raju";
for (i=0;i<mynames.length;i++)
{
document.write(mynames[i] + "<br />");
}
</script>
</body>

Example:
<!doctype html>
<script>
var myArray = new Array();
myArray[0] = "Football";
myArray[1] = "Baseball";
myArray[2] = "Cricket";
document.write(myArray[0] + myArray[1] + myArray[2]);
</script>

JavaScript Array Sorting
Imagine that you wanted to sort an array alphabetically before you wrote the array to the browser. Well, this code has already been written and can be accessed by using the Array's sort method.

Example:
<script>
var x= new Array();
x[0] = "Football";
x[1] = "Baseball";
x[2] = "Cricket";
x.sort();
document.write(x[0] + x[1] + x[2]);
</script>

Example:
<!doctype html>
<script>
function myFunction()
{
var names = ["raju", "nit", "ramu", "scott"];
var x=document.getElementById("demo");
x.innerHTML=names.length;
}
</script>
<body>
<p id="demo">Click the button to create an array, then display it's length</p>
<button onclick="myFunction()">Length</button>
</body>

Example:
<!doctype html>
<body>
<script>
var fruits = ["Banana", "Orange", "Apple", "Mango"];
function myFunction()
{
fruits.reverse();
var x=document.getElementById("demo");
x.innerHTML=fruits;
}
</script>
<p id="demo">Click the button to reverse the order of the elements in the array.</p>
<button onclick="myFunction()">Display</button>
</body>
---------------------------------------------------------------------------------------------------------------------------------------------
JavaScript pop() Method:
The pop() method removes the last element of an array, and returns that element.
Note: This method changes the length of an array.
Note: To remove the first element of an array, use the shift() method.

Syntax: array.pop()

Example:
<!doctype html>
<head>
<script type='text/javascript'>
var techs = ["TeraData", "BigData", "Hadoop", "Spark"];
function myFunction()
{
techs.pop();
var x=document.getElementById("course");
x.innerHTML=techs;
}
</script>
<body>
<p id="course">Click the button to remove the last array element.</p>
<button onclick="myFunction()">Click_Tech</button>
</body>

Example:
<!doctype html>
<head>
<script type='text/javascript'>
arr=['smiley.jpg','fish.jpg','fish1.gif', 'nature.jpg', 'nature1.jpg', 'nature2.pg']
i=0;
function funpre()
{
i--
fun2()
}
function funnext()
{
i++
fun2()
}
function fun2()
{
document.getElementById('img1').src="img/"+arr[i]
}
</script>
</head>
<body>
<img id='img1' width='200px' height="200px" src='img/smiley.jpg'>
<br>
<input type='button' value='Next' onclick='funnext()'>
<input type='button' value='Previous' onclick='funpre()'>
</body>

Example:
<!doctype html>
<head>
<script type='text/javascript'>
arr=['fish.jpg','fish1.gif', 'nature.jpg', 'nature1.jpg','butterfly.gif',"bird.gif"]
i=0;
function fun1()
{
i++
if(i==6)
{
alert("No more images")
}
else
{
document.getElementById('img1').src="img/"+arr[i];
}
}
</script>
<body>
<img src="img/fish.jpg" width="300px" height="250px" id="img1">
<br>
<input type="button" value=" NEXT" onclick="fun1()">
</body>

JavaScript Boolean Object
The Boolean object represents two values, either "true" or "false". If value parameter is omitted or is 0, -0, null, false, NaN, undefined, or the empty string (""), the object has an initial value of false.

Syntax
Use the following syntax to create a boolean object.
var val = new Boolean(value);

Example1:
<!doctype html>
<head>
<script>
function myFunction() 
{
document.getElementById("demo").innerHTML = Boolean(10 > 9);
}
</script>
</head>
<body>
<p id='demo'>Display the value of Boolean(10 > 9):</p>
<button onclick="myFunction()">ClickMe</button>
</body>

Example:
<!doctype html>
<head>
<script type='text/javascript'>
var b1=new Boolean(0);
var b2=new Boolean(1);
var b3=new Boolean("");
var b4=new Boolean(null);
var b5=new Boolean(NaN);
document.write("0 is boolean "+ b1 +"<br />");
document.write("1 is boolean "+ b2 +"<br />");
document.write("An empty string is boolean "+ b3 + "<br />");
document.write("null is boolean "+ b4+ "<br />");
document.write("NaN is boolean "+ b5 +"<br />");
</script>
</head>

JavaScript - The Date Object
The Date object is a datatype built into the JavaScript language. Date objects are created with the new Date( ). Once a Date object is created, a number of methods allows you to operate on it. Most methods simply allows you to get and set the year, month, day, hour, minute, second, and millisecond fields of the object, using either local time or UTC.

There are four ways of instantiating a date:
var x = new Date();
var x = new Date(milliseconds);
var x = new Date(dateString);
var x = new Date(year, month, day, hours, minutes, seconds, milliseconds); 

Syntax:Date()

Example:
<!doctype html>
<head>
<script type="text/javascript">
   var dt = Date();
   document.write("Date and Time : " + dt ); 
</script>
</head>

JavaScript date object Methods:
The Date object has been created, and now we have a variable that holds the current date! To get the information we need to use the following list of methods...!!

1 getTime() -Number of milliseconds
2 getSeconds() -Number of seconds (0-59)
3 getMinutes() -Number of minutes (0-59)
4 getHours() -Number of hours (0-23)
5 getDay()-Day of the week(0-6).0=Sunday,6=Saturday
6 getDate() -Day of the month (0-30)
7 getMonth() -Number of month (0-11)
8 getFullYear() -The four digit year (1970-9999)

Example:
<!doctype html>
<body>
<h1  style='color:red;font-family:candara;font-size:50px'>
<script type='text/javascript'>
var dt=new Date();
var  mm=dt.getMonth()+1
var  dd=dt.getDate()
var  yy=dt.getFullYear()
document.write(mm+"/"+dd+"/"+yy+"<br/>")
var hh=dt.getHours();
var mm=dt.getMinutes();
var ss=dt.getSeconds();
document.write(hh+":"+mm+":"+ss)
</script></h1>
</body>

Example:
<!doctype html>
<head>
<script type='text/javascript'>
var dt = new Date()
var mm = dt.getMonth() + 1
var dd = dt.getDate()
var yy = dt.getFullYear()
document.write(mm + "/" + dd + "/" + yy +"<br>")
</script>
</head>

getFullYear() Method
Description: The getFullYear() method returns the year (four digits) of the specified date. 

Syntax: 
dt.getFullYear()

Example:
<!doctype html>
<head>
<script type='text/javascript'>
function myFunction()
{
var dt = new Date();
var x = document.getElementById("dm");
x.innerHTML=dt.getFullYear();
}
</script>
</head>
<body>
<p id="dm">Click the button to display the full year of todays date.</p>
<button onclick="myFunction()">DisplayFullYear</button>
</body>

Example:
<!doctype html>
<head>
<script type="text/javascript">
   var dt = new Date("December 25, 1995 23:15:00");
   document.write("getFullYear() : " + dt.getFullYear() ); 
</script>
</head>

The getDate() method returns the day of the month (from 1 to 31) for the specified date.

Syntax: 
dt.getDate()

Example:
<!doctype html>
<head>
<script type='text/javascript'>
function myFunction()
{
var dt = new Date();
var x = document.getElementById("dm");
x.innerHTML=dt.getDate();
}
</script>
</head>
<body>
<p id="dm">Click the button to display todays day of the month.</p>
<button onclick="myFunction()">Display</button>
</body>

Example:
<!doctype html>
<head>
<script type="text/javascript">
function myFunction()
{
var dt=new Date("July 21, 1983 01:15:00");
var x=document.getElementById("dm");
x.innerHTML=dt.getDate();
}
</script>
</head>
<body>
<p id="dm">Click the button to display todays day of the month.</p>
<button onclick="myFunction()">Display</button>
</body>

getHours:
The getHours() method returns the hour (from 0 to 23) of the specified date and time.

Syntax: 
dt.getHours()

Example:
<!doctype html>
<head>
<script type="text/javascript">
function myFunction()
{
var dt = new Date();
var x = document.getElementById("dm");
x.innerHTML=dt.getHours();
}
</script>
</head>
<body>
<p id="dm">Click the button to display the hour of the time right now.</p>
<button onclick="myFunction()">DisplayHours</button>
</body>

JavaScript getTimezoneOffset() Method:
It returns the time difference between UTC time and local time, in minutes.

Note:
If your time zone is GMT+2, -120 will be returned.


Note: 
The returned value is not a constant, because of the practice of using Daylight Saving Time.

Note: 
UTC time is the same as GMT time.

Syntax
Date.getTimezoneOffset()

Technical Details
Return Value: 	
A Number, representing the time difference between UTC and Local Time, in minutes.

Example:
<!doctype html>
<head>
<script type='text/javascript'>
function myFunction() 
{
var dt = new Date();
var x=document.getElementById("dm");
x.innerHTML=dt.getTimezoneOffset();
}
</script>
</head>
<body>
<p>Click the button to display the timedifference between UTC and local time.</p>
<button onclick="myFunction()"> ClickMe </button>
<p id="dm"></p>
</body>

Set Dates
We can easily manipulate the date by using the methods available for the Date object.

setDate() Method:
The setDate() method sets the day of the month to the date object.

Syntax: 
Date.setDate(day)

Example:
<!doctype html>
<head>
<script type="text/javascript">
function myFunction()
{
var dt = new Date();
dt.setDate(15);
var x = document.getElementById("dm");
x.innerHTML=dt;
}
</script>
</head>
<body>
<p id="dm">Click the button to display the date after changing the day of the month. </p>
<button onclick="myFunction()">Display_SetDate</button>
</body>

JavaScript setFullYear() Method
The setFullYear() method sets the year (four digits for dates between year 1000 and 9999) of the date object. This method can also be used to set the month and day of month.

Syntax
Date.setFullYear(year,month,day)

Example:
<!doctype html>
<body>
<p>Click the button to display a date after changing the year.</p>
<button onclick="myFunction()">ClickMe</button>
<p id="dm"></p>
<script type="text/javascript">
function myFunction() 
{
var dt = new Date();
dt.setFullYear(2020);
document.getElementById("dm").innerHTML = dt;
}
</script>
</body>

JavaScript setMonth() Method
The setMonth() method sets the month of a date object. 

Note: January is 0, February is 1, and so on.

Syntax
Date.setMonth(month,day)

Example:
<!doctype html>
<body>
<p>Click the button to display the date after changing the month.</p>
<button onclick="myFunction()">Click it</button>
<p id="demo"></p>
<script type="text/javascript">
function myFunction() 
{
var d = new Date();
d.setMonth(5);
document.getElementById("demo").innerHTML = d;
}
</script>
</body>

Redirect to Other Location:
Javascript window.location 
Control over what page is loaded into the browser rests in the JavaScript property window.location. By setting window.location equal to a new URL, you will in turn change the current webpage to the one that is specified.

Example:
<!doctype html>
<script type="text/javascript">
window.location = "http://www.nareshit.com/"
</script>

JavaScript Timing Events
With JavaScript, it is possible to execute some code at specified time-intervals. This is called timing events. It's very easy to time events in JavaScript. The two key methods that are used are:

1. setInterval() - executes a function, over and over again, at specified time intervals.

Syntax
window.setInterval("javascript function",milliseconds);

Example:
<!doctype html>
<head>
<script type='text/javascript'>
function myFunction()
{
setInterval(function(){alert("Hello")},3000);
}
</script>
</head>
<body>
<p>Click the button to wait 3 seconds, then alert "Hello".</p>
<button onclick="myFunction()">Display</button>
</body>

2. setTimeout() - executes a function, once, after waiting a specified number of milliseconds

Syntax
window.setTimeout("javascript function",milliseconds);

Example:
<!doctype html>
<script type='text/javascript'>
function delayer()
{
window.location = "http://www.nareshit.com"
}
</script>
</head>
<body onLoad="setTimeout('delayer()', 5000)">
<h2>Prepare to be redirected!</h2>
<p>This page is a time delay redirect</p>
</body>

RealTime Example:
<!doctype html>
<head>
<script type='text/javascript'>
setInterval("fun1()",1000);
function fun1()
{
var dt=new Date
str=dt.getHours()+":"+dt.getMinutes()+":"+dt.getSeconds()
document.getElementById('sp1').innerHTML=str
}
</script>
</head>
<body>
<span id="sp1" style="color:red;font-size:30"></span>
</body>

JavaScript String Object:
A JavaScript string stores a series of characters like "javascript". A string can be any text inside double or single quotes:

Example:
var name = "javascript";
var name = 'javascript';

String indexes are zero-based: The first character is in position 0, the second in 1, and so on.

Syntax: 
var str = new String("string");
OR
var txt = "string";

Properties:
1. length

Methods:
1. charAt()
2. match()
3. endsWith()
4. repeat()
5. big()
6. bold()
7. italics()
8. small()
9. fixed()
10. strike()
11. sub()
12. sup()
13. fontcolor()
14. fontsize()
15. blink() //depcrecated
16. link()
17. replace()

String Object Properties:
JavaScript length Property: 
The length property returns the length of a string (in characters).

Syntax: string.length

Example:
<body>
<script>
var txt = "Naresh i Technologies!";
document.write(txt.length);
</script>
</body>

String Object Methods
JavaScript charAt() Method:
It returns the character at the specified index in a string. The index of the first character is 0, the second character is 1, and so on.

Syntax: string.charAt(index)

Example:
<html>
<script>
function myFunction()
{
var str="Naresh i Technologies";
document.getElementById("demo").innerHTML=str.charAt(2);
}
</script>
<body>
<p id="demo">Click the button to display the third character of a string.</p>
<button onclick="myFunction()">Display_Character</button>
</body>
</html>
------------------------------------------------------------------------------------------------------------------------------------
JavaScript String Object:
A JavaScript string stores a series of characters like "javascript". A string can be any text inside double or single quotes:

Example:
var name = "javascript";
var name = 'javascript';

String indexes are zero-based: The first character is in position 0, the second in 1, and so on.

Syntax: 
var str = new String("string");
OR
var txt = "string";

Properties:
1. length

Methods:
1. charAt()
2. match()
3. endsWith()
4. repeat()
5. big()
6. bold()
7. italics()
8. small()
9. fixed()
10. strike()
11. sub()
12. sup()
13. fontcolor()
14. fontsize()
15. blink() //depcrecated
16. link()
17. replace()

String Object Properties:
JavaScript length Property: 
The length property returns the length of a string (in characters).

Syntax: string.length

Example:
<body>
<script>
var txt = "Naresh i Technologies!";
document.write(txt.length);
</script>
</body>

String Object Methods
JavaScript charAt() Method:
It returns the character at the specified index in a string. The index of the first character is 0, the second character is 1, and so on.

Syntax: string.charAt(index)

Example:
<html>
<script>
function myFunction()
{
var str="Naresh i Technologies";
document.getElementById("demo").innerHTML=str.charAt(2);
}
</script>
<body>
<p id="demo">Click the button to display the third character of a string.</p>
<button onclick="myFunction()">Display_Character</button>
</body>
</html>

JS String Match:The match() method searches a string for a match against a regular expression, and returns the matches, as an Array object

Note: This method returns null if no match is found.

Syntax: string.match()

Example:
<script>
var str="Java Script!";
document.write(str.match("Script") + "<br />"); 
document.write(str.match("java") + "<br />"); 
document.write(str.match("Scriptt") + "<br />"); 
document.write(str.match("Java!")); 
</script>

JavaScript String endsWith() Method
The endsWith() method determines whether a string ends with the characters of a specified string.
This method returns true if the string ends with the characters, and false if not.

Note: 
The endsWith() method is case sensitive.

Syntax
string.endsWith(searchvalue,length)

Parameter Values
Parameter 	Description
searchvalue 	Required. The string to search for
length 		Optional. Specify the length of the string to search. If omitted, the default value is 				the length of the string

Example:
<head>
<script>
function myFunction() 
{
var str = "Hello world, welcome to the universe.";
var n = str.endsWith("universe.");
document.getElementById("demo").innerHTML = n;
}
</script>
</head>
<body>
<p id="demo">Click the button to check where if the string ends with the specified value.</p>
<button onclick="myFunction()">ClickMe </button>
</body>

JavaScript String repeat() method
The repeat() method returns a new string with a specified number of copies of the string it was called on.

Syntax
string.repeat(count)

Parameter Values
Parameter 	Description
count 		Required. The number of times the original string value should be repeated 				in the new string

Example:
<!doctype html>
<head>
<script type='text/javascript'>
var str="NareshiTechnologies<br/>";
document.write(str.repeat("6"));
</script>
</head>

Example:
<head>
<script>
function myFunction() 
{
 var str = "JavaScript!";
 document.getElementById("demo").innerHTML = str.repeat(3);
}
</script>
</head>
<body>
<p>Click the button to display the extracted part of the string.</p>
<button onclick="myFunction()">RepeatString</button>
<p id="demo"></p>
</body>

JS String Styles:
<script>
var txt = "Hello World!";

document.write("<p>Big: " + txt.big() + "</p>");
document.write("<p>Small: " + txt.small() + "</p>");

document.write("<p>Bold: " + txt.bold() + "</p>");
document.write("<p>Italic: " + txt.italics() + "</p>");

document.write("<p>Fixed: " + txt.fixed() + "</p>");
document.write("<p>Strike: " + txt.strike() + "</p>");

document.write("<p>Fontcolor: " + txt.fontcolor("green") + "</p>");
document.write("<p>Fontsize: " + txt.fontsize(6) + "</p>");

document.write("<p>Subscript: " + txt.sub() + "</p>");
document.write("<p>Superscript: " + txt.sup() + "</p>");

document.write("<p>Link: " + txt.link("http://www.nareshit.com") + "</p>");

document.write("<p>Blink: " + txt.blink() + " (does not work in IE, Chrome, or Safari)</p>");

</script>

String Replace
<script>
var str="Visit SunMicro!";
document.write(str.replace("SunMicro","NareshTech"));
</script>

JavaScript Math Object:
The Math object allows you to perform mathematical tasks. The Math object includes several mathematical constants and methods.

Math Object Properties:
JavaScript PI Property
The PI property returns the ratio of a circle's area to the square of its radius, approximately 3.14
Syntax: Math.PI

Example:
<html>
<script>
function myFunction()
{
document.getElementById("demo").innerHTML=Math.PI;
}
</script>
<body>
<p id="demo">Click the button to display PI.</p>
<button onclick="myFunction()">Display_PI</button>
</body>
</html>

Math Object Methods:
abs(x) 	Returns the absolute value of x

Syntax: Math.abs(x)

Example:
<html>
<script>
function myFunction()
{
document.getElementById("demo").innerHTML=Math.abs(-7.25);
}
</script>
<body>
<p id="demo">Click the button to the absolute value of -7.25</p>
<button onclick="myFunction()">Absolute</button>
</body>
</html>

Example:
<html>
<script>
function myFunction()
{
var a=Math.abs(7.25);
var b=Math.abs(-7.25);
var c=Math.abs(null);
var d=Math.abs("Hello");
var e=Math.abs(2+3);
var x=document.getElementById("demo");
x.innerHTML=a + "<br>" + b + "<br>" + c + "<br>" + d + "<br>" + e;
}
</script>
<body>
<p id="demo">Click the button to the absolute value of different numbers</p>
<button onclick="myFunction()">Absolute_Values</button>
</body>
</html>

EXAMPLE:
<script>
document.write(Math.round(0.60) + "<br />");
document.write(Math.round(0.50) + "<br />");
document.write(Math.round(0.49) + "<br />");
document.write(Math.round(-4.40) + "<br />");
document.write(Math.round(-4.60));
</script>             

<script>
document.write(Math.max(5,10) + "<br />");
document.write(Math.max(0,150,30,20,38) + "<br />");
document.write(Math.max(-5,10) + "<br />");
document.write(Math.max(-5,-10) + "<br />");
document.write(Math.max(1.5,2.5));
</script>
 
JavaScript pow() Method
The pow() method returns the value of x to the power of y (xy).

Syntax: Math.pow(x,y)

Example:
<html>
<script>
function myFunction()
{
document.getElementById("demo").innerHTML=Math.pow(4,3);
}
</script>
<body>
<p id="demo">Click the button to display the result of 4*4*4.</p>
<button onclick="myFunction()">Display_Result</button>
</body>
</html>

Example:
<html>
<script>
function myFunction()
{
document.getElementById("demo").innerHTML=Math.sqrt(9);
}
</script>
<body>
<p id="demo">Click the button to display the square root of 9.</p>
<button onclick="myFunction()">Display_Square</button>
</body>
</html>

JavaScript Number Object
The Number object is an object wrapper for primitive numeric values. Number objects are created with new Number().

Syntax: var num = new Number(value);

Number Object Properties
Property 		Description
MAX_VALUE 	Returns the largest number possible in JavaScript
MIN_VALUE 	Returns the smallest number possible in JS
NaN 		Represents a "Not-a-Number" value

Example:
<html>
<script>
function myFunction()
{
document.getElementById("demo").innerHTML=Number.MAX_VALUE;
}
</script>
<body>
<p id="demo">Click the button to display the largest possible number in JavaScript.</p>
<button onclick="myFunction()">Max_Value</button>
</body>
</html>

Number Object Methods
Method 		Description
toExponential(x) 	Converts a number into an exponential notation
toFixed(x) 	Formats a number with x numbers of digits after the decimal point
toPrecision(x) 	Formats a number to x length 
toString() 		Converts a Number object to a string
valueOf() 	Returns the primitive value of a Number object

Example:
<html>
<script>
function myFunction()
{
var num = 15;
var x = document.getElementById("demo");
x.innerHTML=num.valueOf();
}
</script>
<body>
<p id="demo">Click the button to display the primitive value of a number.</p>
<button onclick="myFunction()">Try it</button>
</body>
</html

JavaScript RegExp Object
It is an object that describes a pattern of characters.When you search in a text, you can use a pattern to describe what you are searching for. RE are used to perform powerful pattern-matching and "search-and-replace" functions on text.

Syntax
var patt=new RegExp(pattern,modifiers);
OR
Syntax:
var patt=/pattern/modifiers;

pattern ==> Specifies the pattern of an expression. 
modifiers ==> Specify if a search should be global, case-sensitive, etc.

Brackets
Brackets are used to find a range of characters:
Expression 	Description
[abc] 		Find any character between the brackets
[^abc] 		Find any character not between the brackets
[0-9] 		Find any digit from 0 to 9
[A-Z] 		Find any character from uppercase A to uppercase Z
[a-z] 		Find any character from lowercase a to lowercase z
[A-z] 		Find any character from uppercase A to lowercase z

Quantifiers
Quantifier		Description
n+ 		Matches any string that contains at least one n
n* 		Matches any string that contains zero or more n's
n? 		Matches any string that contains zero or one n
n{X} 		Matches any string that contains a sequence of X n's
n$ 		Matches any string with n at the end of it
^n 		Matches any string with n at the beginning of it
		
Metacharacters
A metacharacter is simply an alphabetical character preceded by a backslash.
Character		Description
.             	 	a single character
\s             		a whitespace character (space, tab, newline)
\S             		non-whitespace character
\d             		a digit (0-9)
\D             		a non-digit
\w             		a word character (a-z, A-Z, 0-9, _)
\W             		a non-word character
[aeiou]        	matches a single character in the given set

RegExp Object Properties
Property 		Description
global 		Specifies if the "g" modifier is set
ignoreCase 	Specifies if the "i" modifier is set
lastIndex 		The index at which to start the next match
multiline 		Specifies if the "m" modifier is set
source 		The text of the RegExp pattern

RegExp Object Methods
Method 		Description
compile() 	Compiles a regular expression
exec() 		Tests for a match in a string. Returns the first match
test() 		Tests for a match in a string. Returns true or false

JavaScript test() Method
It tests for a match in a string. This method returns true if it finds a match, otherwise it returns false.

Syntax: RegExpObject.test(string)

Parameter 	Description
string 		Required. The string to be searched

Example:
<!doctype html>
<head>
<script>
var patt1=new RegExp("h");
document.write(patt1.test("HTML5 is Next generation Web Platform..!!"));
</script>
</head>
-----------------------------------------------------------------------------------------------------------------------------------------------
The Browser Object Model (BOM)
Javascript Window Object:
The JavaScript Window Object is the highest level JavaScript object which corresponds to the web browser window. 

Methods 
Window open() Method
It opens a new browser window.

Syntax
window.open(URL)

Example:
<!doctype html>
<body>
<form>
<input type="button" value="Click here to see" onclick="window.open('http://www.yahoo.com')" /></form> 
</body>

Example:
<html>
<head>
<script>
function myFunction() 
{
 window.open("http://www.google.com/");
 window.open("http://www.nareshit.com/");
}
</script>
</head>
<body>
<p>Click the button to open multiple windows.</p>
<button onclick="myFunction()">Open Windows</button>
</body>
</html>

Window print() Method
The print() method prints the contents of the current window.

Syntax
window.print()

Example:
<head>
<script>
function myFunction() 
{
 window.print();
}
</script>
</head>
<body>
<p>Click the button to print the current page.</p>
<button onclick="myFunction()">Print this page</button>
</body>

Window stop() Method
The stop() method stops window loading. 

Syntax
window.stop()

Example:
<head>
<script>
window.stop();
</script>
</head>

Window Object Properties
Window screenX and screenY Properties:
The screenX and screenY properties returns the x (horizontal) and y (vertical) coordinates of the window relative to the screen

Syntax
window.screenX
window.screenY

Example:
<head>
<script type='text/javascript'>
document.write(window.screenX);
document.write("<br/>");
document.write(window.screenY);
</script>
</head>

Example:
<head>
<script>
function myFunction() 
{
    var myWindow = window.open("", "myWin");
    myWindow.document.write("<br>ScreenX: " + myWindow.screenX);
    myWindow.document.write("<br>ScreenY: " + myWindow.screenY + "</p>");
}
</script>
</head>
<body>
<button onclick="myFunction()">OpenWin</button>
</body>

Navigator Object
It contains information about the browser.

Navigator Object Properties
Property 		Description
appCodeName 	Returns the code name of the browser
appName 		Returns the name of the browser
appVersion 	Returns the version information of the browser
language 		Returns the language of the browser

Navigator appCodeName Property
The appCodeName property returns the code name of the browser.

Syntax
navigator.appCodeName

Note: All modern browsers returns "Mozilla", for compatibility reasons.
Note: This property is read-only.

Example:
<body>
<p id="demo">Click the button to display the code name of your browser.</p>
<button onclick="myFunction()">Display</button>
<script>
function myFunction() 
{
var x = "Browser CodeName: " + navigator.appCodeName;
document.getElementById("demo").innerHTML = x;
}
</script>
</body>

Navigator appName Property
It returns the  name of the Web browser.

Syntax
navigator.appName

Note: This property is read-only.

Example:
<body>
<p id="demo">Click the button to display the name of your browser.</p>
<button onclick="myFunction()">Display</button>
<script>
function myFunction() 
{
var x = "Browser CodeName: " + navigator.appName;
document.getElementById("demo").innerHTML = x;
}
</script>
</body>

Examples:
<html>
<body>
<script type="text/javascript">
document.write("Version info: " + navigator.appVersion);
</script>
</body>
</html>

Example2:
<html>
<head>
<script>
function AllProperties()
{
document.write("<h1>");
document.write("Version info is: " + navigator.appVersion);
document.write("<br/>");
document.write("AppName is: " + navigator.appName);
document.write("<br/>");
document.write("appCodeName is: " + navigator.appCodeName);
document.write("<br/>");
document.write("cookieEnabled: " + navigator.cookieEnabled);
document.write("</h1>");
}
</script>
<head>
<body>
<p> Click to get Execute all Navigator Properties</p>
<input type='button' onclick='AllProperties()'
value="Display_Properties"/>
</body>
</html>

Navigator Object Methods
Method 		Description
javaEnabled() 	Specifies whether or not the browser has Java enabled

Example:
<html>
<body>
<script type="text/javascript">
document.write("Java enabled: " + navigator.javaEnabled());
</script>
</body>
</html>

JavaScript Browser Detection
Almost everything in this tutorial works on all JavaScript-enabled browsers. The Navigator object contains information about the visitor's browser name, version etc..

Example:
<body>
<div id="demo"></div>
<script type='text/javascript'>
txt = "<p>Browser CodeName: " + navigator.appCodeName + "</p>";
txt+= "<p>Browser Name: " + navigator.appName + "</p>";
txt+= "<p>Browser Version: " + navigator.appVersion + "</p>";
txt+= "<p>Cookies Enabled: " + navigator.cookieEnabled + "</p>";
txt+= "<p>Browser Language: " + navigator.language + "</p>";
txt+= "<p>Browser Online: " + navigator.onLine + "</p>";
txt+= "<p>Platform: " + navigator.platform + "</p>";
document.getElementById("demo").innerHTML = txt;
</script>
</body>

Screen Object
It contains information about the visitor's screen.

Screen Object Properties
Property 		Description
availHeight 	Returns the height of screen(Excluding Windows 	Taskbar)
availWidth 	Returns the width of screen (Excluding Windows 	Taskbar)
height 		Returns the total height of the screen
width 		Returns the total width of the screen

Example:
<!doctype html>
<body>
<script type="text/javascript">
document.write("Total Width: " + screen.width +"<br/>");
document.write("Total Height: " + screen.height +"<br/>");
document.write("Total AWidth: " + screen.availWidth +"<br/>");
document.write("Total AHeight: " + screen.availHeight +"<br/>");
</script>
</body>

The History Object
It contains the URLs visited by the user . It is part of the window object and is accessed through the window.history property.

History Object Properties
Property		Description
length		Returns the number of URLs in the history list

History Object Methods
Method		Description
back()		Loads the previous URL in the history list
forward()		Loads the next URL in the history list

History length Property
The length property returns the number of URLs in the history list.
Note: Internet Explorer and Opera start at 0, while Firefox, Chrome, and Safari start at 1.

Syntax : history.length

Example:
<html>
<body>
<script type="text/javascript">
document.write("Number of URLs in history list: " + history.length);
</script>
</body>
</html>

History back() Method
The back() method loads the previous URL in the history list.

Syntax: history.back()

History forward() Method
The forward() method loads the Next URL in the history list.

Syntax: history.forward()

Example:
<html>
<head>
<script type="text/javascript">
function goBack()
  {
  window.history.back()
  }
</script>
</head>
<body>
<input type="button" value="Back" onclick="goBack()" />
</body>
</html>

History go() Method
The go() method loads a specific URL from the history list.

Syntax
history.go(number|URL)
Parameter Values
Parameter 	Description
number|URL 	Required. The parameter can either be a number which goes to the URL 			within the specific position (-1 goes back one page, 1 goes forward one page)

Example:
<head>
<script>
function goBack() 
{
window.history.go(-2);
}
</script>
</head>
<body>
<p>Click the button to display the 2 Pages Backward History...</p>
<button onclick="goBack()">Go 2 pages back</button>
</body>

Location Object
The location object contains information about the current URL. The location object is part of the window object and is accessed through the window.location property.

Location Object Properties
Property 		Description
hash 		Returns the anchor portion of a URL
host 		Returns the hostname and port of a URL
hostname	Returns the hostname of a URL
href 		Returns the entire URL

Location href Property
The href property returns the entire URL of the current page.

Syntax: location.href

Example:
<html>
<body>
<script>
document.write(location.href);
</script>
</body>
</html>

Location Object Methods
Method 	Description
reload() 	Reloads the current document
replace() Replaces the current document with a new one

Location replace() Method:
The replace() method replaces the current document with a new one.

Syntax: location.replace(newURL)
Example:
<html>
<head>
<script>
function replaceDoc()
  {
  window.location.replace("http://www.nareshit.com")
  }
</script>
</head>
<body>
<input type="button" value="Replace document" onclick="replaceDoc()" />
</body>
</html>

Document Object
Each HTML document loaded into a browser window becomes a Document object. It has the following list of properties..!!

1 anchors	2 cookie	3 domain	4 forms
5 images	6 title	7 URL

Document title Property
The title property returns the title of the current document (the text inside the HTML title element).

Syntax
document.title

Example:
<!doctpe html>
<head>
<title>
Naresh i Technologies..!!
</title>
</head>
<body>
<script type='text/javascript'>
document.write(document.title)
</script>
</body>

Document Object:
Return the number of anchors in a document:
<html>
<body>
<a name="html">HTML Tutorial</a><br>
<a name="css">CSS Tutorial</a><br>
<a name="xml">XML Tutorial</a><br>
<a href="http://www.w3c.org">JavaScript Tutorial</a>
<p>Number of anchors:
<script>
document.write(document.anchors.length);
</script></p>
</body>
</html>

Return the number of forms in a document
<html>
<body>
<form name="Form1"></form>
<form name="Form2"></form>
<form></form>
<p>Number of forms:
<script>
document.write(document.forms.length);
</script></p>
</body>
</html>

Return the number of images in a document
<html>
<body>
<img border="0" src="html.png" width="150" height="113" />
<img border="0" src="html5.png" width="152" height="128" />
<p>Number of images:
<script>
document.write(document.images.length);
</script></p>
</body>
</html

Return the id of the first image in a document
<html>
<body>
<img id="html" border="0" src="html.png" width="150" height="113" />
<img id="html5" border="0" src="html5.png" width="152" height="128" />
<p>Id of first image:
<script>
document.write(document.images[0].id);
</script></p>
</body>
</html>

Return all name/value pairs of cookies in a document
<html>
<body>
Cookies associated with this document: 
<script>
document.write(document.cookie);
</script>
</body>
</html>

Return the title of a document:
<html>
<head>
<title>My title</title>
</head>
<body>
The title of the document is: 
<script>
document.write(document.title);
</script>
</body>
</html>

Return Full URL:
<html>
<body>
The full URL of this document is: 
<script>
document.write(document.URL);
</script>
</body>
</html>

<head>
<title>My WebPage</title>
</head>
<body>
The title of the document is: 
<script type='text/javascript'>
document.write(document.title);
</script>
</body>
</html>
-------------------------------------------------------------------------------------------------------------------------------
Container Tags :
Elements can hold other html Elements/Controls.

Example:
<div>,<p>,<table>,<span>...!

Non-Containesr Tags:
Element Can hold only text can not hold Html Controls/Elements.

Example:
<Textbox>,<Button>,<Radio>,<Textarea>

InnerHTML In JavaScript:
The innerHTML property is used along with getElementById within your JavaScript code to refer to an HTML element and change its contents.

Syntax
document.getElementById('{ID of element}').innerHTML = '{content}';

Note:
All Paired tags are not containers, but all container tags are paired tags.

Example
<head>
<script type='text/javascript'>
function MyFun()
{
var val=document.getElementById("t1").value;
alert(val);
}
</script>
</head>
<body>
User Name: <br/>
<input type="text" name='uname' id='t1'>
<br/>
<input type="button" value="Click" onclick="MyFun()">
</body>

Example:
<head>
<script type='text/javascript'>
function fun1()
{
alert(document.getElementById('txtarea1').value);
alert(document.getElementById('p1').innerHTML);
}
</script>
</head>
<body>
<p id='p1'><img src='fish1.gif' width=100px heght=60px></p>
<textarea id='txtarea1'></textarea>
<br/>
<input type="button" value="Click" onclick="fun1()">
</body>

JavaScript HTML DOM:
The HTML DOM is a standard for how to get, change, add, or delete HTML elements.

The DOM is a W3C Standard. The DOM defines a standard for accessing documents: DOM is a platform and language-neutral interface that allows programs and scripts to dynamically access and update the content, structure, and style of a document."

OUTLINE OF HTML & JS DOM:

Example
The following example changes the content (the innerHTML) of the <p> element with id="demo":
<body>
<h1>My First Page</h1>
<p id="demo"></p>
<script>
document.getElementById("demo").innerHTML = "Hello World!";
</script>
</body>

JavaScript HTML DOM Document
The HTML DOM document object is the owner of all other objects in your web page. 

Finding HTML Elements
Method					Description
document.getElementById(id)			Find an element by element id
document.getElementsByTagName(name)	Find elements by tag name
document.getElementsByName(name)		Find elements by Name
document.getElementsByClassName(name)	Find elements by class name

Document getElementById() Method
The getElementById() method accesses the first element with the specified id.
	
Syntax
document.getElementById("id")

Parameter 	Description
id 		Required. The id of the element you want to access/manipulate

Example:
<head>
<script>
function getValue()
  {
  var x=document.getElementById("myHeader");
  alert(x.innerHTML);
  }
</script>
</head>
<body>
<h1 id="myHeader" onclick="getValue()">Click Me!</h1>
</body>

document.getElementsByTagName:
The getElementsByTagName() method returns a collection of all elements in the document with the specified tagname, as a NodeList object.

Syntax
document.getElementsByTagName(tagname)
OR
Syntax
var elements = document.getElementsByTagName(name);

Example1:
<head>
<script>
function MyFun()
{
var arr=document.getElementsByTagName("div");
alert(arr[0].innerHTML);
alert(arr[1].innerHTML);
alert(arr[2].id);
}
</script>
</head>
<body>
<div id="div1">Hi</div>
<div id="div2">Hello</div>
<div id="div3">Scott</div>
<input type="button" value='Click' onclick="MyFun()">
</body>

Example2:
<head>
<script>
function MyFun()
{
var arr=document.getElementsByTagName("div");
var x=arr.length;
document.write(x);
}
</script>
</head>
<body>
<p style='color:blue;'>Click the button to display the number of divs..!!</p>
<div id="div1">Hi</div>
<div id="div2">Hello</div>
<div id="div3">RaaJ</div>
<div id="div4">Scott</div>
<input type="button" value='Click' onclick="MyFun()">
</body>

JavaScript getElementsByName() Method
It accesses all elements with the specified name.

Syntax
document.getElementsByName(name)

Example:
<!doctype html>
<head>
<script type='text/javascript'>
function getElements()
{
var x=document.getElementsByName("x");
alert(x.length);
}
</script>
</head>
<body>
Cats:
<input name="x" type="radio" value="Cats">
Dogs:<br/>
<input name="x" type="radio" value="Dogs">
<br/>
<input type="button" onclick="getElements()" value="FindElementsNamed 'x'?">
</body>

Example2:
<head>
<script>
function fun1()
{
x=document.getElementsByName("d1")
alert(x[0].innerHTML)
alert(x[1].innerHTML)
}
</script>
</head>
<body>
<div class="divcls" name='d1'>This is JS</div>
<p name="d1">This is jQuery</p>
<button onclick="fun1()">Click
</body>

getElementsByClassName() Method
The getElementsByClassName() method returns a collection of all elements in the document with the specified class name, as a NodeList object.

Syntax
document.getElementsByClassName(classname);

Example:
<head>
<script>
function MyFun()
{
var arr=document.getElementsByClassName("xyz");
alert(arr[0].innerHTML);
}
</script>
</head>
<body>
<div class="abc">Hi</div>
<div class="abc">Hello</div>
<div class="xyz">HiRaaJ</div>
<input type="button" value="Click" onclick="MyFun()">
</body>

Example:
<!DOCTYPE html>
<html>
<script>
function myFunction() 
{
var x = document.getElementsByClassName("example");
x[0].innerHTML = "Hello World!";
x[1].innerHTML = "Hello World!";
}
</script>
<body>
<p style='color:blue'>Click the button to change the text of the div element with class="example"</p>
<div class="example">First div element with class="example".</div>
<div class="example">Second div element with class="example".</div>
<button onclick="myFunction()">ClickMe</button>
</body>
</html>

JavaScript Output
JavaScript does NOT have any built-in print or display functions. JavaScript can "display" data in different ways:
1 Writing into an alert box, using window.alert().
2 Writing into the HTML output using document.write().
3 Writing into an HTML element, using innerHTML.
4 Writing into the browser console, using console.log().

The console.log() Method
In your browser, you can use the console.log() method to display data.

<body>
<script>
a = 5;
b = 6;
c = a + b;
console.log(c);
</script>
</body>
----------------------------------------------------------------------------------------------------------------------------------------------
JavaScript Hoisting
JavaScript Declarations are Hoisted. Hoisting is JavaScript's default behavior of moving declarations to the top. In JavaScript, a variable can be declared after it has been used. In other words; a variable can be used before it has been declared.

Example1:
<!doctype html>
<body>
<script type='text/javascript'>
x = 5;
document.write("The Value is: ",x)
var x; 
</script>
</body>

Example2:
<!doctype html>
<body>
<script type='text/javascript'>
var x; 
x = 5;
document.write("The Value is: ",x)
</script>
</body>

NOTE:
JavaScript Initializations are Not Hoisted. JavaScript only hoists declarations, not initializations.

EXAMPLE:
<!doctype html>
<body>
<script type='text/javascript'>
var x = 5; 
var y = 7; 
document.write(x+y)
</script>
</body>

EXAMPLE:
<!doctype html>
<body>
<script type='text/javascript'>
document.write(x+y)
var x = 5; 
var y = 7; 
</script>
</body>

JavaScript Use Strict
"use strict";  Defines that JavaScript code should be executed in "strict mode". The "use strict" directive is new in JavaScript 1.8.5 (ECMAScript version 5).

Declaring Strict Mode
Declared at the beginning of a JavaScript file, it has global scope (all code will execute in strict mode):

Example:
<body>
<p>Activate debugging in your browser (F12) to see the error report.</p>
<script>
"use strict";
x = 3.14;    // This will cause an error (x is not defined).
</script>
</body>

Why Strict Mode?
Strict mode makes it easier to write "secure" JavaScript. Strict mode changes previously accepted "bad syntax" into real errors.

What is a Webform?
A Webform (HTML form) allows a user to enter data that is sent to a server for processing. These forms contains checkboxes, radio buttons, or text fields.  Webforms are defined in formal programming languages such as HTML, Perl, Php, Java or .NET.

JavaScript Form Validation:
HTML form validation can be done by a JavaScript.  JavaScript, provides a way to validate form's data on the client's computer before sending it to the web server. Form validation generally performs two functions.

Basic Validation - The form must be checked to make sure data was entered into each form field that required it. This would need just loop through each field in the form and check for data.

Data Format Validation - The data that is entered must be checked for correct form and value. This would need to put more logic to test correctness of data.

Data Validation
It is the process of ensuring that computer input is clean, correct, and useful.

1 The purpose of data validation is to ensure correct input to a computer application.
2 Validation can be defined by many different methods, and deployed in many different ways.
3 Server side validation is performed by a web server, after input has been sent to the server.
4 Client side validation is performed by a web browser, before input is sent to a web server.

HTML Constraint Validation
HTML5 introduced a new HTML validation concept called constraint validation.

HTML constraint validation is based on:
    Constraint validation HTML Input Attributes
    Constraint validation DOM Properties and Methods

Constraint Validation HTML Input Attributes
Attribute 	Description
disabled 	Specifies that the input element should 	be disabled
max 	Specifies the maximum value of an input 	element
min 	Specifies the minimum value of an input 	element
pattern 	Specifies the value pattern of an input 	element
required 	Specifies that the input field requires an 	element
type  	Specifies the type of an input element

Form data that typically are checked by a JavaScript:
1. If a text input is empty or not
2. If a text input is all numbers
3. If a text input is all letters (only Alphabets)
4. has the user left required fields empty?
5. has the user entered a valid e-mail address?
6. If a text input is all alphanumeric characters (numbers & letters)
7. If a text input has the correct number of characters in it 
8. If a selection has been made from an HTML select 
9. has the user entered a valid date?
10. has the user entered text in a numeric field?

Example:
<!doctype html>
<head>
<script type='text/javascript'>
function notEmpty()
{
var myTextField = document.getElementById('myText');
if(myTextField.value != "")
{
alert("You entered: " + myTextField.value)
}
else
{
alert("Would you please enter some text?")		
}
}
</script>
</head>
<body>
<form action='nit.html'>
<input type='text' id='myText' /><br/>
<input type='button' onclick='notEmpty()' value='Form Validate' />
</form>
</body>

Automatic HTML Form Validation
Example:
<!doctype html>
<body>
<form action="nit.html" method="post">
<input type="text" name="fname" required>
<input type="submit" value="Submit">
</form>
<p>If you click submit, without filling out the text field, your browser will display an error message.</p>
</body>

The disabled Attribute
The disabled attribute specifies that the input field is disabled. A disabled element is un-usable and un-clickable. Disabled elements will not be submitted.

Example:
<!doctype html>
<body>
<form action="nit.html">
First name:<br>
<input type="text" name="firstname" value ="John" disabled><br>
Last name:<br>
<input type="text" name="lastname"><br/>
<input type='submit' value="Disabled">
</form>
</body>

Disable Button
<!doctype html>
<head>
<script>
function disableElement()
{
document.getElementById("secondbtn").disabled=true;
}
</script>
</head>
<body>
<form>
Buttons:<br/>
<input type="button" id="firstbtn" value="OK">
<input type="button" id="secondbtn" value="Cancel">
<button onclick="disableElement()">Disable button</button>
</form>
</body>
---------------------------------------------------------------------------------------------------------------------
Show HTML code on Web Page:
Types of tag to display code on webpage.
1 pre Tag
2 code Tag

Step 1 =>Open VSCODE or any HTML editor which you like.
Step 2 => HTML coding in your VSCode
In <pre> .. </pre> tag we show the HTML angle brackets (< >) tags with help of &lt; 
< = &lt;
> = &gt;

&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Welcome to NareshIT.&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;NareshIT-HYD Wesbite&lt;/h1&gt;
&lt;h2&gt;My first page.&lt;/h2&gt;
&lt;p&gt;
  NareshIT is Leading IT Traning Provider in INDIA.!
&lt;p&gt;  
&lt;/body&gt;
&lt;/html&gt;	

STEP3: Apply CSS:
.mycode
{
display: block; 
padding: 3px 3px 2px; 
font-size: 14px; 
line-height: 20px;
width: 100%;
background-color: #333;
font-family: arial;
color: #f7f7f7;
font-weight: bold;
}
Step4: Finally, Save your page with AnyName.html, Run on any Web browser.	

Browser keyboard shortcut keys for Live Projects.
Shortcut Keys	Description
Ctrl + T		To open the New Tab.
Ctrl + W		To close the current Open Tab.
Ctrl + Shift + T	To Reopen the Closed Tab.
Ctrl + C		To copy the selected text.
Ctrl + V		To paste the copied text.
Ctrl + X		Cut the selected text in browser addressbar or in textbox.
Ctrl + P		Print the current page
Ctrl + A		Select the all text in current page.
Ctrl + S		To save the current Web page.
Ctrl + D		Bookmark the current webpage.
Ctrl + J		To open the browser download window.
Ctrl +		Zoom the current web page.
Ctrl -		Zoom out the current page.
Ctrl + Tab		Switch between the Tab in serial order.
Ctrl + Shift + Tab	Switch back to previous Tab.
Ctrl + H		To open the Browser History.
Home		Goes to beginning of document and goes to starting of text.
End		Goes to end of current line and goes to end of the page.
Shift + Home	Highlights from current position to beginning of line.
Shift + End	Highlights from current position to end of line.
Ctrl + Shift + W	Close the opera browser.
Ctrl + Shift + Q	Close the browser.
F11		View the page in Full screen Mode.
F12		To open the inspect element.
Ctrl + U		View the shource code of page.
Ctrl + F		Find in the current page.
Ctrl + Shift + B	To show the Bookmark bar.
Ctrl + Shift + O	Open the Bookmark Manager.

Horizontal Menu bar:
Step 1 =>Open VSCODE or any HTML editor which you like.
Step 2 => HTML coding in your VSCode
<!DOCTYPE html>
  <head>
  <title>Horizontal Menu bar</title>
  </head>
  <body>
  <!-- div align in center -->
  <div id="menubar">
  <ul><li>Home</li>
    <li>Tutorial</li>
    <li>Wallpaper</li>
    <li>Team Work</li>
    <li>Feedback</li>
    <li>Contact us</li>
    <li>About us</li>
    <li>Blog</li>
  </ul>
  </div>    
  </body>
  </html>

Step 3. Apply the CSS:
body{background-color:#84bf76;}
    /*div menubar css*/
    #menubar{width:810px; margin-left:auto;  margin-right:auto; margin-top:80px; height:auto;}
    ul {
      text-transform:uppercase;
      text-align: left;
      display: inline;
      margin: 0;
      padding: 15px 4px 17px 0;
      list-style: none;
      box-shadow: 0 0 5px rgba(0, 0, 0, 0.15);
    }
    ul li {
      font: bold 12px/18px sans-serif;
      display: inline-block;
      margin-right: -5px;
      position: relative;
      padding: 15px 20px;
      background: #f7f7f7;
      color:#6aa25d;
      cursor: pointer;
      transition: all 0.2s;
    }
    ul li:hover {
      background: #6aa25d;
      color: #f7f7f7;
      }

Step4. Finally,Save your page with AnyName.html, Run on any Web browser.

Example: Horizontal Submenu bar in HTML with CSS
Step 1 =>Open VSCODE or any HTML editor which you like.
Step 2 => HTML coding in your VSCode

<!doctype html>
  <head>
  <title>Horizontal Menu bar</title>
  </head>
  <body>
  <div id="menubar">
  <ul>
 <a href="#"><li>Home</li></a>
  <a href="#"><li>Tutorial</li></a>
  <li>Wallpaper ≡
  	<ul>
  	<a href="#"><li>Nature</li></a>
	<a href="#"><li>Romantic</li></a>
	<a href="#"><li>Love</li></a>
  	</ul>
  </li> 
  <li>Team Work ≡
  	<ul>
  	<a href="#"><li>Project 1</li></a>
  	<a><li>Project 2 ≡
  	<ul>
  	<li>Module 2</li>
  	<li>Module 2</li>
  	<li>Module 3</li>
  	<li>Module 4</li>
  	</ul>
	</li>
	<li>Project 3</li>
	</a>
	  </ul>
	  </li>
  <a href="#"><li>Feedback</li></a>
  <a href="#"><li>Contact us</li></a>
  <a href="#"><li>About us</li></a>
  <a href="#"><li>Blog</li></a>
</ul>
</div>
</body>
</html>

STEP3: Apply the CSS
Step4: Finally, Save your page with AnyName.html, Run on any Web browser.	  

Example: Vertical Menu bar
Step 1 =>Open VSCODE or any HTML editor which you like.
Step 2 => HTML coding in your VSCode

<!doctype html>
<html>
  <head>
  <title>Vertical Menu bar</title>
  </head>
  <body>
   <div id='cssmenu'>
   <ul>
   <li><a href='index.py'><span>Home</span></a></li>
   <li><a href='#'><span>CSS Tutorial</span></a></li>
   <li><a href='#'><span>Wallpaper</span></a></li>
   <li><a href='#'><span>Blog</span></a></li>     
   <li><a href="#"><span>History</span></a></li>
   <li><a href="#"><span>Company</span></a></li>   
   <li><a href='#'>Login</a></li>     
   </ul>
   </div>    
  </body>
  </html>

STEP3: Apply the CSS
    #cssmenu {padding: 0; margin: 0; border: 0; line-height: 1;}
    #cssmenu ul,
    #cssmenu ul li{list-style: none; margin: 0; padding: 0;}

    #cssmenu ul li.hover,
    #cssmenu ul li:hover {position: relative; z-index: 599; cursor: default;}

    #cssmenu {width: 200px; background: #f7f7f7; font-family:sans-serif; font-weight:bold;
    zoom: 1; font-size: 12px;}
    #cssmenu:before {content: ''; display: block;}

    #cssmenu:after{content: ''; display: table; clear: both;}
    #cssmenu a {display: block; padding: 15px 20px; color: #f26724; text-decoration: none;
    text-transform: uppercase; border-bottom: 1px solid #ffffff;}

    #cssmenu > ul {width: 200px;}
    #cssmenu > ul > li > a {border-left: 4px solid #095586; color: #095586;}
    #cssmenu > ul > li a:hover {background: #095586; color:#f1f1f1;}

Step4: Finally, Save your page with AnyName.html, Run on any Web browser.	  

Example: Responsive Static Login Page (Bootstrap)
Step 1 =>Open VSCODE or any HTML editor which you like.
Step 2 => HTML coding in your VSCode
<!doctype html>
<html>
<head>
<meta charset="utf-8">
<title>-----------------</title>
</head>
<body>
-----------------
-----------------
</body>
</html>

Step 3 => Add responsive <meta> tag in head section:
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css" integrity="sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu" crossorigin="anonymous">

Step4 => Add main login coding in <body> .. </body> Section 

<body>
<div class="container main-container">
<div class="login-box">
<div class="header">
<h2>Login Page</h2>
</div>
<div class="login">
<div class="form-control1">
<input type="text" placeholder="Valid User Name" class="tbox" required />
</div>
<div class="form-control1">
<input type="password" placeholder="*********" class="tbox" required />
</div>
<div class="form-control1">
<input type="submit" value="Login Now" class="btn" />
</div>
<div>
<a href="#" class="link">forgot password</a>
</div>
</div>
</div>
 </div>
</body>

Step 5.Apply CSS to all Elements for better UI.
Step 6. Finally,Save your page with AnyName.html, Run on any Web browser.

Example: JS Validations
Name must be non-empty and password must be less than 6 characters long.
<!doctype html>
<head>
<script>  
function validateform()
{  
var name=document.myform.name.value;  
var password=document.myform.password.value;    
if (name==null || name=="")
{  
  alert("Name Must not blank");  
  return false;  
}
else if(password.length<6)
{  
  alert("Password Must be 6 characters long");  
  return false;  
  }  
}  
</script>  
</head>
<body>  
<form name="myform" method="post" action="inbox.py" onsubmit="return validateform()" >  
<label>Name: </label> <br/>
<input type="text" name="name"><br/>  
<label>Password: </label> <br/>
Password: <input type="password" name="password"><br/>  
<input type="submit" value="Login">  
<input type="reset" value="cancel">  
</form> 
 <body>  

Example: Validaing Using Regular Expressions in JS..!!
<head>
<script type='text/javascript'>
function login()
{
var uname = document.getElementById("email").value;
var pwd = document.getElementById("pwd1").value;
var filter = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;
if(uname =='')
{
alert("Plz Enter Valid User Name.");
}
else if(pwd=='')
{
alert("Plz Enter Valid Password");
}
else if(!filter.test(uname))
{
alert("Enter valid email id.");
}
else if(pwd.length < 6 || pwd.length > 6)
{
alert("Password Min and Max length is 6.");
}
else
{
alert('You are Logged in Successfully..!!');
//Redirecting to other page or website..!!
window.location = "https://www.nareshit.com";
}
}
//Clear Inputfield code.
function clearFunc()
{
document.getElementById("email").value="";
document.getElementById("pwd1").value="";
}
</script>
</head>

Example:Registration form with JS Validations
<head>
<script type='text/javascript>
function registration()
{
var name= document.getElementById("t1").value;
var email= document.getElementById("t2").value;
var uname= document.getElementById("t3").value;
var pwd= document.getElementById("t4").value;			
var cpwd= document.getElementById("t5").value;
//Email Regular Expression
var pwd_expression = /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-])/;
var letters = /^[A-Za-z]+$/;
var filter = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;
if(name=='')
{
alert('Enter your name');
}
else if(!letters.test(name))
{
alert('Name Must be Alphabets');
}
else if(email=='')
{
alert('Enter Valid Mail id');
}
else if (!filter.test(email))
{
alert('Invalid email');
}
else if(uname=='')
{
alert('Enter Valid User Name.');
}
else if(!letters.test(uname))
{
alert('Name Must be Alphabets');
}
else if(pwd=='')
{
alert('Enter Valid Password');
}
else if(cpwd=='')
{
alert('Enter Confirm Password');
}
else if(!pwd_expression.test(pwd))
{
alert ('Mixed Characters for Password');
}
else if(pwd != cpwd)
{
alert ('Password Miss Matched');
}
else if(document.getElementById("t5").value.length < 6)
{
alert ('Password min. Length is 6');
}
else if(document.getElementById("t5").value.length > 12)
{
alert ('Password maximum Length is 12');
}
else
{				                            
alert('Thank You for Logged In');
window.location = "http://www.nareshit.com"; 
}
}
function clearFunc()
{
document.getElementById("t1").value="";
document.getElementById("t2").value="";
document.getElementById("t3").value="";
document.getElementById("t4").value="";
document.getElementById("t5").value="";
}
</script>
</head>

Password Validation: If entered valid (GreenColorMsg) invalid(RedColorMsg)
Password Must contains
1. A Lowercase Letter
2. A Capital Letter
3. A Number
4. Minimum 6 Characters

Step 1 =>Open VSCODE or any HTML editor which you like.
Step 2 => HTML coding in your VSCode

<body>
<div class="container">
  <form action="/action_page.py">
    <label for="usrname">Username</label>
    <input type="text" id="usrname" name="usrname" required>

    <label for="psw">Password</label>
  <  input type="password" id="psw" name="psw" pattern="(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}" title="Must contain at least one number and one uppercase and lowercase letter, and at least 8 or more characters" required>

    <input type="submit" value="Submit">
  </form>
</div>

<div id="message">
  <h3>Password must contain the following:</h3>
  <p id="letter" class="invalid">A <b>lowercase</b> letter</p>
  <p id="capital" class="invalid">A <b>capital (uppercase)</b> letter</p>
  <p id="number" class="invalid">A <b>number</b></p>
  <p id="length" class="invalid">Minimum <b>8 characters</b></p>
</div>
</body>

Step3 Add CSS:
/* Style all input fields */
input {
  width: 100%;
  padding: 12px;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-sizing: border-box;
  margin-top: 6px;
  margin-bottom: 16px;
}

/* Style the submit button */
input[type=submit] {
  background-color: #04AA6D;
  color: white;
}

/* Style the container for inputs */
.container {
  background-color: #f1f1f1;
  padding: 20px;
}

/* The message box is shown when the user clicks on the password field */
#message {
  display:none;
  background: #f1f1f1;
  color: #000;
  position: relative;
  padding: 20px;
  margin-top: 10px;
}

#message p {
  padding: 10px 35px;
  font-size: 18px;
}

/* Add a green text color and a checkmark when the requirements are right */
.valid {
  color: green;
}

.valid:before {
  position: relative;
  left: -35px;
  content: "&#10004;";
}

/* Add a red text color and an "x" icon when the requirements are wrong */
.invalid {
  color: red;
}

.invalid:before {
  position: relative;
  left: -35px;
  content: "&#10006;";
}

Step4: Add JavaScript:
<script>
var myInput = document.getElementById("psw");
var letter = document.getElementById("letter");
var capital = document.getElementById("capital");
var number = document.getElementById("number");
var length = document.getElementById("length");

// When the user clicks on the password field, show the message box
myInput.onfocus = function() 
{
  document.getElementById("message").style.display = "block";
}

// When the user clicks outside of the password field, hide the message box
myInput.onblur = function() 
{
  document.getElementById("message").style.display = "none";
}

// When the user starts to type something inside the password field
myInput.onkeyup = function() {
  // Validate lowercase letters
  var lowerCaseLetters = /[a-z]/g;
  if(myInput.value.match(lowerCaseLetters)) {
    letter.classList.remove("invalid");
    letter.classList.add("valid");
  } else {
    letter.classList.remove("valid");
    letter.classList.add("invalid");
}

  // Validate capital letters
  var upperCaseLetters = /[A-Z]/g;
  if(myInput.value.match(upperCaseLetters)) {
    capital.classList.remove("invalid");
    capital.classList.add("valid");
  } else {
    capital.classList.remove("valid");
    capital.classList.add("invalid");
  }

  // Validate numbers
  var numbers = /[0-9]/g;
  if(myInput.value.match(numbers)) {
    number.classList.remove("invalid");
    number.classList.add("valid");
  } else {
    number.classList.remove("valid");
    number.classList.add("invalid");
  }

  // Validate length
  if(myInput.value.length >= 8) {
    length.classList.remove("invalid");
    length.classList.add("valid");
  } else {
    length.classList.remove("valid");
    length.classList.add("invalid");
  }
}
</script>

Step5: Finally, Save your page with AnyName.html, Run on any Web browser.	  

Example:
Toggle Password Visibility:
<!doctype html>
<body>
<p>Click the radio button to toggle between password visibility:</p>
Password: <br>
<input type="password" value="sara@123" id="myInput"><br><br>
<input type="checkbox" onclick="myFunction()">Show Password
<script>
function myFunction() {
  var x = document.getElementById("myInput");
  if (x.type === "password") {
    x.type = "text";
  } else {
    x.type = "password";
  }
}
</script>
</body>
-------------------------------------------------------------------------------------------------------------------------------------------------
Show HTML code on Web Page:
Types of tag to display code on webpage.
1 pre Tag
2 code Tag

Step 1 =>Open VSCODE or any HTML editor which you like.
Step 2 => HTML coding in your VSCode
In <pre> .. </pre> tag we show the HTML angle brackets (< >) tags with help of &lt; 
< = &lt;
> = &gt;

&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Welcome to NareshIT.&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;NareshIT-HYD Wesbite&lt;/h1&gt;
&lt;h2&gt;My first page.&lt;/h2&gt;
&lt;p&gt;
  NareshIT is Leading IT Traning Provider in INDIA.!
&lt;p&gt;  
&lt;/body&gt;
&lt;/html&gt;	

STEP3: Apply CSS:
.mycode
{
display: block; 
padding: 3px 3px 2px; 
font-size: 14px; 
line-height: 20px;
width: 100%;
background-color: #333;
font-family: arial;
color: #f7f7f7;
font-weight: bold;
}
Step4: Finally, Save your page with AnyName.html, Run on any Web browser.	

Browser keyboard shortcut keys for Live Projects.
Shortcut Keys	Description
Ctrl + T		To open the New Tab.
Ctrl + W		To close the current Open Tab.
Ctrl + Shift + T	To Reopen the Closed Tab.
Ctrl + C		To copy the selected text.
Ctrl + V		To paste the copied text.
Ctrl + X		Cut the selected text in browser addressbar or in textbox.
Ctrl + P		Print the current page
Ctrl + A		Select the all text in current page.
Ctrl + S		To save the current Web page.
Ctrl + D		Bookmark the current webpage.
Ctrl + J		To open the browser download window.
Ctrl +		Zoom the current web page.
Ctrl -		Zoom out the current page.
Ctrl + Tab		Switch between the Tab in serial order.
Ctrl + Shift + Tab	Switch back to previous Tab.
Ctrl + H		To open the Browser History.
Home		Goes to beginning of document and goes to starting of text.
End		Goes to end of current line and goes to end of the page.
Shift + Home	Highlights from current position to beginning of line.
Shift + End	Highlights from current position to end of line.
Ctrl + Shift + W	Close the opera browser.
Ctrl + Shift + Q	Close the browser.
F11		View the page in Full screen Mode.
F12		To open the inspect element.
Ctrl + U		View the shource code of page.
Ctrl + F		Find in the current page.
Ctrl + Shift + B	To show the Bookmark bar.
Ctrl + Shift + O	Open the Bookmark Manager.

Horizontal Menu bar:
Step 1 =>Open VSCODE or any HTML editor which you like.
Step 2 => HTML coding in your VSCode
<!DOCTYPE html>
  <head>
  <title>Horizontal Menu bar</title>
  </head>
  <body>
  <!-- div align in center -->
  <div id="menubar">
  <ul><li>Home</li>
    <li>Tutorial</li>
    <li>Wallpaper</li>
    <li>Team Work</li>
    <li>Feedback</li>
    <li>Contact us</li>
    <li>About us</li>
    <li>Blog</li>
  </ul>
  </div>    
  </body>
  </html>

Step 3. Apply the CSS:
body{background-color:#84bf76;}
    /*div menubar css*/
    #menubar{width:810px; margin-left:auto;  margin-right:auto; margin-top:80px; height:auto;}
    ul {
      text-transform:uppercase;
      text-align: left;
      display: inline;
      margin: 0;
      padding: 15px 4px 17px 0;
      list-style: none;
      box-shadow: 0 0 5px rgba(0, 0, 0, 0.15);
    }
    ul li {
      font: bold 12px/18px sans-serif;
      display: inline-block;
      margin-right: -5px;
      position: relative;
      padding: 15px 20px;
      background: #f7f7f7;
      color:#6aa25d;
      cursor: pointer;
      transition: all 0.2s;
    }
    ul li:hover {
      background: #6aa25d;
      color: #f7f7f7;
      }

Step4. Finally,Save your page with AnyName.html, Run on any Web browser.

Example: Horizontal Submenu bar in HTML with CSS
Step 1 =>Open VSCODE or any HTML editor which you like.
Step 2 => HTML coding in your VSCode

<!doctype html>
  <head>
  <title>Horizontal Menu bar</title>
  </head>
  <body>
  <div id="menubar">
  <ul>
 <a href="#"><li>Home</li></a>
  <a href="#"><li>Tutorial</li></a>
  <li>Wallpaper ≡
  	<ul>
  	<a href="#"><li>Nature</li></a>
	<a href="#"><li>Romantic</li></a>
	<a href="#"><li>Love</li></a>
  	</ul>
  </li> 
  <li>Team Work ≡
  	<ul>
  	<a href="#"><li>Project 1</li></a>
  	<a><li>Project 2 ≡
  	<ul>
  	<li>Module 2</li>
  	<li>Module 2</li>
  	<li>Module 3</li>
  	<li>Module 4</li>
  	</ul>
	</li>
	<li>Project 3</li>
	</a>
	  </ul>
	  </li>
  <a href="#"><li>Feedback</li></a>
  <a href="#"><li>Contact us</li></a>
  <a href="#"><li>About us</li></a>
  <a href="#"><li>Blog</li></a>
</ul>
</div>
</body>
</html>

STEP3: Apply the CSS
Step4: Finally, Save your page with AnyName.html, Run on any Web browser.	  

Example: Vertical Menu bar
Step 1 =>Open VSCODE or any HTML editor which you like.
Step 2 => HTML coding in your VSCode

<!doctype html>
<html>
  <head>
  <title>Vertical Menu bar</title>
  </head>
  <body>
   <div id='cssmenu'>
   <ul>
   <li><a href='index.py'><span>Home</span></a></li>
   <li><a href='#'><span>CSS Tutorial</span></a></li>
   <li><a href='#'><span>Wallpaper</span></a></li>
   <li><a href='#'><span>Blog</span></a></li>     
   <li><a href="#"><span>History</span></a></li>
   <li><a href="#"><span>Company</span></a></li>   
   <li><a href='#'>Login</a></li>     
   </ul>
   </div>    
  </body>
  </html>

STEP3: Apply the CSS
    #cssmenu {padding: 0; margin: 0; border: 0; line-height: 1;}
    #cssmenu ul,
    #cssmenu ul li{list-style: none; margin: 0; padding: 0;}

    #cssmenu ul li.hover,
    #cssmenu ul li:hover {position: relative; z-index: 599; cursor: default;}

    #cssmenu {width: 200px; background: #f7f7f7; font-family:sans-serif; font-weight:bold;
    zoom: 1; font-size: 12px;}
    #cssmenu:before {content: ''; display: block;}

    #cssmenu:after{content: ''; display: table; clear: both;}
    #cssmenu a {display: block; padding: 15px 20px; color: #f26724; text-decoration: none;
    text-transform: uppercase; border-bottom: 1px solid #ffffff;}

    #cssmenu > ul {width: 200px;}
    #cssmenu > ul > li > a {border-left: 4px solid #095586; color: #095586;}
    #cssmenu > ul > li a:hover {background: #095586; color:#f1f1f1;}

Step4: Finally, Save your page with AnyName.html, Run on any Web browser.	  

Example: Responsive Static Login Page (Bootstrap)
Step 1 =>Open VSCODE or any HTML editor which you like.
Step 2 => HTML coding in your VSCode
<!doctype html>
<html>
<head>
<meta charset="utf-8">
<title>-----------------</title>
</head>
<body>
-----------------
-----------------
</body>
</html>

Step 3 => Add responsive <meta> tag in head section:
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css" integrity="sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu" crossorigin="anonymous">

Step4 => Add main login coding in <body> .. </body> Section 

<body>
<div class="container main-container">
<div class="login-box">
<div class="header">
<h2>Login Page</h2>
</div>
<div class="login">
<div class="form-control1">
<input type="text" placeholder="Valid User Name" class="tbox" required />
</div>
<div class="form-control1">
<input type="password" placeholder="*********" class="tbox" required />
</div>
<div class="form-control1">
<input type="submit" value="Login Now" class="btn" />
</div>
<div>
<a href="#" class="link">forgot password</a>
</div>
</div>
</div>
 </div>
</body>

Step 5.Apply CSS to all Elements for better UI.
Step 6. Finally,Save your page with AnyName.html, Run on any Web browser.

Example: JS Validations
Name must be non-empty and password must be less than 6 characters long.
<!doctype html>
<head>
<script>  
function validateform()
{  
var name=document.myform.name.value;  
var password=document.myform.password.value;    
if (name==null || name=="")
{  
  alert("Name Must not blank");  
  return false;  
}
else if(password.length<6)
{  
  alert("Password Must be 6 characters long");  
  return false;  
  }  
}  
</script>  
</head>
<body>  
<form name="myform" method="post" action="inbox.py" onsubmit="return validateform()" >  
<label>Name: </label> <br/>
<input type="text" name="name"><br/>  
<label>Password: </label> <br/>
Password: <input type="password" name="password"><br/>  
<input type="submit" value="Login">  
<input type="reset" value="cancel">  
</form> 
 <body>  

Example: Validaing Using Regular Expressions in JS..!!
<head>
<script type='text/javascript'>
function login()
{
var uname = document.getElementById("email").value;
var pwd = document.getElementById("pwd1").value;
var filter = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;
if(uname =='')
{
alert("Plz Enter Valid User Name.");
}
else if(pwd=='')
{
alert("Plz Enter Valid Password");
}
else if(!filter.test(uname))
{
alert("Enter valid email id.");
}
else if(pwd.length < 6 || pwd.length > 6)
{
alert("Password Min and Max length is 6.");
}
else
{
alert('You are Logged in Successfully..!!');
//Redirecting to other page or website..!!
window.location = "https://www.nareshit.com";
}
}
//Clear Inputfield code.
function clearFunc()
{
document.getElementById("email").value="";
document.getElementById("pwd1").value="";
}
</script>
</head>

Example:Registration form with JS Validations
<head>
<script type='text/javascript>
function registration()
{
var name= document.getElementById("t1").value;
var email= document.getElementById("t2").value;
var uname= document.getElementById("t3").value;
var pwd= document.getElementById("t4").value;			
var cpwd= document.getElementById("t5").value;
//Email Regular Expression
var pwd_expression = /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-])/;
var letters = /^[A-Za-z]+$/;
var filter = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;
if(name=='')
{
alert('Enter your name');
}
else if(!letters.test(name))
{
alert('Name Must be Alphabets');
}
else if(email=='')
{
alert('Enter Valid Mail id');
}
else if (!filter.test(email))
{
alert('Invalid email');
}
else if(uname=='')
{
alert('Enter Valid User Name.');
}
else if(!letters.test(uname))
{
alert('Name Must be Alphabets');
}
else if(pwd=='')
{
alert('Enter Valid Password');
}
else if(cpwd=='')
{
alert('Enter Confirm Password');
}
else if(!pwd_expression.test(pwd))
{
alert ('Mixed Characters for Password');
}
else if(pwd != cpwd)
{
alert ('Password Miss Matched');
}
else if(document.getElementById("t5").value.length < 6)
{
alert ('Password min. Length is 6');
}
else if(document.getElementById("t5").value.length > 12)
{
alert ('Password maximum Length is 12');
}
else
{				                            
alert('Thank You for Logged In');
window.location = "http://www.nareshit.com"; 
}
}
function clearFunc()
{
document.getElementById("t1").value="";
document.getElementById("t2").value="";
document.getElementById("t3").value="";
document.getElementById("t4").value="";
document.getElementById("t5").value="";
}
</script>
</head>

Password Validation: If entered valid (GreenColorMsg) invalid(RedColorMsg)
Password Must contains
1. A Lowercase Letter
2. A Capital Letter
3. A Number
4. Minimum 6 Characters

Step 1 =>Open VSCODE or any HTML editor which you like.
Step 2 => HTML coding in your VSCode

<body>
<div class="container">
  <form action="/action_page.py">
    <label for="usrname">Username</label>
    <input type="text" id="usrname" name="usrname" required>

    <label for="psw">Password</label>
  <  input type="password" id="psw" name="psw" pattern="(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}" title="Must contain at least one number and one uppercase and lowercase letter, and at least 8 or more characters" required>

    <input type="submit" value="Submit">
  </form>
</div>

<div id="message">
  <h3>Password must contain the following:</h3>
  <p id="letter" class="invalid">A <b>lowercase</b> letter</p>
  <p id="capital" class="invalid">A <b>capital (uppercase)</b> letter</p>
  <p id="number" class="invalid">A <b>number</b></p>
  <p id="length" class="invalid">Minimum <b>8 characters</b></p>
</div>
</body>

Step3 Add CSS:
/* Style all input fields */
input {
  width: 100%;
  padding: 12px;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-sizing: border-box;
  margin-top: 6px;
  margin-bottom: 16px;
}

/* Style the submit button */
input[type=submit] {
  background-color: #04AA6D;
  color: white;
}

/* Style the container for inputs */
.container {
  background-color: #f1f1f1;
  padding: 20px;
}

/* The message box is shown when the user clicks on the password field */
#message {
  display:none;
  background: #f1f1f1;
  color: #000;
  position: relative;
  padding: 20px;
  margin-top: 10px;
}

#message p {
  padding: 10px 35px;
  font-size: 18px;
}

/* Add a green text color and a checkmark when the requirements are right */
.valid {
  color: green;
}

.valid:before {
  position: relative;
  left: -35px;
  content: "&#10004;";
}

/* Add a red text color and an "x" icon when the requirements are wrong */
.invalid {
  color: red;
}

.invalid:before {
  position: relative;
  left: -35px;
  content: "&#10006;";
}

Step4: Add JavaScript:
<script>
var myInput = document.getElementById("psw");
var letter = document.getElementById("letter");
var capital = document.getElementById("capital");
var number = document.getElementById("number");
var length = document.getElementById("length");

// When the user clicks on the password field, show the message box
myInput.onfocus = function() 
{
  document.getElementById("message").style.display = "block";
}

// When the user clicks outside of the password field, hide the message box
myInput.onblur = function() 
{
  document.getElementById("message").style.display = "none";
}

// When the user starts to type something inside the password field
myInput.onkeyup = function() {
  // Validate lowercase letters
  var lowerCaseLetters = /[a-z]/g;
  if(myInput.value.match(lowerCaseLetters)) {
    letter.classList.remove("invalid");
    letter.classList.add("valid");
  } else {
    letter.classList.remove("valid");
    letter.classList.add("invalid");
}

  // Validate capital letters
  var upperCaseLetters = /[A-Z]/g;
  if(myInput.value.match(upperCaseLetters)) {
    capital.classList.remove("invalid");
    capital.classList.add("valid");
  } else {
    capital.classList.remove("valid");
    capital.classList.add("invalid");
  }

  // Validate numbers
  var numbers = /[0-9]/g;
  if(myInput.value.match(numbers)) {
    number.classList.remove("invalid");
    number.classList.add("valid");
  } else {
    number.classList.remove("valid");
    number.classList.add("invalid");
  }

  // Validate length
  if(myInput.value.length >= 8) {
    length.classList.remove("invalid");
    length.classList.add("valid");
  } else {
    length.classList.remove("valid");
    length.classList.add("invalid");
  }
}
</script>

Step5: Finally, Save your page with AnyName.html, Run on any Web browser.	  

Example:
Toggle Password Visibility:
<!doctype html>
<body>
<p>Click the radio button to toggle between password visibility:</p>
Password: <br>
<input type="password" value="sara@123" id="myInput"><br><br>
<input type="checkbox" onclick="myFunction()">Show Password
<script>
function myFunction() {
  var x = document.getElementById("myInput");
  if (x.type === "password") {
    x.type = "text";
  } else {
    x.type = "password";
  }
}
</script>
</body>
-------------------------------------------------------------------------------------------------------------------------------------
What is Bootstrap?
Bootstrap is a sleek, intuitive, and powerful mobile first front-end framework for faster and easier web development. It uses HTML, CSS and Javascript. Designed for everyone, everywhere for all devices of all shapes.

One framework, every device.Bootstrap easily and efficiently scales your websites and applications with a single code base, from phones to tablets to desktops with CSS media queries.

Why Use Bootstrap?
1 Mobile-first approach: Since Bootstrap 3, the framework consists of mobile-first styles throughout the entire library
2 Browser support: Bootstrap is supported by all popular browsers
3 Responsive web design: Bootstrap's responsive CSS adjusts to Desktops, Tablets, and  Mobile phones
4 Easy to get started: With just the knowledge of HTML and CSS anyone can get started with Bootstrap

What is Responsive Web Design?
Responsive web design is to create web sites which adjust and align themselves according to what media tool you use for viewing it.

What Does Bootstrap Include?
1 Scaffolding: Contains layout, grid system, fluid grid system, and responsive design
2 Base CSS: Contains classes for typography, tables, forms, buttons, images, and more
3 Components: Contains reusable components: icons, dropdowns, navbars, breadcrumbs, alerts, and more
4 JavaScript Plugins: Contains over a dozen custom jQuery plugins. You can include them all, or one by one
5 Customizable Components : Customize Bootstrap's components, LESS variables, and jQuery plugins to create your own version

History
Bootstrap was developed by Mark Otto and Jacob Thornton at Twitter. It was released as an open source product in August 2011 on GitHub. In June 2014 Bootstrap was the No.1 project on GitHub!

Team
Bootstrap is maintained by the founding team and a small group of invaluable core contributors.
1. Mark Otto
2. Jacob Thornton 
3. Chris Rebert
4. Julian Thilo
5. XhmikosR

Mark and logo
Use either the Bootstrap mark (a capital B) or the standard logo (just Bootstrap). It should always appear in Helvetica Neue Bold

Advantages of Bootstrap:
The biggest advantage of using Twitter Bootstrap is that it comes with free set of tools for creating flexible and responsive web layouts as well as common interface components.

Save lots of time — You can save lots of time and efforts using the Bootstrap predefined design templates and classes and concentrate on other development work.

Responsive features — Using Bootstrap you can easily create responsive designs. Bootstrap responsive features make your web pages to appear more appropriately on different devices and screen resolutions without any change in markup.
    
Consistent design — All Bootstrap components share the same design templates and styles through a central library, so that the designs and layouts of your web pages are consistent throughout your development.
    
Easy to use — Bootstrap is very easy to use. Anybody with the basic working knowledge of HTML and CSS can start development with Twitter Bootstrap.
    
Compatible with browsers — Twitter Bootstrap is created with modern browsers in mind and it is compatible with all modern browsers such as Mozilla Firefox, Google Chrome, Safari, Internet Explorer, and Opera.
    
Open Source — And the best part is, it is completely free to download and use.

Features of Bootstrap:
1 Save lots of time
2 Responsive features
3 Consistent design 
4 Easy to to use 
5 Compatible with browsers
6 Open Source

Bootstrap Environment Setup:
It is very easy to setup and start using Bootstrap. 

Download Bootstrap
You can download the latest version of Bootstrap from http://getbootstrap.com/. When you click on this link.

Here you can see two buttons:

Download Bootstrap: Clicking this, you can download the precompiled and minified versions of Bootstrap CSS, JavaScript, and fonts. No documentation or original source code files are included.

Download Source: Clicking this, you can get the latest Bootstrap LESS and JavaScript source code directly from GitHub.

File structure
PRECOMPILED BOOTSTRAP
Once the compiled version Bootstrap is downloaded, extract the ZIP file, and you will see the following file/directory structure:

Goto-->Images/compiledfilestructure Pic.

EOT -->Embedded OpenType 
WOFF--> Web Open Font Format (Mozilla)
SVG --> Scalable Vector Graphics
TTY --> TrueType Font 

What is LESS (stylesheet language)
Less is a CSS pre-processor, meaning that it extends the CSS language, adding features that allow variables, mixins, functions and many other techniques that allow you to make CSS that is more maintainable, themable and extendable.

LESS (Leaner CSS) is a dynamic stylesheet language designed by Alexis Sellier. It is influenced by Sass and has influenced the newer "SCSS" syntax of Sass. (visit--> www.lesscss.org)

What is Sass? (Visit --> www.sass-lang.com)
Sass is the most mature, stable, and powerful professional grade CSS extension language in the world. Sass (Syntactically Awesome Stylesheets) is a stylesheet language initially designed by Hampton Catlin and developed by Natalie Weizenbaum.

Sass is a scripting language that is interpreted into Cascading Style Sheets (CSS). SassScript is the scripting language itself. Sass consists of two syntaxes
1. The indented syntax
2. SCSS

Bootstrap Getting Started:
The HTML File
Since Bootstrap uses HTML elements and CSS properties that require the use of the HTML5 doctype, include the HTML5 doctype at the beginning of the page, along with the correct character set:

<!DOCTYPE html>
<html>	
  <head>
    <meta charset="utf-8">
  </head>
</html>

Keep in mind that Bootstrap 3 is mobile-first. Mobile-first styles are found throughout the entire Bootstrap library instead of in separate files.

To ensure proper rendering and touch zooming, also add the viewport meta tag inside the 
<head> element:
<meta name="viewport" content="width=device-width, initial-scale=1">

The width=device-width sets the width of the page to follow the screen-width of the device (which will vary depending on the device). The initial-scale=1 sets the initial zoom level when the page is first loaded by the browser.

Example:
<!DOCTYPE html>
<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1">
   <title>Bootstrap for Mobiles</title>
   <link href="css/bootstrap.min.css" rel="stylesheet">
   <script src="js/jquery.min.js"></script>
   <script src="js/bootstrap.min.js"></script>
</head>
<body>
  <h1>Hello Front-end Framework..!!</h1>
</body>
</html>

Example:
<head>
     <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="css/bootstrap.min.css">
  </head>
  <body>
    <div class="container">
      <h2>My R-Table</h2>
       <div class="table-responsive">          
       <table class="table table-striped table-bordered">
         <thead>
           <tr>
             <th>#</th>
             <th>Name</th>
             <th>Street</th>
           </tr>
         </thead>
         <tbody>
           <tr>
             <td>1</td>
             <td>NareshiTech</td>
             <td>Ameerpet</td>
           </tr>
           <tr>
             <td>2</td>
             <td>Nacre Services</td>
             <td>Shivbagh</td>
           </tr>
           <tr>
             <td>3</td>
             <td>SubbaRaju</td>
             <td>SriNagarColony</td>
           </tr>
         </tbody>
       </table>
      </div>    

Example:
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
   <link rel="stylesheet" href="css/bootstrap.min.css">
 </head>
 <body>
     <h2>Glyphicons</h2>
     <p>Cloud icon: <span class="glyphicon glyphicon-th-large"></span></p>      
     <p>Envelope icon: <span class="glyphicon glyphicon-envelope"></span></p>            
     <p>Search icon: <span class="glyphicon glyphicon-search"></span></p>
      </div>
      </body>
      -----------------------------------------------------------------------------------------------------------------------
      Adding Bootstrap to Your Web Pages
There are two ways of starting to use Bootstrap on your own web site.
1  Download Bootstrap from getbootstrap.com
2  Include Bootstrap from a CDN, like MaxCDN

Bootstrap CDN
If you don't want to download and host Bootstrap yourself, you can include it from a CDN (Content Delivery Network).

MaxCDN provide CDN support for Bootstrap's CSS and JavaScript. Also include jQuery:
MaxCDN:
<link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
<script src="http://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></script>

Containers
Bootstrap requires a containing element to wrap site contents and house our grid system. You may choose one of two containers to use in your projects. 

There are two containers to choose from:
1. Use the .container class for a responsive fixed width container:

Syntax:
<div class="container">

--------
--------
</div>

Example:
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="css/bootstrap.min.css">
      </head>
  <body>
    <div class="container">
      <h1>Heading 1</h1>      
      <p>This is a paragraph.</p>      
      <p>This is a paragraph.</p>      
      <p>This is a paragraph.</p>      
    </div>
    </body>
</html>

Container-Fluid:
Use the .container-fluid class for a full width container, spanning the entire width of the viewport:

Syntax:
<div class="container-fluid">

--------
--------
</div>

Example:
  <head>
     <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet"  href="css/bootstrap.min.css">
  </head>
  <body>
    <div class="container-fluid">
      <h1>Heading 1</h1>      
      <p>This is a paragraph.</p>      
      <p>This is a paragraph.</p>      
      <p>This is a paragraph.</p>      
    </div>
    </body>
    -------------------------------------------------------------------------------------------------------------------------------------------------
    Typography: (Bootstrap CSS Basic Text Reference)
Using typography feature of Bootstrap you can create headings, paragraphs, lists and other inline elements
Headings
All HTML headings, <h1> through <h6>, are available. .h1 through .h6 classes are also available.

Example:
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet"  href="css/bootstrap.min.css">
  </head>
  <body>
    <div class="container">
      <h1>h1 Bootstrap heading (36px)</h1>
      <h2>h2 Bootstrap heading (30px)</h2>
      <h3>h3 Bootstrap heading (24px)</h3>
      <h4>h4 Bootstrap heading (18px)</h4>
      <h5>h5 Bootstrap heading (14px)</h5>
      <h6>h6 Bootstrap heading (12px)</h6>
    </div>
  </body>

Inline Subheadings: <small>
In Bootstrap the <small> element will create a lighter, secondary text in any heading. Add .small class and you will get smaller text in a lighter color.

Example:
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet"  href="css/bootstrap.min.css">
  </head>
  <body>
    <div class="container">
      <h1>h1 heading <small>lighter, smaller text</small></h1>
      <h2>h2 heading <small>lighter, smaller text</small></h2>
      <h3>h3 heading <small>lighter, smaller text</small></h3>
      <h4>h4 heading <small>lighter, smaller text</small></h4>
      <h5>h5 heading <small>lighter, smaller text</small></h5>
      <h6>h6 heading <small>lighter, smaller text</small></h6>
    </div>
      </body>

Inline text elements
Marked text
For highlighting a run of text due to its relevance in another context, use the <mark> tag.

Example:
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="css/bootstrap.min.css">
  </head>
  <body>
    <div class="container">
      <p>Use the mark element to <mark>highlight</mark> text.</p>
    </div>
  </body>

Deleted text
For indicating blocks of text that have been deleted use the <del> tag.

Example:
 <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="css/bootstrap.min.css">
  </head>
  <body>
    <div class="container">
      <del>This line of text is meant to be treated as deleted text.</del>
    </div>
  </body>

Strikethrough text
For indicating blocks of text that are no longer relevant use the <s> tag.

Example:
 <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="css/bootstrap.min.css">
  </head>
  <body>
    <div class="container">
      <s>This line of text is meant to be treated as no longer accurate.</s>
    </div>
  </body>

Inserted text
For indicating additions to the document use the <ins> tag.

Example:
 <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="css/bootstrap.min.css">
  </head>
  <body>
    <div class="container">
      <ins>This line of text is meant to be treated as an addition to the document.</ins>
    </div>
  </body>

Underlined text
To underline text use the <u> tag.

Example:
 <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="css/bootstrap.min.css">
  </head>
  <body>
    <div class="container">
      <u>This line of text will render as underlined</u>
    </div>
  </body>

Small text
For de-emphasizing inline or blocks of text, use the <small> tag to set text at 85% the size of the parent. Heading elements receive their own font-size for nested <small> elements.

Example:
 <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="css/bootstrap.min.css">
  </head>
  <body>
    <div class="container">
     <small>This line of text is meant to be treated as fine print.</small>
    </div>
  </body>

Bold
For emphasizing a snippet of text with a heavier font-weight.

Example:
 <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="css/bootstrap.min.css">
  </head>
  <body>
    <div class="container">
     <strong>rendered as bold text</strong>
    </div>
  </body>

Italics
For emphasizing a snippet of text with italics.

Example:
 <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="css/bootstrap.min.css">
  </head>
  <body>
    <div class="container">
     <em>rendered as italicized text</em>
    </div>
  </body>

<abbr>
Bootstrap will style the HTML <abbr> element in the following way (with a dotted bottom border and a help cursor on hover):

Example:
 <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="css/bootstrap.min.css">
  </head>
  <body>
    <div class="container">
<p>The <abbr title="World Health Organization">WHO</abbr> was founded in 1948.</p>
    </div>
  </body>

<blockquote>
Bootstrap will style the HTML <blockquote> element in the following way:

Example:
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="css/bootstrap.min.css">
  </head>
  <body>
    <div class="container">
       <blockquote>
 <p>AngularJS is a structural framework for dynamic web apps. AngularJS extends HTML with new attributes. AngularJS is perfect for SPAs (Single Page Applications)</p>
        <footer>From Google's website</footer>
      </blockquote>
    </div>
  </body>

.blockquote-reverse 	Indicates a blockquote with right-aligned content

Example:
 <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="css/bootstrap.min.css">
  </head>
  <body>
    <div class="container">
      <blockquote class="blockquote-reverse">
        <p>AngularJS is a structural framework for dynamic web apps. It lets you use HTML as your template language and lets you extend HTML's syntax to express your application's components clearly and succinctly.</p>
        <footer>From RaaJ's Forum..!</footer>
      </blockquote>
    </div>
      </body>


<dl>
Bootstrap will style the HTML <dl> element in the following way:

Example:
 <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="css/bootstrap.min.css">
  </head>
  <body>
    <div class="container">
       <p>Use the dl element to indicate a description list:</p>
      <dl>
        <dt>Coffee</dt>
        <dd>- black hot drink</dd>
        <dt>Milk</dt>
        <dd>- white cold drink</dd>
      </dl>     
    </div>
      </body>

<code>
Bootstrap will style the HTML <code> element in the following way:

Example:
 <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="css/bootstrap.min.css">
  </head>
  <body>
    <div class="container">
       <p>The following HTML elements: <code>span</code>, <code>section</code>, and <code>div</code> defines a section in a document.</p> 
    </div>
      </body>

<kbd>
Bootstrap will style the HTML <kbd> element in the following way:

Example:
 <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="css/bootstrap.min.css">
  </head>
  <body>
    <div class="container">
       <p>To indicate input that is typically entered via the keyboard</p>
      <p>Use <kbd>ctrl + s</kbd> to open the Save dialog box.</p>
    </div>
      </body>

<pre>
Bootstrap will style the HTML <pre> element in the following way:

Example:
 <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="css/bootstrap.min.css">
  </head>
  <body>
    <div class="container">
       <p>For multiple lines of code, use the pre element:</p>
<pre>
AngularJS extends 
HTML with new attributes. 
AngularJS is perfect for 
SPAs (Single Page 
Applications).
</pre>
    </div>
      </body>

.lead 	
Makes a paragraph stand out

Example:
 <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="css/bootstrap.min.css">
  </head>
  <body>
    <div class="container">
      <p class="lead">This paragraph stands out.</p>
      <p>This is a regular paragraph.</p>
    </div>
      </body>

.text-left 		Indicates left-aligned text
.text-center 	Indicates center-aligned text
.text-right 		Indicates right-aligned text
.text-justify 	Indicates justified text
.text-nowrap 	Indicates no wrap text
.text-lowercase 	Indicates lowercased text
.text-uppercase 	Indicates uppercased text
.text-capitalize 	Indicates capitalized text

Example:
 <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="css/bootstrap.min.css">
  </head>
  <body>
    <div class="container">
      <p class="text-left">Left-aligned text.</p>
      <p class="text-right">Right-aligned text.</p>      
      <p class="text-center">Center-aligned text.</p>
      <p class="text-justify">Justified text. Justified text.</p>      
      <p class="text-nowrap">No wrap text. No wrap text.</p>
      <p class="text-lowercase">Lowercased text.</p>
      <p class="text-uppercase">Uppercased text.</p>      
      <p class="text-capitalize">Capitalized text.</p>
    </div>
      </body>

.initialism 	Displays the text inside the <abbr> element in a slightly smaller font size

Example:
 <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="css/bootstrap.min.css">
  </head>
  <body>
    <div class="container">
      <p>The <abbr title="World Health Organization">WHO</abbr> was founded in 1948. (normal abbr)</p>      
      <p>The <abbr title="World Health Organization" class="initialism">WHO</abbr> was founded in 1948. (slightly smaller abbr)</p>
    </div>
      </body>

.list-unstyled 	
Removes the default list-style and left margin on list items (works on both <ul> and <ol>). This class only applies to immediate children list items (to remove the default list-style from any nested lists, apply this class to any nested lists as well)

Example:
 <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="css/bootstrap.min.css">
  </head>
  <body>
    <div class="container">
      <p>The class .list-unstyled removes the default list-style and left margin on list items (immediate children only):</p>
      <ul class="list-unstyled">
        <li>Coffee</li>
        <li>Tea
          <ul>
            <li>Black tea</li>
            <li>Green tea</li>
          </ul>
        </li>
        <li>Milk</li>
      </ul>
    </div>
      </body>

.list-inline 	Places all list items on a single line

Example:
 <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="css/bootstrap.min.css">
  </head>
  <body>
    <div class="container">
      <p>The class .list-inline places all list items on a single line:</p>
      <ul class="list-inline">
        <li>Coffee</li>
        <li>Tea</li>
        <li>Milk</li>
      </ul>
    </div>
      </body>

.dl-horizontal 	
Lines up the terms and descriptions in the <dl> element side-by-side. Starts off like default <dl>s, but when the browser window expands, it will line up side-by-side

Example:
 <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="css/bootstrap.min.css">
  </head>
  <body>
    <div class="container">
      <p>Use the .dl-horizontal class line up the description list side-by-side when the browser window expands:</p>
      <dl class="dl-horizontal">
        <dt>Coffee</dt>
        <dd>- black hot drink</dd>
        <dt>Milk</dt>
        <dd>- white cold drink</dd>
      </dl>           
    </div>
      </body>

.pre-scrollable 	Makes a <pre> element scrollable

Example:
 <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="css/bootstrap.min.css">
  </head>
  <body>
    <div class="container">
      <h2>Code</h2>    
      <p>For multiple lines of code, use the pre element:</p>
      <pre>Text in a pre element
      is displayed in a fixed-width
      font, and it preserves
      both      spaces and
      line breaks.</pre>

    <p>If you add the .pre-scrollable class..</p>
      <pre class="pre-scrollable">Text in a pre element
      is displayed in a fixed-width
      font, and it preserves
      both      spaces and
      line breaks.</pre>        
    </div>
      </body>
      --------------------------------------------------------------------------------------------------------------------------
      ﻿What is a Grid?
In graphic design, a grid is a structure made up of a series of vertical and horizontal lines used to structure content. A grid is widely used to design layout and content structure in print design. In web design, a grid is a very effective method to create a consistent layout rapidly and effectively using HTML and CSS.

Bootstrap Grid System 
Bootstrap grid system provides the fastest and easy way to create layouts of web pages.

Bootstrap provides a responsive, mobile-first fluid 12-column grid system. The responsive grid system appropriately scales up to 12 columns as the device or viewport size increases.

MOBILE FIRST STRATEGY
1 Content
Determine what is most important.
2 Layout
Design to smaller widths first.
Base CSS address mobile device first;media queries address for tablet,desktops.
3 Progressive Enhancement
Add elements as screen size increases.

Grid System Rules
Some Bootstrap grid system rules:
1 Rows must be placed within a .container (fixed-width) or .container-fluid (full-width) for proper alignment and padding
2 Use rows to create horizontal groups of columns
3 Content should be placed within columns, and only columns may be immediate children of rows
4 Predefined classes like .row and .col-xs-4 are available for quickly making grid layouts
5 Columns create gutters (gaps between column content) via padding. That padding is offset in rows for the first and last column via negative margin on .rows
6 Grid columns are created by specifying the number of 12 available columns you wish to span. For example, three equal columns would use three .col-xs-4

Basic Structure of a Bootstrap Grid
The following is a basic structure of a Bootstrap grid:

<body>
<div class="container">
<div class="row">
<div class="col-*-*">
.....................
.....................
</div>
</div>
<div class="row">
<div class="col-*-*">
.....................
.....................
</div>
</div>
<div class="row">
<div class="col-*-*">
.....................
.....................
</div>
</div>
</div>
</body>

Media Queries
Media query is a really fancy term for "conditional CSS rule". It simply applies some CSS based on certain conditions set forth. If those conditions are met, the style is applied.

Media Queries in Bootstrap allow you to move, show and hide content based on viewport size. Following media queries are used in LESS files to create the key breakpoints in the Bootstrap grid system.

/* Extra small devices (phones, less than 768px) */
/* No media query since this is the default in Bootstrap */

/* Small devices (tablets, 768px and up) */
@media (min-width: @screen-sm-min) { ... }

/* Medium devices (desktops, 992px and up) */
@media (min-width: @screen-md-min) { ... }

/* Large devices (large desktops, 1200px and up) */
@media (min-width: @screen-lg-min) { ... }

Grid options:
Extra small devices Phones (<768px) 	Class prefix --> .col-xs-
Small devices Tablets (≥768px) 	Class prefix --> .col-sm-
Medium devices Desktops (≥992px) 	Class prefix --> .col-md-
Large devices Desktops (≥1200px)	Class prefix --> .col-lg-

Grid Classes
The Bootstrap grid system has four classes:

1 xs (for phones)
2 sm (for tablets)
3 md (for desktops)
4 lg (for larger desktops)

The classes above can be combined to create more dynamic and flexible layouts.

Bootstrap Grid - Stacked-to-horizontal
We will use the .col-*-* grid classes to create a basic grid system that starts out stacked on mobiles and tablets (small devices), before becoming horizontal on desktop (medium and large) devices.

Example:
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet"  href="css/bootstrap.min.css">
  </head>
  <body>
    <div class="container">
      <h1>Hello World!</h1>
      <p>Resize the browser window to see the effect.</p>      
      <div class="row">
        <div class="col-sm-6" style="background-color:lavender;">
          <p>AngularJS is a structural framework for dynamic web apps. It lets you use HTML as your template language and lets you extend HTML's syntax to express..</p>
          <p> AngularJS is a structural framework for dynamic web apps. </p>
        </div>
        <div class="col-sm-6" style="background-color:lavenderblush;">
          <p>AngularJS is a structural framework for dynamic web apps. It lets you use HTML as your template language and lets you extend HTML's syntax to express your application's components clearly and succinctly. </p>
        </div>
      </div>
    </div>
   </body>

Note: Try The above example with "container-fluid"
 class.

Bootstrap Grid - Small Devices:
Assume we have a simple layout with two columns. We want the columns to be split 25%/75% for small devices.
Small devices are defined as having a screen width from 768 pixels to 991 pixels. For small devices we will use the .col-sm-* classes. We will add the following classes to our two columns:

<div class="col-sm-3">....</div>
<div class="col-sm-9">....</div>

Example:
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet"  href="css/bootstrap.min.css">
  </head>
  <body>
    <div class="container-fluid">
      <h1>Hello World!</h1>
      <p>Resize the browser window to see the effect.</p>
      <div class="row">
        <div class="col-sm-3" style="background-color:lavender;">
          <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>
          <p> Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
        </div>
        <div class="col-sm-9" style="background-color:lavenderblush;">
          <p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.</p>
        </div>
      </div>
    </div>
   </body>


Bootstrap Grid - Medium Devices
But on medium devices the design may be better as a 50%/50% split. Medium devices are defined as having a screen width from 992 pixels to 1199 pixels. For medium devices we will use the .col-md-* classes.

Now we will add the column widths for medium devices:
<div class="col-sm-3 col-md-6">....</div>
<div class="col-sm-9 col-md-6">....</div>

Example:
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet"  href="css/bootstrap.min.css">
  </head>
  <body>
    <div class="container-fluid">
      <h1>Hello World!</h1>
      <p>Resize the browser window to see the effect.</p>
      <div class="row">
        <div class="col-sm-3 col-md-6" style="background-color:lavender;">
          <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>
          <p> Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
        </div>
        <div class="col-sm-9 col-md-6" style="background-color:lavenderblush;">
          <p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.</p>
        </div>
      </div>
    </div>
     </body>

Bootstrap Grid - Large Devices
But on large devices the design may be better as a 33%/66% split. Tip: Large devices are defined as having a screen width from 1200 pixels and above. For large devices we will use the .col-lg-* classes.

So now we will add the column widths for large devices:
<div class="col-sm-3 col-md-6 col-lg-4">....</div>
<div class="col-sm-9 col-md-6 col-lg-8">....</div>

Example:
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet"  href="css/bootstrap.min.css">
  </head>
  <body>
    <div class="container-fluid">
      <h1>Hello World!</h1>
      <p>Resize the browser window to see the effect.</p>
      <div class="row">
        <div class="col-sm-3 col-md-6 col-lg-4" style="background-color:lavender;">
          <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>
          <p> Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
        </div>
        <div class="col-sm-9 col-md-6 col-lg-8" style="background-color:lavenderblush;">
          <p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.</p>
        </div>
      </div>
    </div>
      </body>

Three Equal Columns

The following example shows how to get a three equal-width columns starting at tablets and scaling to large desktops. On mobile phones, the columns will automatically stack:

Example:
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet"  href="css/bootstrap.min.css">
  </head>
  <body>
    <div class="container-fluid">
      <h1>Hello World!</h1>
      <p>Resize the browser window to see the effect.</p>
         <div class="row">
        <div class="col-sm-4" style="background-color:lavender;">.col-sm-4</div>
        <div class="col-sm-4" style="background-color:lavenderblush;">.col-sm-4</div>
        <div class="col-sm-4" style="background-color:lavender;">.col-sm-4</div>
      </div>
    </div>
          </body>

Three Unequal Columns
The following example shows how to get a three various-width columns starting at tablets and scaling to large desktops:

Example:
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet"  href="css/bootstrap.min.css">
  </head>
  <body>
    <body>
    <div class="container-fluid">
      <h1>Hello World!</h1>
      <p>Resize the browser window to see the effect.</p>
            <div class="row">
        <div class="col-sm-3" style="background-color:lavender;">.col-sm-3</div>
        <div class="col-sm-6" style="background-color:lavenderblush;">.col-sm-6</div>
        <div class="col-sm-3" style="background-color:lavender;">.col-sm-3</div>
      </div>
    </div>
          </body>


Two Unequal Columns
The following example shows how to get two various-width columns starting at tablets and scaling to large desktops:

Example:
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet"  href="css/bootstrap.min.css">
  </head>
  <body>
    <body>
    <div class="container-fluid">
      <h1>Hello World!</h1>
      <p>Resize the browser window to see the effect.</p>
       <div class="row">
        <div class="col-sm-4" style="background-color:lavender;">.col-sm-4</div>
        <div class="col-sm-8" style="background-color:lavenderblush;">.col-sm-8</div>
      </div>
      </div>
      </body>

Two Columns With Two Nested Columns
The following example shows how to get two columns starting at tablets and scaling to large desktops, with another two columns (equal widths) within the larger column (at mobile phones, these columns and their nested columns will stack):

Example:
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet"  href="css/bootstrap.min.css">
  </head>
  <body>
    <body>
    <div class="container-fluid">
      <h1>Hello World!</h1>
      <p>Resize the browser window to see the effect.</p>
       <div class="row">
        <div class="col-sm-8" style="background-color:lavender;">
          .col-sm-8
          <div class="row">
            <div class="col-sm-6" style="background-color:lightcyan;">.col-sm-6</div>
            <div class="col-sm-6" style="background-color:lightgray;">.col-sm-6</div>
          </div>
        </div>
        <div class="col-sm-4" style="background-color:lavenderblush;">.col-sm-4</div>
      </div>
        </div>
      </body>

Mixed: Mobile And Desktop
The Bootstrap grid system has four classes: xs (phones), sm (tablets), md (desktops), and lg (larger desktops). These classes can be combinated to create more dynamic and flexible layouts.

Note: Each class scales up, so if you wish to set the same widths for xs and sm, you only need to specify xs.

Example:
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet"  href="css/bootstrap.min.css">
  </head>
  <body>
    <body>
    <div class="container-fluid">
      <h1>Hello World!</h1>
      <p>Resize the browser window to see the effect.</p>
      
     <div class="row" style="background-color:lavender;">
        <div class="col-xs-12 col-md-8">.col-xs-12 .col-md-8</div>
        <div class="col-xs-6 col-md-4">.col-xs-6 .col-md-4</div>
      </div>
      <div class="row" style="background-color:lavenderblush;">
        <div class="col-xs-6 col-md-4">.col-xs-6 .col-md-4</div>
        <div class="col-xs-6 col-md-4">.col-xs-6 .col-md-4</div>
        <div class="col-xs-6 col-md-4">.col-xs-6 .col-md-4</div>
      </div>
      <div class="row" style="background-color:lightcyan;">
        <div class="col-xs-6">.col-xs-6</div>
        <div class="col-xs-6">.col-xs-6</div>
      </div>
      
    </div>
      </body>

Note:
Remember that grid columns should add up to twelve for a row. More than that, columns will stack no matter the viewport.

Mixed: Mobile, Tablet And Desktop

Example:
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet"  href="css/bootstrap.min.css">
  </head>
  <body>
    <body>
   <div class="container-fluid">
      <h1>Hello World!</h1>
      <p>Resize the browser window to see the effect.</p>
      <div class="row" style="background-color:lavender;">
        <div class="col-xs-12 col-sm-6 col-lg-8">.col-xs-12 .col-sm-6 .col-lg-8</div>
        <div class="col-xs-6 col-lg-4">.col-xs-6 .col-lg-4</div>
      </div>
      <div class="row" style="background-color:lavenderblush;">
        <div class="col-xs-6 col-sm-4">.col-xs-6 .col-sm-4</div>
        <div class="col-xs-6 col-sm-4">.col-xs-6 .col-sm-4</div>
        <div class="col-xs-6 col-sm-4">.col-xs-6 .col-sm-4</div>
      </div> 
   </div>
      </body>
      ---------------------------------------------------------------------------------------------------------------------------
      Bootstrap CSS Tables Reference:
<table> Classes
Use the classes below to style any table: 
Class 		Description 	
.table 		Adds basic styling 
.table-striped 	Adds zebra-striping to any table row within <tbody>
.table-bordered 	Adds border on all sides of the table and cells 	
.table-hover 	Enables a hover state on table rows within a <tbody> 	
.table-condensed 	Makes table more compact by cutting cell padding in half

.table 		
Adds basic styling (light padding and only horizontal dividers) to any <table> 

Example:
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet"  href="css/bootstrap.min.css">
      </head>
  <body>
 <div class="container">
      <h2>Table</h2>
      <p>The .table class adds basic styling (light padding and only horizontal dividers) to a table:</p>            
      <table class="table">
        <thead>
          <tr>
            <th>#</th>
            <th>Firstname</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>1</td>
            <td>Anna</td>
          </tr>
          <tr>
            <td>2</td>
            <td>Debbie</td>
          </tr>
          <tr>
            <td>3</td>
            <td>John</td>
          </tr>
        </tbody>
      </table>
    </div>
      </body>

.table-hover 	
Enables a hover state on table rows within a <tbody> 

Example:
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet"  href="css/bootstrap.min.css">
      </head>
  <body>
 <div class="container">
      <h2>Table</h2>
      <p>The .table-hover class enables a hover state on table rows within a tbody:</p>                              
      <table class="table table-hover">
        <thead>
          <tr>
            <th>#</th>
            <th>Firstname</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>1</td>
            <td>RaaJ</td>
          </tr>
          <tr>
            <td>2</td>
            <td>Scott</td>
          </tr>
          <tr>
            <td>3</td>
            <td>John</td>
          </tr>
        </tbody>
      </table>
    </div>
      </body>


<tr>, <th> and <td> Classes
Use the classes below to color table rows or cells:
Class 		Description 	
.active 		Applies the hover color to a particular row or cell 	
.success 		Indicates a successful or positive action 	
.info 		Indicates a neutral informative change or action 	
.warning 		Indicates a warning that might need attention 	
.danger 		Indicates a dangerous or potentially negative action

.active 		
Applies the hover color to a particular row or cell 

Example:
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet"  href="css/bootstrap.min.css">
      </head>
  <body>
 <div class="container">
      <h2>Table</h2>
      <p>The .active class applies the hover color to a particular row or cell:</p>                                        
      <table class="table">
        <thead>
          <tr>
            <th>#</th>
            <th>Firstname</th>
          </tr>
        </thead>
        <tbody>
          <tr class="active">
            <td>1</td>
            <td>Anna</td>
          </tr>
          <tr>
            <td>2</td>
            <td>Debbie</td>
          </tr>
          <tr>
            <td>3</td>
            <td>John</td>
          </tr>
        </tbody>
      </table>
    </div>
      </body>

.danger 		
Indicates a dangerous or potentially negative action

Example:
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet"  href="css/bootstrap.min.css">
      </head>
  <body>
 <div class="container">
      <h2>Table</h2>
      <p>The .danger class indicates a dangerous or potentially negative action:</p>                                                                                
      <table class="table">
        <thead>
          <tr>
            <th>#</th>
            <th>Firstname</th>
          </tr>
        </thead>
        <tbody>
          <tr class="danger">
            <td>1</td>
            <td>Anna</td>
          </tr>
          <tr>
            <td>2</td>
            <td>Debbie</td>
          </tr>
          <tr>
            <td>3</td>
            <td>John</td>
          </tr>
        </tbody>
      </table>
    </div>
      </body>

Responsive Tables:
The .table-responsive class creates a responsive table. The table will then scroll horizontally on small devices (under 768px). When viewing on anything larger than 768px wide, there is no difference:

Example:
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet"  href="css/bootstrap.min.css">
      </head>
  <body>
 <div class="container">
      <h2>Table</h2>
      <p>The .table-responsive class creates a responsive table which will scroll horizontally on small devices (under 768px). When viewing on anything larger than 768px wide, there is no difference:</p>                                                                                      
      <div class="table-responsive">          
      <table class="table">
        <thead>
          <tr>
            <th>#</th>
            <th>Firstname</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>1</td>
            <td>Anna</td>
          </tr>
          <tr>
            <td>2</td>
            <td>Debbie</td>
          </tr>
          <tr>
            <td>3</td>
            <td>John</td>
          </tr>
        </tbody>
      </table>
      </div>
    </div>
      </body>

Bootstrap CSS Images Reference
The classes below can be used to style any image:
Class 		Description 	
.img-rounded 	Adds rounded corners to an image
.img-circle 	Shapes the image to a circle
.img-thumbnail 	Shapes the image to a thumbnail 	
.img-responsive 	Makes an image responsive

Responsive Images
Create responsive images by adding an .img-responsive class to the <img> tag. The image will then scale nicely to the parent element.
The .img-responsive class applies max-width: 100%; and height: auto; to the image:

Example:
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet"  href="css/bootstrap.min.css">
      </head>
  <body>
 <div class="container">
      <h2>Image</h2>
      <p>The .img-responsive class makes the image scale nicely to the parent element:</p>            <img src="file:///D:\HTML Class Materials\BootStrap\Images\sea.jpg" class="img-circle" alt="Boot" width="304" height="236"> 
    </div>
      </body>
      --------------------------------------------------------------------------------------------------------------------------------------------------
      1) What is HTML?
HTML stands for Hyper Text Markup Language. It is a language of World
Wide Web. It is a standard text formatting language which is used to
create and display pages on the Web.
2) What are Tags?
HTML tags are composed of three things: opening tag, content and ending
tag. Some tags are unclosed tags. HTML documents are made of two
things: content, and tags
Content is placed between tags to display data on the web page.
3) Do all HTML tags have end tag?
No. There are some HTML tags that don&#39;t need a closing tag. For example:
&lt;image&gt; tag, &lt;br&gt; tag.
4) What are some common lists that are used when designing a page?
There are many common lists which are used to design a page. You can
choose any or a combination of the following list types:
Ordered list
Unordered list
Menu list
Directory list
Definition list
5) What is the difference between HTML elements and tags?
HTML elements communicate to the browser to render text. When the
elements are surrounded by brackets &lt;&gt;, they form HTML tags. Most of
the time, tags come in pair and surround content.
6) What is semantic HTML?
Semantic HTML is a coding style. It is the use of HTML markup to reinforce
the semantics or meaning of the content. For example: In semantic HTML
&lt;b&gt; &lt;/b&gt; tag is not used for bold statement as well as &lt;i&gt; &lt;/i&gt; tag is
used for italic. Instead of these we use &lt;strong&gt;&lt;/strong&gt; and
&lt;em&gt;&lt;/em&gt; tags.
7) What is image map?
Image map facilitates you link many different web pages using a single
image. You can define shapes in images that you want to make part of an
image mapping.
8) How to insert a copyright symbol on a browser page?
can insert a copyright symbol by using &amp;copy; or &amp;#169; in an HTML file.

NARESH i TECHNOLOGIES, HYDERABAD, 04023746666

Prepared By Subba Raju
9) How do you keep list elements straight in an HTML file?
You can keep the list elements straight by using indents.
10) Does a hyperlink only apply to text?
No, you can use hyperlinks on text and images both.
11) What is a style sheet?
A style sheet is used to build a consistent, transportable, and well designed
style template. You can add these templates on several different web
pages.
12) Can you create a multi colored text on a web page?
Yes. To create a multicolor text on a web page you can use &lt;font color
=&quot;color&quot;&gt; &lt;/font&gt; for the specific texts you want to color.
13) Is it possible to change the color of the bullet?
The color of the bullet is always the color of the first text of the list. So, if
you want to change the color of the bullet, you must change the color of
the text.
14) What is a marquee?
Marquee is used to put the scrolling text on a web page. You should put
the text which you want to scroll within the &lt;marquee&gt;......&lt;/marquee&gt;
tag.
15) How many tags can be used to separate section of texts?
There are three tags used to separate the texts. i.e. usually &lt;br&gt; tag is
used to separate line of texts. Other tags are&lt;p&gt; tag and &lt;blockquote&gt;
tag.
16) How to make a picture a background image of a web page?
To make a picture a background image on a web page, you should put the
following tag code after the &lt;/head&gt; tag.
&lt;body background = &quot;image.gif&quot;&gt;
Here, replace the &quot;image.gif&quot; with the name of your image file which you
want to display on your web page.
17) What are empty elements?
HTML elements with no content are called empty elements. For example:
&lt;br&gt;, &lt;hr&gt; etc.
18) What is the use of span tag? Give one example.
The span tag is used for following things:
For adding color on text
For adding background on text
Highlight any color text etc.

NARESH i TECHNOLOGIES, HYDERABAD, 04023746666

Prepared By Subba Raju
Example:
&lt;p&gt;
&lt;span style=&quot;color:#ffffff;&quot;&gt;
In this page we use span.
&lt;/span&gt;
&lt;/p&gt;
19) What is the use of iframe tag?
An iframe is used to display a web page within a web page.
Syntax:
&lt;iframe src=&quot;URL&quot;&gt;&lt;/iframe&gt;
Example:
&lt;iframe src=&quot;demo_iframe.html&quot; width=&quot;200px&quot;
height=&quot;200px&quot;&gt;&lt;/iframe&gt;
Target to a link:
&lt;iframe src=&quot;http://www.nareshit.com&quot; name=&quot;iframe_a&quot;&gt;&lt;/iframe&gt;

HTML5 INTERVIEW QUESTIONS

20) What is canvas in HTML5?
Canvas is an HTML area which is used to draw graphics.
21) What is SVG?
HTML SVG is used to describe the two dimensional vector and vector/raster
graphics.
22) What are the different new form element types in HTML 5?
Following is a list of 10 important new elements in HTML 5:
Color
Date
Datetime-local
Email
Time
Url
Range
Telephone
Number
Search
23) Is there any need to change the web browsers to support HTML5?
No. Almost all browsers (updated versions) support HTML 5. For example:
Chrome, Firefox, Opera, Safari, IE etc.

NARESH i TECHNOLOGIES, HYDERABAD, 04023746666

Prepared By Subba Raju
24) Which video formats are supported by HTML5?
HTML 5 supports three types of video format:
mp4
webm
ogg
25) Is audio tag supported in HTML 5?
Yes. It is used to add sound or music files on the web page.
26) What is the difference between progress and meter tag?
The progress tag is used to represent the progress of the task only while
the meter tag is used to measure data within a given range.
27) What is the use of figure tag in HTML 5?
The figure tag is used to add a photo in the document on the web page.
28) What is button tag?
The button tag is used in HTML 5. It is used to create a clickable button
within HTML form on the web page. It is generally used to create a
&quot;submit&quot; or &quot;reset&quot; button.
29) What does details and summary tag?
The details tag is used to specify some additional details on the web page.
It can be viewed or hidden on demand. The summary tag is used with
details tag.
30) What is datalist tag?
The HTML 5 datalist tag provides an auto complete feature on form
element. It facilitates users to choose the predefined options.
31) How tags are migrated from HTML4 to HTML5?
No. Typical HTML4 Typical HTML5
1) &lt;div id=&quot;header&quot;&gt; &lt;header&gt;
2) &lt;div id=&quot;menu&quot;&gt; &lt;nav&gt;
3) &lt;div id=&quot;content&quot;&gt; &lt;section&gt;
4) &lt;div id=&quot;post&quot;&gt; &lt;article&gt;
5) &lt;div id=&quot;footer&quot;&gt; &lt;footer&gt;
Header and Footer Example
HTML 4 Header and Footer:
&lt;div id=&quot;header&quot;&gt;
&lt;h1&gt;Monday Times&lt;/h1&gt;
&lt;/div&gt;
.

NARESH i TECHNOLOGIES, HYDERABAD, 04023746666

Prepared By Subba Raju
.
.
&lt;div id=&quot;footer&quot;&gt;
&lt;p&gt;&amp;copy; nareshit. All rights reserved.&lt;/p&gt;
&lt;/div&gt;
HTML 5 Header and Footer:
&lt;header&gt;
&lt;h1&gt;Monday Times&lt;/h1&gt;
&lt;/header&gt;
.
.
.
&lt;footer&gt;
&lt;p&gt;© nareshit. All rights reserved.&lt;/p&gt;
&lt;/footer&gt;
Menu Example
HTML 4 Menu:
&lt;div id=&quot;menu&quot;&gt;
&lt;ul&gt;
&lt;li&gt;News&lt;/li&gt;
&lt;li&gt;Sports&lt;/li&gt;
&lt;li&gt;Weather&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
HTML 5 Menu:
&lt;nav&gt;
&lt;ul&gt;
&lt;li&gt;News&lt;/li&gt;
&lt;li&gt;Sports&lt;/li&gt;
&lt;li&gt;Weather&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;
32) If I do not put &lt;!DOCTYPE html&gt; will HTML 5 work?
No, browser will not be able to identify that it is a HTML document and
HTML 5 tags will not function properly.

NARESH i TECHNOLOGIES, HYDERABAD, 04023746666

Prepared By Subba Raju
33) What is the use of required attribute in HTML5?
It forces user to fill text on textfield or textarea before submitting form. It
is used for form validation.
Example:
Name: &lt;input type=&quot;text&quot; name=&quot;name&quot; required&gt;
34) What are the new &lt;input&gt; types for form validation in HTML5?
The new input types for form validation are email, url, number, tel and
date.
Example:
&lt;input type=&quot;email&quot;&gt;

CSS INTERVIEW QUESTIONS

1) What is CSS?
CSS stands for Cascading Style Sheet. It is a popular styling language
which is used with HTML to design websites.
2) What is the origin of CSS?
SGML (Standard Generalized Markup Language) is the origin of CSS.
3) What are the different variations of CSS?
Following are the different variations of CSS:
CSS1
CSS2
CSS2.1
CSS3
CSS4
4) How can you integrate CSS on a web page?
There are three methods to integrate CSS on web pages.
Inline method
Embedded/Internal method
Linked/Imported/External method
5) What are the advantages of CSS?
Bandwidth
Site-wide consistency
Page reformatting
Accessibility

NARESH i TECHNOLOGIES, HYDERABAD, 04023746666

Prepared By Subba Raju
Content separated from presentation
6) What are the limitations of CSS?
Ascending by selectors is not possible
Limitations of vertical control
No expressions
No column declaration
Pseudo-class not controlled by dynamic behavior
Rules, styles, targeting specific text not possible
7) What are the CSS frameworks?
CSS frameworks are the preplanned libraries which makes easy and more
standard compliant web page styling.
8) Why background and color are the separate properties if they should
always be set together?
There are two reasons behind this:
It enhances the legibility of style sheets. The background property is a
complex property in CSS and if it is combined with color, the complexity
will further increases.
Color is an inherited property while background is not. So this can make
confusion further.
9) What is Embedded Style Sheet?
An Embedded style sheet is a CSS style specification method used with
HTML. You can embed the entire style sheet in an HTML document by
using the STYLE element.
10) What are the advantages of Embedded Style Sheets?
You can create classes for use on multiple tag types in the document.
You can use selector and grouping methods to apply styles in complex
situations.
No extra download is required to import the information.
11) What is CSS selector?
It is a string that identifies the elements to which a particular declaration
will apply. It is also referred as a link between the HTML document and the
style sheet. It is equivalent of HTML elements.

NARESH i TECHNOLOGIES, HYDERABAD, 04023746666

Prepared By Subba Raju
12) What is ruleset?
Ruleset is used to identify that selectors can be attached with other
selectors. It has two parts:
Selector
Declaration
13) What is the difference between class selectors and id selectors?
An overall block is given to class selector while id selectors take only a
single element differing from other elements.
14) What are the advantages of External Style Sheets?
You can create classes for reusing it in many documents.
By using it, you can control the styles of multiple documents from one
file.
In complex situations, you can use selectors and grouping methods to
apply styles.
15) What is the difference between inline, embedded and external style
sheets?
Inline: Inline Style Sheet is used to style only a small piece of code.
Embedded: Embedded style sheets are put between the
&lt;head&gt;...&lt;/head&gt; tags.
External: This is used to apply the style to all the pages within your website
by changing just one style sheet.
16) What is RWD?
RWD stands for Responsive Web Design. This technique is used to display
the designed page perfectly on every screen size and device. For example:
Mobile, Tablet, desktop, laptop etc. You don&#39;t need to create a different
page for each device.
17) What are the benefits of CSS sprites?
: If a web page has large no. of images that takes a longer time to load
because each image separately sends out an http request. The concept of
CSS sprites is used to reduce the loading time for a web page because it
combines the various small images into one image. It reduces the number
of http requests and hence the loading time.

NARESH i TECHNOLOGIES, HYDERABAD, 04023746666

Prepared By Subba Raju
18) What is the difference between logical tags and physical tags?
Physical tags are referred to as presentational mark-up while logical tags
are useless for appearances.
Physical tags are newer versions on the other hand logical tags are old
and concentrate on content.
19) What is the CSS Box model and what are its elements?
The CSS box model is used to define the design and layout of elements of
CSS.
The elements are:
Margin
Border
Padding
Content
20) What is the float property of CSS?
The CSS float property is used to move the image to the right or left along
with the texts to be wrapped around it. It doesn&#39;t change the property of
the elements used before it.
21) How to restore the default property value using CSS?
In short, there is no easy way to restore to default values to whatever a
browser uses.
The closest option is to use the &#39;initial&#39; property value, which will restore
the default CSS values, rather than the browser&#39;s default styles.
22) What is the purpose of the z-index and how is it used?
The z-index helps specify the stack order of positioned elements that may
overlap one another. The z-index default value is zero, and can take on
either a positive or negative number.
An element with a higher z-index is always stacked above than a lower
index.
Z-Index can take the following values:
Auto: Sets the stack order equal to its parents.
Number: Orders the stack order.
Initial: Sets this property to its default value (0).
Inherit: Inherits this property from its parent element.

NARESH i TECHNOLOGIES, HYDERABAD, 04023746666

Prepared By Subba Raju
23) Explain the difference between visibility: hidden and display: none?
visibility: hidden simply hides the element but it will occupy space and
affect the layout of the document.
display: none also hides the element but will not occupy space. It will not
affect the layout of the document.
24) What do you understand by W3C?
W3C stands for World Wide Web Consortium.
25) What is tweening?
It is the process of generating intermediate frames between two images.
It gives the impression that the first image has smoothly evolved into the
second one.
It is an important method used in all types of animations.
In CSS3, Transforms (matrix, translate, rotate, scale etc.) module can be
used to achieve tweening.
26) What is the difference between CSS2 and CSS3?
The main difference between CSS2 and CSS3 is that CSS3 is divided into
different sections which is also known as modules.
Unlike CSS2, CSS3 modules are supported by many browsers.

JAVASCRIPT INTERVIEW QUESTIONS

1) What is JavaScript?
JavaScript is a scripting language. It is different from Java language. It is
object-based, lightweight and cross platform. It is widely used for client
side validation.
2) What is the difference between JavaScript and jscript?
Netscape provided the JavaScript language. Microsoft changed the name
and called it JScript to avoid the trademark issue.In other words, you can
say JScript is same as JavaScript, but it is provided by Microsoft.
3) How to write a hello world example of JavaScript?
A simple example of JavaScript hello world is given below. You need to
place it inside the body tag of html.

NARESH i TECHNOLOGIES, HYDERABAD, 04023746666

Prepared By Subba Raju
&lt;script type=&quot;text/javascript&quot;&gt;
document.write(&quot;JavaScript Hello World!&quot;);
&lt;/script&gt;
4) How to use external JavaScript file?
I am assuming that js file name is message.js, place the following script
tag inside the head tag.
&lt;script type=&quot;text/javascript&quot; src=&quot;message.js&quot;&gt;&lt;/script&gt;
5) Is JavaScript case sensitive language?
Yes.
6) What is BOM?
BOM stands for Browser Object Model. It provides interaction with the
browser. The default object of browser is window. Browser Object Model
7) What is DOM? What is the use of document object?
DOM stands for Document Object Model. A document object represent the
html document. It can be used to access and change the content of
html.Document Object Model
8) What is the use of window object?
The window object is automatically created by the browser that represents
a window of a browser.
It is used to display the popup dialog box such as alert dialog box, confirm
dialog box, input dialog box etc.
9) What is the use of history object?
The history object of browser can be used to switch to history pages such
as back and forward from current page or another page. There are three
methods of history object.
history.back()
history.forward()
history.go(number): number may be positive for forward, negative for
backward.
10) How to write comment in JavaScript?
There are two types of comments in JavaScript.

NARESH i TECHNOLOGIES, HYDERABAD, 04023746666

Prepared By Subba Raju
Single Line Comment: It is represented by // (double forward slash)
Multi Line Comment: It is represented by slash with asterisk symbol as
/* write comment here */
11) How to create function in JavaScript?
To create function in JavaScript, follow the following syntax.
function function_name()
{
//function body
}
12) What are the JavaScript data types?
There are two types of data types in JavaScript:
Primitive Data Types
Non-primitive Data Types
13) What is the difference between == and ===?
The == operator checks equality only whereas === checks equality and
data type i.e. value must be of same type.
14) How to write html code dynamically using JavaScript?
The innerHTML property is used to write the HTML code using JavaScript
dynamically. Let&#39;s see a simple example:
document.getElementById(&#39;mylocation&#39;).innerHTML=&quot;&lt;h2&gt;This is heading
using JavaScript&lt;/h2&gt;&quot;;
15) How to write normal text code using JavaScript dynamically?
The innerText property is used to write the simple text using JavaScript
dynamically. Let&#39;s see a simple Example:
document.getElementById(&#39;mylocation&#39;).innerText=&quot;This is text using
JavaScript&quot;;
16) How to create objects in JavaScript?
There are 3 ways to create object in JavaScript.
By object literal
By creating instance of Object
By Object Constructor

NARESH i TECHNOLOGIES, HYDERABAD, 04023746666

Prepared By Subba Raju
Let&#39;s see a simple code to create object using object literal.
emp={id:102,name:&quot;Rahul Kumar&quot;,salary:50000}
17) How to create array in JavaScript?
There are 3 ways to create array in JavaScript.
By array literal
By creating instance of Array
By using an Array constructor
Let&#39;s see a simple code to create array using object literal.
var emp=[&quot;Shyam&quot;,&quot;Vimal&quot;,&quot;Ratan&quot;];
18) What does the isNaN() function?
The isNan() function returns true if the variable value is not a number.
19) What is the output of 10+20+&quot;30&quot; in JavaScript?
3030 because 10+20 will be 30. If there is numeric value before and after
+, it is treated is binary + (arithmetic operator).
20) What is the output of &quot;10&quot;+20+30 in JavaScript?
102030 because after a string all the + will be treated as string
concatenation operator (not binary +).
21) Difference between Client side JavaScript and Server side JavaScript?
Client side JavaScript comprises the basic language and predefined objects
which are relevant to running java script in a browser. The client side
JavaScript is embedded directly by in the HTML pages. This script is
interpreted by the browser at run time.
Server side JavaScript also resembles like client side java script. It has
relevant java script which is to run in a server. The server side JavaScript
are deployed only after compilation.
22) In which location cookies are stored on the hard disk?
The storage of cookies on the hard disk depends on OS and the browser.
The Netscape navigator on Windows uses cookies.txt file that contains all
the cookies. The path is : c:\Program
Files\Netscape\Users\username\cookies.txt

NARESH i TECHNOLOGIES, HYDERABAD, 04023746666

Prepared By Subba Raju
The Internet Explorer stores the cookies on a file username@website.txt.
The path is: c:\Windows\Cookies\username@Website.txt.
23) What is the real name of JavaScript?
The original name was Mocha, a name chosen by Marc Andreessen,
founder of Netscape. In September of 1995, the name was changed to
LiveScript. In December 1995, after receiving a trademark license from
Sun, the name JavaScript was adopted.
24) What is the difference between undefined value and null value?
Undefined value: A value that is not defined and has no keyword is known
as undefined value. For Example:
int number;//Here, number has undefined value.
Null value: A value that is explicitly specified by the keyword &quot;null&quot; is
known as null value. For Example:
String str=null;//Here, str has a null value.
24) How to set the cursor to wait in JavaScript?
The cursor can be set to wait in JavaScript by using the property &quot;cursor&quot;.
The following example illustrates the usage:
&lt;script&gt;
window.document.body.style.cursor = &quot;wait&quot;;
&lt;/script&gt;
25) What is this?
var myArray = [[[]]];
Ans: Three dimensional array.
26) Are Java and JavaScript same?
No, Java and JavaScript are the two different languages. Java is a robust,
secured and object-oriented programming language whereas JavaScript is
a client side scripting language with some limitations.
27) What is negative infinity?
Negative Infinity is a number in JavaScript which can be derived by dividing
negative number by zero.

NARESH i TECHNOLOGIES, HYDERABAD, 04023746666

Prepared By Subba Raju
28) What is difference between View state and Session state?
&quot;View state&quot; is specific to a page in a session whereas &quot;Session state&quot; is
specific to a user or browser that can be accessed across all pages in the
web application.
29) What are the pop up boxes available in JavaScript?
Alert Box
Confirm Box
Prompt Box
30) How can we detect OS of the client machine using JavaScript?
The navigator.appVersion string can be used to detect the operating
system on the client machine.
31) How to submit a form using JavaScript by clicking a link?
Let&#39;s see the JavaScript code to submit form on clicking the link.
&lt;form name=&quot;myform&quot; action=&quot;index.php&quot;&gt;
Search: &lt;input type=&#39;text&#39; name=&#39;query&#39; /&gt;
&lt;a href=&quot;javascript: submitform()&quot;&gt;Search&lt;/a&gt;
&lt;/form&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
function submitform()
{
document.myform.submit();
}
&lt;/script&gt;
32) Is JavaScript faster than ASP script?
Yes, because it doesn&#39;t require web server&#39;s support for execution.
33) How to change the background color of HTML document using
JavaScript?
&lt;script type=&quot;text/javascript&quot;&gt;
document.body.bgColor=&quot;pink&quot;;
&lt;/script&gt;
34) How to handle exceptions in JavaScript?
--------------------------------------------------------------------------------------------------------------------------
